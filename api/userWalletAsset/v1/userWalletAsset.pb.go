// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: userWalletAsset/v1/userWalletAsset.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 人民币
	Cny string `protobuf:"bytes,1,opt,name=cny,proto3" json:"cny,omitempty"`
	// 美元
	Usd string `protobuf:"bytes,2,opt,name=usd,proto3" json:"usd,omitempty"`
	// USDT
	Usdt string `protobuf:"bytes,3,opt,name=usdt,proto3" json:"usdt,omitempty"`
	// BTC
	Btc string `protobuf:"bytes,4,opt,name=btc,proto3" json:"btc,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{0}
}

func (x *Currency) GetCny() string {
	if x != nil {
		return x.Cny
	}
	return ""
}

func (x *Currency) GetUsd() string {
	if x != nil {
		return x.Usd
	}
	return ""
}

func (x *Currency) GetUsdt() string {
	if x != nil {
		return x.Usdt
	}
	return ""
}

func (x *Currency) GetBtc() string {
	if x != nil {
		return x.Btc
	}
	return ""
}

type UserWalletAssetTotalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包id
	Uids []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
	// 平台 web android ios
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *UserWalletAssetTotalReq) Reset() {
	*x = UserWalletAssetTotalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletAssetTotalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletAssetTotalReq) ProtoMessage() {}

func (x *UserWalletAssetTotalReq) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletAssetTotalReq.ProtoReflect.Descriptor instead.
func (*UserWalletAssetTotalReq) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{1}
}

func (x *UserWalletAssetTotalReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *UserWalletAssetTotalReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type UserWalletAssetTotalResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 换算人民币总资产
	Cny *UserWalletAssetTotalResp_UserWalletAssetTotal `protobuf:"bytes,1,opt,name=cny,proto3" json:"cny,omitempty"`
	// 换算美元总资产
	Usd *UserWalletAssetTotalResp_UserWalletAssetTotal `protobuf:"bytes,2,opt,name=usd,proto3" json:"usd,omitempty"`
	// 换算USDT总资产
	Usdt *UserWalletAssetTotalResp_UserWalletAssetTotal `protobuf:"bytes,3,opt,name=usdt,proto3" json:"usdt,omitempty"`
	// 换算BTC总资产
	Btc *UserWalletAssetTotalResp_UserWalletAssetTotal `protobuf:"bytes,4,opt,name=btc,proto3" json:"btc,omitempty"`
	// 收益百分比
	IncomePercentage string `protobuf:"bytes,5,opt,name=incomePercentage,proto3" json:"incomePercentage,omitempty"`
}

func (x *UserWalletAssetTotalResp) Reset() {
	*x = UserWalletAssetTotalResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletAssetTotalResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletAssetTotalResp) ProtoMessage() {}

func (x *UserWalletAssetTotalResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletAssetTotalResp.ProtoReflect.Descriptor instead.
func (*UserWalletAssetTotalResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{2}
}

func (x *UserWalletAssetTotalResp) GetCny() *UserWalletAssetTotalResp_UserWalletAssetTotal {
	if x != nil {
		return x.Cny
	}
	return nil
}

func (x *UserWalletAssetTotalResp) GetUsd() *UserWalletAssetTotalResp_UserWalletAssetTotal {
	if x != nil {
		return x.Usd
	}
	return nil
}

func (x *UserWalletAssetTotalResp) GetUsdt() *UserWalletAssetTotalResp_UserWalletAssetTotal {
	if x != nil {
		return x.Usdt
	}
	return nil
}

func (x *UserWalletAssetTotalResp) GetBtc() *UserWalletAssetTotalResp_UserWalletAssetTotal {
	if x != nil {
		return x.Btc
	}
	return nil
}

func (x *UserWalletAssetTotalResp) GetIncomePercentage() string {
	if x != nil {
		return x.IncomePercentage
	}
	return ""
}

type UserWalletAssetHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包id
	Uids []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
	// 时间范围，7d,30d,90d,180d
	Range string `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	// 平台 web android ios
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// 是否为 DeFi 资产
	IsDefi bool `protobuf:"varint,4,opt,name=isDefi,proto3" json:"isDefi,omitempty"` // false: 非 DeFi 资产，true： DeFi 资产
}

func (x *UserWalletAssetHistoryReq) Reset() {
	*x = UserWalletAssetHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletAssetHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletAssetHistoryReq) ProtoMessage() {}

func (x *UserWalletAssetHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletAssetHistoryReq.ProtoReflect.Descriptor instead.
func (*UserWalletAssetHistoryReq) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{3}
}

func (x *UserWalletAssetHistoryReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *UserWalletAssetHistoryReq) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *UserWalletAssetHistoryReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UserWalletAssetHistoryReq) GetIsDefi() bool {
	if x != nil {
		return x.IsDefi
	}
	return false
}

type UserWalletAssetHistoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总资产
	Amount *Currency `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// 今日收益 废弃字段
	Income *Currency `protobuf:"bytes,2,opt,name=income,proto3" json:"income,omitempty"`
	// 今日收益率 废弃字段
	Percentage string `protobuf:"bytes,3,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// 图表数据
	Histories []*UserWalletAssetHistoryResp_UserWalletAssetHistory `protobuf:"bytes,4,rep,name=histories,proto3" json:"histories,omitempty"`
	// 筛选范围内，第一天到最后一天的变化金额
	ChangeAmount *Currency `protobuf:"bytes,5,opt,name=changeAmount,proto3" json:"changeAmount,omitempty"`
	// 筛选范围内，第一天到最后一天的变化率
	ChangePercentage string `protobuf:"bytes,6,opt,name=changePercentage,proto3" json:"changePercentage,omitempty"`
}

func (x *UserWalletAssetHistoryResp) Reset() {
	*x = UserWalletAssetHistoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletAssetHistoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletAssetHistoryResp) ProtoMessage() {}

func (x *UserWalletAssetHistoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletAssetHistoryResp.ProtoReflect.Descriptor instead.
func (*UserWalletAssetHistoryResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{4}
}

func (x *UserWalletAssetHistoryResp) GetAmount() *Currency {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *UserWalletAssetHistoryResp) GetIncome() *Currency {
	if x != nil {
		return x.Income
	}
	return nil
}

func (x *UserWalletAssetHistoryResp) GetPercentage() string {
	if x != nil {
		return x.Percentage
	}
	return ""
}

func (x *UserWalletAssetHistoryResp) GetHistories() []*UserWalletAssetHistoryResp_UserWalletAssetHistory {
	if x != nil {
		return x.Histories
	}
	return nil
}

func (x *UserWalletAssetHistoryResp) GetChangeAmount() *Currency {
	if x != nil {
		return x.ChangeAmount
	}
	return nil
}

func (x *UserWalletAssetHistoryResp) GetChangePercentage() string {
	if x != nil {
		return x.ChangePercentage
	}
	return ""
}

type UserWalletIncomeHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包id
	Uids []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
	// 时间范围，7d,30d,90d,180d
	Range string `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	// 平台 web android ios
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// 是否为 DeFi 资产
	IsDefi bool `protobuf:"varint,4,opt,name=isDefi,proto3" json:"isDefi,omitempty"` // false: 非 DeFi 资产，true： DeFi 资产
}

func (x *UserWalletIncomeHistoryReq) Reset() {
	*x = UserWalletIncomeHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletIncomeHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletIncomeHistoryReq) ProtoMessage() {}

func (x *UserWalletIncomeHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletIncomeHistoryReq.ProtoReflect.Descriptor instead.
func (*UserWalletIncomeHistoryReq) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{5}
}

func (x *UserWalletIncomeHistoryReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *UserWalletIncomeHistoryReq) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *UserWalletIncomeHistoryReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UserWalletIncomeHistoryReq) GetIsDefi() bool {
	if x != nil {
		return x.IsDefi
	}
	return false
}

type UserWalletIncomeHistoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总收益
	Amount *Currency `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// 总收益百分比 废弃字段
	Percentage string `protobuf:"bytes,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// 图表数据
	Histories        []*UserWalletIncomeHistoryResp_UserWalletIncomeHistory `protobuf:"bytes,3,rep,name=histories,proto3" json:"histories,omitempty"`
	ChangeAmount     *Currency                                              `protobuf:"bytes,4,opt,name=changeAmount,proto3" json:"changeAmount,omitempty"`
	ChangePercentage string                                                 `protobuf:"bytes,5,opt,name=changePercentage,proto3" json:"changePercentage,omitempty"`
}

func (x *UserWalletIncomeHistoryResp) Reset() {
	*x = UserWalletIncomeHistoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletIncomeHistoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletIncomeHistoryResp) ProtoMessage() {}

func (x *UserWalletIncomeHistoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletIncomeHistoryResp.ProtoReflect.Descriptor instead.
func (*UserWalletIncomeHistoryResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{6}
}

func (x *UserWalletIncomeHistoryResp) GetAmount() *Currency {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *UserWalletIncomeHistoryResp) GetPercentage() string {
	if x != nil {
		return x.Percentage
	}
	return ""
}

func (x *UserWalletIncomeHistoryResp) GetHistories() []*UserWalletIncomeHistoryResp_UserWalletIncomeHistory {
	if x != nil {
		return x.Histories
	}
	return nil
}

func (x *UserWalletIncomeHistoryResp) GetChangeAmount() *Currency {
	if x != nil {
		return x.ChangeAmount
	}
	return nil
}

func (x *UserWalletIncomeHistoryResp) GetChangePercentage() string {
	if x != nil {
		return x.ChangePercentage
	}
	return ""
}

type UserWalletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包id
	Uids []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
}

func (x *UserWalletReq) Reset() {
	*x = UserWalletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletReq) ProtoMessage() {}

func (x *UserWalletReq) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletReq.ProtoReflect.Descriptor instead.
func (*UserWalletReq) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{7}
}

func (x *UserWalletReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

type UserWalletResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包id
	UserWalletList []*UserWalletResp_UserWallet `protobuf:"bytes,1,rep,name=userWalletList,proto3" json:"userWalletList,omitempty"`
}

func (x *UserWalletResp) Reset() {
	*x = UserWalletResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletResp) ProtoMessage() {}

func (x *UserWalletResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletResp.ProtoReflect.Descriptor instead.
func (*UserWalletResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{8}
}

func (x *UserWalletResp) GetUserWalletList() []*UserWalletResp_UserWallet {
	if x != nil {
		return x.UserWalletList
	}
	return nil
}

type UserChainReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包id
	Uids []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
}

func (x *UserChainReq) Reset() {
	*x = UserChainReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainReq) ProtoMessage() {}

func (x *UserChainReq) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainReq.ProtoReflect.Descriptor instead.
func (*UserChainReq) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{9}
}

func (x *UserChainReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

type UserChainResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户的链
	Chains []*UserChainResp_UserChain `protobuf:"bytes,1,rep,name=chains,proto3" json:"chains,omitempty"`
}

func (x *UserChainResp) Reset() {
	*x = UserChainResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainResp) ProtoMessage() {}

func (x *UserChainResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainResp.ProtoReflect.Descriptor instead.
func (*UserChainResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{10}
}

func (x *UserChainResp) GetChains() []*UserChainResp_UserChain {
	if x != nil {
		return x.Chains
	}
	return nil
}

type UserChainAmountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包 id
	Uids []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
	// chainName 列表
	ChainNames []string `protobuf:"bytes,2,rep,name=chainNames,proto3" json:"chainNames,omitempty"`
}

func (x *UserChainAmountReq) Reset() {
	*x = UserChainAmountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainAmountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainAmountReq) ProtoMessage() {}

func (x *UserChainAmountReq) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainAmountReq.ProtoReflect.Descriptor instead.
func (*UserChainAmountReq) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{11}
}

func (x *UserChainAmountReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *UserChainAmountReq) GetChainNames() []string {
	if x != nil {
		return x.ChainNames
	}
	return nil
}

type UserChainAmountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserChainAmountList []*UserChainAmountResp_UserChainAmount `protobuf:"bytes,1,rep,name=userChainAmountList,proto3" json:"userChainAmountList,omitempty"`
}

func (x *UserChainAmountResp) Reset() {
	*x = UserChainAmountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainAmountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainAmountResp) ProtoMessage() {}

func (x *UserChainAmountResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainAmountResp.ProtoReflect.Descriptor instead.
func (*UserChainAmountResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{12}
}

func (x *UserChainAmountResp) GetUserChainAmountList() []*UserChainAmountResp_UserChainAmount {
	if x != nil {
		return x.UserChainAmountList
	}
	return nil
}

type UserTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包id
	Uids []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
	// chain name
	ChainNames []string `protobuf:"bytes,2,rep,name=chainNames,proto3" json:"chainNames,omitempty"`
}

func (x *UserTokenReq) Reset() {
	*x = UserTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTokenReq) ProtoMessage() {}

func (x *UserTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTokenReq.ProtoReflect.Descriptor instead.
func (*UserTokenReq) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{13}
}

func (x *UserTokenReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *UserTokenReq) GetChainNames() []string {
	if x != nil {
		return x.ChainNames
	}
	return nil
}

type UserTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包id
	Tokens []*UserTokenResp_UserToken `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *UserTokenResp) Reset() {
	*x = UserTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTokenResp) ProtoMessage() {}

func (x *UserTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTokenResp.ProtoReflect.Descriptor instead.
func (*UserTokenResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{14}
}

func (x *UserTokenResp) GetTokens() []*UserTokenResp_UserToken {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type UserAssetListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 页码
	PageSize int64 `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// 每页数量
	PageNumber int64 `protobuf:"varint,2,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	// 钱包 id
	Uids []string `protobuf:"bytes,3,rep,name=uids,proto3" json:"uids,omitempty"`
	// 链名
	ChainNames []string `protobuf:"bytes,4,rep,name=chainNames,proto3" json:"chainNames,omitempty"`
	// token address，需要穿入chainname，例如：ETH_0XAB12
	TokenAddresses []string `protobuf:"bytes,5,rep,name=tokenAddresses,proto3" json:"tokenAddresses,omitempty"`
	// 排序，asc 或 desc
	Order string `protobuf:"bytes,6,opt,name=order,proto3" json:"order,omitempty"`
	// 钱包地址
	Addresses []string `protobuf:"bytes,7,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// 填充不存在的资产。如果未查到某 token 资产，则填充改资产的基本信息
	FillNotExitAsset bool `protobuf:"varint,8,opt,name=fillNotExitAsset,proto3" json:"fillNotExitAsset,omitempty"`
	// 是否展示测试链资产
	ShowTest bool `protobuf:"varint,9,opt,name=showTest,proto3" json:"showTest,omitempty"`
	// 是否展示价值为 0 的资产
	ShowZeroValue bool `protobuf:"varint,10,opt,name=showZeroValue,proto3" json:"showZeroValue,omitempty"`
}

func (x *UserAssetListReq) Reset() {
	*x = UserAssetListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAssetListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAssetListReq) ProtoMessage() {}

func (x *UserAssetListReq) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAssetListReq.ProtoReflect.Descriptor instead.
func (*UserAssetListReq) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{15}
}

func (x *UserAssetListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserAssetListReq) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *UserAssetListReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *UserAssetListReq) GetChainNames() []string {
	if x != nil {
		return x.ChainNames
	}
	return nil
}

func (x *UserAssetListReq) GetTokenAddresses() []string {
	if x != nil {
		return x.TokenAddresses
	}
	return nil
}

func (x *UserAssetListReq) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *UserAssetListReq) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *UserAssetListReq) GetFillNotExitAsset() bool {
	if x != nil {
		return x.FillNotExitAsset
	}
	return false
}

func (x *UserAssetListReq) GetShowTest() bool {
	if x != nil {
		return x.ShowTest
	}
	return false
}

func (x *UserAssetListReq) GetShowZeroValue() bool {
	if x != nil {
		return x.ShowZeroValue
	}
	return false
}

type UserAssetListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数据条数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 总资产
	TotalAmount *Currency `protobuf:"bytes,2,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
	// 资产列表
	UserAssetList []*UserAssetListResp_UserAsset `protobuf:"bytes,3,rep,name=userAssetList,proto3" json:"userAssetList,omitempty"`
}

func (x *UserAssetListResp) Reset() {
	*x = UserAssetListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAssetListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAssetListResp) ProtoMessage() {}

func (x *UserAssetListResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAssetListResp.ProtoReflect.Descriptor instead.
func (*UserAssetListResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{16}
}

func (x *UserAssetListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserAssetListResp) GetTotalAmount() *Currency {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

func (x *UserAssetListResp) GetUserAssetList() []*UserAssetListResp_UserAsset {
	if x != nil {
		return x.UserAssetList
	}
	return nil
}

type UserAssetDistributionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包id
	Uids []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
}

func (x *UserAssetDistributionReq) Reset() {
	*x = UserAssetDistributionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAssetDistributionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAssetDistributionReq) ProtoMessage() {}

func (x *UserAssetDistributionReq) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAssetDistributionReq.ProtoReflect.Descriptor instead.
func (*UserAssetDistributionReq) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{17}
}

func (x *UserAssetDistributionReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

type UserAssetDistributionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户资产列表
	UserAssetList []*UserAssetDistributionResp_UserAsset `protobuf:"bytes,1,rep,name=userAssetList,proto3" json:"userAssetList,omitempty"`
}

func (x *UserAssetDistributionResp) Reset() {
	*x = UserAssetDistributionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAssetDistributionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAssetDistributionResp) ProtoMessage() {}

func (x *UserAssetDistributionResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAssetDistributionResp.ProtoReflect.Descriptor instead.
func (*UserAssetDistributionResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{18}
}

func (x *UserAssetDistributionResp) GetUserAssetList() []*UserAssetDistributionResp_UserAsset {
	if x != nil {
		return x.UserAssetList
	}
	return nil
}

type UserChainAssetDistributionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 链名
	ChainName string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	// 钱包id
	Uids []string `protobuf:"bytes,2,rep,name=uids,proto3" json:"uids,omitempty"`
}

func (x *UserChainAssetDistributionReq) Reset() {
	*x = UserChainAssetDistributionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainAssetDistributionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainAssetDistributionReq) ProtoMessage() {}

func (x *UserChainAssetDistributionReq) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainAssetDistributionReq.ProtoReflect.Descriptor instead.
func (*UserChainAssetDistributionReq) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{19}
}

func (x *UserChainAssetDistributionReq) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *UserChainAssetDistributionReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

type UserChainAssetDistributionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户资产列表
	UserAssetList []*UserChainAssetDistributionResp_UserAsset `protobuf:"bytes,1,rep,name=userAssetList,proto3" json:"userAssetList,omitempty"`
}

func (x *UserChainAssetDistributionResp) Reset() {
	*x = UserChainAssetDistributionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainAssetDistributionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainAssetDistributionResp) ProtoMessage() {}

func (x *UserChainAssetDistributionResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainAssetDistributionResp.ProtoReflect.Descriptor instead.
func (*UserChainAssetDistributionResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{20}
}

func (x *UserChainAssetDistributionResp) GetUserAssetList() []*UserChainAssetDistributionResp_UserAsset {
	if x != nil {
		return x.UserAssetList
	}
	return nil
}

type UserChainDistributionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包id
	Uids []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
}

func (x *UserChainDistributionReq) Reset() {
	*x = UserChainDistributionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainDistributionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainDistributionReq) ProtoMessage() {}

func (x *UserChainDistributionReq) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainDistributionReq.ProtoReflect.Descriptor instead.
func (*UserChainDistributionReq) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{21}
}

func (x *UserChainDistributionReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

type UserChainDistributionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 链列表
	UserChainList []*UserChainDistributionResp_UserChain `protobuf:"bytes,1,rep,name=userChainList,proto3" json:"userChainList,omitempty"`
}

func (x *UserChainDistributionResp) Reset() {
	*x = UserChainDistributionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainDistributionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainDistributionResp) ProtoMessage() {}

func (x *UserChainDistributionResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainDistributionResp.ProtoReflect.Descriptor instead.
func (*UserChainDistributionResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{22}
}

func (x *UserChainDistributionResp) GetUserChainList() []*UserChainDistributionResp_UserChain {
	if x != nil {
		return x.UserChainList
	}
	return nil
}

type UserWalletDistributionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包id
	Uids []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
}

func (x *UserWalletDistributionReq) Reset() {
	*x = UserWalletDistributionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletDistributionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletDistributionReq) ProtoMessage() {}

func (x *UserWalletDistributionReq) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletDistributionReq.ProtoReflect.Descriptor instead.
func (*UserWalletDistributionReq) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{23}
}

func (x *UserWalletDistributionReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

type UserWalletDistributionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包列表
	UserWalletList []*UserWalletDistributionResp_UserWallet `protobuf:"bytes,1,rep,name=userWalletList,proto3" json:"userWalletList,omitempty"`
}

func (x *UserWalletDistributionResp) Reset() {
	*x = UserWalletDistributionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletDistributionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletDistributionResp) ProtoMessage() {}

func (x *UserWalletDistributionResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletDistributionResp.ProtoReflect.Descriptor instead.
func (*UserWalletDistributionResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{24}
}

func (x *UserWalletDistributionResp) GetUserWalletList() []*UserWalletDistributionResp_UserWallet {
	if x != nil {
		return x.UserWalletList
	}
	return nil
}

type UserChainAssetFilterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包id
	Uids []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
}

func (x *UserChainAssetFilterReq) Reset() {
	*x = UserChainAssetFilterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainAssetFilterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainAssetFilterReq) ProtoMessage() {}

func (x *UserChainAssetFilterReq) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainAssetFilterReq.ProtoReflect.Descriptor instead.
func (*UserChainAssetFilterReq) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{25}
}

func (x *UserChainAssetFilterReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

type UserChainAssetFilterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户的链列表
	UserChainList []*UserChainAssetFilterResp_UserChain `protobuf:"bytes,1,rep,name=userChainList,proto3" json:"userChainList,omitempty"`
}

func (x *UserChainAssetFilterResp) Reset() {
	*x = UserChainAssetFilterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainAssetFilterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainAssetFilterResp) ProtoMessage() {}

func (x *UserChainAssetFilterResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainAssetFilterResp.ProtoReflect.Descriptor instead.
func (*UserChainAssetFilterResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{26}
}

func (x *UserChainAssetFilterResp) GetUserChainList() []*UserChainAssetFilterResp_UserChain {
	if x != nil {
		return x.UserChainList
	}
	return nil
}

type UserWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
}

func (x *UserWalletRequest) Reset() {
	*x = UserWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletRequest) ProtoMessage() {}

func (x *UserWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletRequest.ProtoReflect.Descriptor instead.
func (*UserWalletRequest) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{27}
}

func (x *UserWalletRequest) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

type UserWalletDeFiPlatformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
	Type string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // staked,debt,lp,deposit
}

func (x *UserWalletDeFiPlatformRequest) Reset() {
	*x = UserWalletDeFiPlatformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletDeFiPlatformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletDeFiPlatformRequest) ProtoMessage() {}

func (x *UserWalletDeFiPlatformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletDeFiPlatformRequest.ProtoReflect.Descriptor instead.
func (*UserWalletDeFiPlatformRequest) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{28}
}

func (x *UserWalletDeFiPlatformRequest) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *UserWalletDeFiPlatformRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type UserWalletDeFiPlatformResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DeFiPlatform `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *UserWalletDeFiPlatformResp) Reset() {
	*x = UserWalletDeFiPlatformResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletDeFiPlatformResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletDeFiPlatformResp) ProtoMessage() {}

func (x *UserWalletDeFiPlatformResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletDeFiPlatformResp.ProtoReflect.Descriptor instead.
func (*UserWalletDeFiPlatformResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{29}
}

func (x *UserWalletDeFiPlatformResp) GetList() []*DeFiPlatform {
	if x != nil {
		return x.List
	}
	return nil
}

type DeFiPlatform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Origin   string `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	Icon     string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	DappName string `protobuf:"bytes,4,opt,name=dappName,proto3" json:"dappName,omitempty"`
	Type     string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"` // staked,debt,lp,deposit
}

func (x *DeFiPlatform) Reset() {
	*x = DeFiPlatform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeFiPlatform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeFiPlatform) ProtoMessage() {}

func (x *DeFiPlatform) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeFiPlatform.ProtoReflect.Descriptor instead.
func (*DeFiPlatform) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{30}
}

func (x *DeFiPlatform) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeFiPlatform) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *DeFiPlatform) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *DeFiPlatform) GetDappName() string {
	if x != nil {
		return x.DappName
	}
	return ""
}

func (x *DeFiPlatform) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type UserWalletDeFiAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids        []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
	PlatformIds []string `protobuf:"bytes,2,rep,name=platformIds,proto3" json:"platformIds,omitempty"` // empty for all
	ChainNames  []string `protobuf:"bytes,3,rep,name=chainNames,proto3" json:"chainNames,omitempty"`
	Type        string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"` // staked,debt,lp,deposit
	PageNum     int32    `protobuf:"varint,5,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize    int32    `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderBy     string   `protobuf:"bytes,7,opt,name=orderBy,proto3" json:"orderBy,omitempty"` // Current value: "value", Profit: "profit"
	Order       string   `protobuf:"bytes,8,opt,name=order,proto3" json:"order,omitempty"`     // "asc" or "desc"
}

func (x *UserWalletDeFiAssetRequest) Reset() {
	*x = UserWalletDeFiAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletDeFiAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletDeFiAssetRequest) ProtoMessage() {}

func (x *UserWalletDeFiAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletDeFiAssetRequest.ProtoReflect.Descriptor instead.
func (*UserWalletDeFiAssetRequest) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{31}
}

func (x *UserWalletDeFiAssetRequest) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *UserWalletDeFiAssetRequest) GetPlatformIds() []string {
	if x != nil {
		return x.PlatformIds
	}
	return nil
}

func (x *UserWalletDeFiAssetRequest) GetChainNames() []string {
	if x != nil {
		return x.ChainNames
	}
	return nil
}

func (x *UserWalletDeFiAssetRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UserWalletDeFiAssetRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *UserWalletDeFiAssetRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserWalletDeFiAssetRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *UserWalletDeFiAssetRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type UserWalletDeFiAssetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                                          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*UserWalletDeFiAssetResp_UserWalletDeFiAsset `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	// 总资产
	TotalAmount *Currency `protobuf:"bytes,3,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
}

func (x *UserWalletDeFiAssetResp) Reset() {
	*x = UserWalletDeFiAssetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletDeFiAssetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletDeFiAssetResp) ProtoMessage() {}

func (x *UserWalletDeFiAssetResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletDeFiAssetResp.ProtoReflect.Descriptor instead.
func (*UserWalletDeFiAssetResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{32}
}

func (x *UserWalletDeFiAssetResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserWalletDeFiAssetResp) GetList() []*UserWalletDeFiAssetResp_UserWalletDeFiAsset {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *UserWalletDeFiAssetResp) GetTotalAmount() *Currency {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

type UserWalletAssetToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 代币地址
	TokenAddress string `protobuf:"bytes,1,opt,name=tokenAddress,proto3" json:"tokenAddress,omitempty"`
	// 代币symbol
	TokenSymbol string `protobuf:"bytes,3,opt,name=tokenSymbol,proto3" json:"tokenSymbol,omitempty"`
	// 代币 logo
	TokenLogo string `protobuf:"bytes,4,opt,name=tokenLogo,proto3" json:"tokenLogo,omitempty"`
}

func (x *UserWalletAssetToken) Reset() {
	*x = UserWalletAssetToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletAssetToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletAssetToken) ProtoMessage() {}

func (x *UserWalletAssetToken) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletAssetToken.ProtoReflect.Descriptor instead.
func (*UserWalletAssetToken) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{33}
}

func (x *UserWalletAssetToken) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *UserWalletAssetToken) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *UserWalletAssetToken) GetTokenLogo() string {
	if x != nil {
		return x.TokenLogo
	}
	return ""
}

type UserWalletDeFiDistributionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*UserWalletDeFiDistributionResp_UserWalletDeFiDistribution `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *UserWalletDeFiDistributionResp) Reset() {
	*x = UserWalletDeFiDistributionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletDeFiDistributionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletDeFiDistributionResp) ProtoMessage() {}

func (x *UserWalletDeFiDistributionResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletDeFiDistributionResp.ProtoReflect.Descriptor instead.
func (*UserWalletDeFiDistributionResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{34}
}

func (x *UserWalletDeFiDistributionResp) GetList() []*UserWalletDeFiDistributionResp_UserWalletDeFiDistribution {
	if x != nil {
		return x.List
	}
	return nil
}

type UserWalletAssetTypeDistributionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*UserWalletAssetTypeDistributionResp_UserWalletAssetTypeDistribution `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *UserWalletAssetTypeDistributionResp) Reset() {
	*x = UserWalletAssetTypeDistributionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletAssetTypeDistributionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletAssetTypeDistributionResp) ProtoMessage() {}

func (x *UserWalletAssetTypeDistributionResp) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletAssetTypeDistributionResp.ProtoReflect.Descriptor instead.
func (*UserWalletAssetTypeDistributionResp) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{35}
}

func (x *UserWalletAssetTypeDistributionResp) GetList() []*UserWalletAssetTypeDistributionResp_UserWalletAssetTypeDistribution {
	if x != nil {
		return x.List
	}
	return nil
}

type UserWalletAssetTotalResp_UserWalletAssetTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总资产
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// 收益
	Income string `protobuf:"bytes,2,opt,name=income,proto3" json:"income,omitempty"`
}

func (x *UserWalletAssetTotalResp_UserWalletAssetTotal) Reset() {
	*x = UserWalletAssetTotalResp_UserWalletAssetTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletAssetTotalResp_UserWalletAssetTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletAssetTotalResp_UserWalletAssetTotal) ProtoMessage() {}

func (x *UserWalletAssetTotalResp_UserWalletAssetTotal) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletAssetTotalResp_UserWalletAssetTotal.ProtoReflect.Descriptor instead.
func (*UserWalletAssetTotalResp_UserWalletAssetTotal) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{2, 0}
}

func (x *UserWalletAssetTotalResp_UserWalletAssetTotal) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UserWalletAssetTotalResp_UserWalletAssetTotal) GetIncome() string {
	if x != nil {
		return x.Income
	}
	return ""
}

type UserWalletAssetHistoryResp_UserWalletAssetHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 时间
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// 人民币金额
	CnyAmount string `protobuf:"bytes,2,opt,name=cnyAmount,proto3" json:"cnyAmount,omitempty"`
	// 美元金额
	UsdAmount string `protobuf:"bytes,3,opt,name=usdAmount,proto3" json:"usdAmount,omitempty"`
	// USDT金额
	UsdtAmount string `protobuf:"bytes,4,opt,name=usdtAmount,proto3" json:"usdtAmount,omitempty"`
	// BTC金额
	BtcAmount string `protobuf:"bytes,5,opt,name=btcAmount,proto3" json:"btcAmount,omitempty"`
	// 筛选范围内，从第一天到现在的变化金额
	ChangeAmount *Currency `protobuf:"bytes,6,opt,name=changeAmount,proto3" json:"changeAmount,omitempty"`
	// 筛选范围内，从第一天到现在的变化率
	ChangePercentage string `protobuf:"bytes,7,opt,name=changePercentage,proto3" json:"changePercentage,omitempty"`
}

func (x *UserWalletAssetHistoryResp_UserWalletAssetHistory) Reset() {
	*x = UserWalletAssetHistoryResp_UserWalletAssetHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletAssetHistoryResp_UserWalletAssetHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletAssetHistoryResp_UserWalletAssetHistory) ProtoMessage() {}

func (x *UserWalletAssetHistoryResp_UserWalletAssetHistory) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletAssetHistoryResp_UserWalletAssetHistory.ProtoReflect.Descriptor instead.
func (*UserWalletAssetHistoryResp_UserWalletAssetHistory) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{4, 0}
}

func (x *UserWalletAssetHistoryResp_UserWalletAssetHistory) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UserWalletAssetHistoryResp_UserWalletAssetHistory) GetCnyAmount() string {
	if x != nil {
		return x.CnyAmount
	}
	return ""
}

func (x *UserWalletAssetHistoryResp_UserWalletAssetHistory) GetUsdAmount() string {
	if x != nil {
		return x.UsdAmount
	}
	return ""
}

func (x *UserWalletAssetHistoryResp_UserWalletAssetHistory) GetUsdtAmount() string {
	if x != nil {
		return x.UsdtAmount
	}
	return ""
}

func (x *UserWalletAssetHistoryResp_UserWalletAssetHistory) GetBtcAmount() string {
	if x != nil {
		return x.BtcAmount
	}
	return ""
}

func (x *UserWalletAssetHistoryResp_UserWalletAssetHistory) GetChangeAmount() *Currency {
	if x != nil {
		return x.ChangeAmount
	}
	return nil
}

func (x *UserWalletAssetHistoryResp_UserWalletAssetHistory) GetChangePercentage() string {
	if x != nil {
		return x.ChangePercentage
	}
	return ""
}

type UserWalletIncomeHistoryResp_UserWalletIncomeHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 时间
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// 资产
	CnyAmount  string `protobuf:"bytes,2,opt,name=cnyAmount,proto3" json:"cnyAmount,omitempty"`
	UsdAmount  string `protobuf:"bytes,3,opt,name=usdAmount,proto3" json:"usdAmount,omitempty"`
	UsdtAmount string `protobuf:"bytes,4,opt,name=usdtAmount,proto3" json:"usdtAmount,omitempty"`
	BtcAmount  string `protobuf:"bytes,5,opt,name=btcAmount,proto3" json:"btcAmount,omitempty"`
}

func (x *UserWalletIncomeHistoryResp_UserWalletIncomeHistory) Reset() {
	*x = UserWalletIncomeHistoryResp_UserWalletIncomeHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletIncomeHistoryResp_UserWalletIncomeHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletIncomeHistoryResp_UserWalletIncomeHistory) ProtoMessage() {}

func (x *UserWalletIncomeHistoryResp_UserWalletIncomeHistory) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletIncomeHistoryResp_UserWalletIncomeHistory.ProtoReflect.Descriptor instead.
func (*UserWalletIncomeHistoryResp_UserWalletIncomeHistory) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{6, 0}
}

func (x *UserWalletIncomeHistoryResp_UserWalletIncomeHistory) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UserWalletIncomeHistoryResp_UserWalletIncomeHistory) GetCnyAmount() string {
	if x != nil {
		return x.CnyAmount
	}
	return ""
}

func (x *UserWalletIncomeHistoryResp_UserWalletIncomeHistory) GetUsdAmount() string {
	if x != nil {
		return x.UsdAmount
	}
	return ""
}

func (x *UserWalletIncomeHistoryResp_UserWalletIncomeHistory) GetUsdtAmount() string {
	if x != nil {
		return x.UsdtAmount
	}
	return ""
}

func (x *UserWalletIncomeHistoryResp_UserWalletIncomeHistory) GetBtcAmount() string {
	if x != nil {
		return x.BtcAmount
	}
	return ""
}

type UserWalletResp_UserWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string    `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Amount *Currency `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *UserWalletResp_UserWallet) Reset() {
	*x = UserWalletResp_UserWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletResp_UserWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletResp_UserWallet) ProtoMessage() {}

func (x *UserWalletResp_UserWallet) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletResp_UserWallet.ProtoReflect.Descriptor instead.
func (*UserWalletResp_UserWallet) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{8, 0}
}

func (x *UserWalletResp_UserWallet) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserWalletResp_UserWallet) GetAmount() *Currency {
	if x != nil {
		return x.Amount
	}
	return nil
}

type UserChainResp_UserChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 链名称
	ChainName string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	// 链Logo
	ChainLogo string `protobuf:"bytes,2,opt,name=chainLogo,proto3" json:"chainLogo,omitempty"`
}

func (x *UserChainResp_UserChain) Reset() {
	*x = UserChainResp_UserChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainResp_UserChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainResp_UserChain) ProtoMessage() {}

func (x *UserChainResp_UserChain) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainResp_UserChain.ProtoReflect.Descriptor instead.
func (*UserChainResp_UserChain) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{10, 0}
}

func (x *UserChainResp_UserChain) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *UserChainResp_UserChain) GetChainLogo() string {
	if x != nil {
		return x.ChainLogo
	}
	return ""
}

type UserChainAmountResp_UserChainAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName string    `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	ChainLogo string    `protobuf:"bytes,2,opt,name=chainLogo,proto3" json:"chainLogo,omitempty"`
	Amount    *Currency `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *UserChainAmountResp_UserChainAmount) Reset() {
	*x = UserChainAmountResp_UserChainAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainAmountResp_UserChainAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainAmountResp_UserChainAmount) ProtoMessage() {}

func (x *UserChainAmountResp_UserChainAmount) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainAmountResp_UserChainAmount.ProtoReflect.Descriptor instead.
func (*UserChainAmountResp_UserChainAmount) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{12, 0}
}

func (x *UserChainAmountResp_UserChainAmount) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *UserChainAmountResp_UserChainAmount) GetChainLogo() string {
	if x != nil {
		return x.ChainLogo
	}
	return ""
}

func (x *UserChainAmountResp_UserChainAmount) GetAmount() *Currency {
	if x != nil {
		return x.Amount
	}
	return nil
}

type UserTokenResp_UserToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 链名称
	ChainName string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	// 链 logo
	ChainLogo string `protobuf:"bytes,2,opt,name=chainLogo,proto3" json:"chainLogo,omitempty"`
	// 代币地址
	TokenAddress string `protobuf:"bytes,3,opt,name=tokenAddress,proto3" json:"tokenAddress,omitempty"`
	// 代币名称
	TokenSymbol string `protobuf:"bytes,4,opt,name=tokenSymbol,proto3" json:"tokenSymbol,omitempty"`
	// 代币 logo
	TokenLogo string `protobuf:"bytes,5,opt,name=tokenLogo,proto3" json:"tokenLogo,omitempty"`
}

func (x *UserTokenResp_UserToken) Reset() {
	*x = UserTokenResp_UserToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTokenResp_UserToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTokenResp_UserToken) ProtoMessage() {}

func (x *UserTokenResp_UserToken) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTokenResp_UserToken.ProtoReflect.Descriptor instead.
func (*UserTokenResp_UserToken) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{14, 0}
}

func (x *UserTokenResp_UserToken) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *UserTokenResp_UserToken) GetChainLogo() string {
	if x != nil {
		return x.ChainLogo
	}
	return ""
}

func (x *UserTokenResp_UserToken) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *UserTokenResp_UserToken) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *UserTokenResp_UserToken) GetTokenLogo() string {
	if x != nil {
		return x.TokenLogo
	}
	return ""
}

type UserAssetListResp_UserAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 代币地址
	TokenAddress string `protobuf:"bytes,1,opt,name=tokenAddress,proto3" json:"tokenAddress,omitempty"`
	// 代币symbol
	TokenSymbol string `protobuf:"bytes,3,opt,name=tokenSymbol,proto3" json:"tokenSymbol,omitempty"`
	// 代币 logo
	TokenLogo string `protobuf:"bytes,4,opt,name=tokenLogo,proto3" json:"tokenLogo,omitempty"`
	// 链名
	ChainName string `protobuf:"bytes,5,opt,name=chainName,proto3" json:"chainName,omitempty"`
	// 钱包 id
	Uid string `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
	// 数量
	Amount string `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	// 价值
	CurrencyAmount *Currency `protobuf:"bytes,8,opt,name=currencyAmount,proto3" json:"currencyAmount,omitempty"`
	// 价格
	Price *Currency `protobuf:"bytes,9,opt,name=price,proto3" json:"price,omitempty"`
	// 价格 24 小时变化
	PriceDelta24H string `protobuf:"bytes,13,opt,name=priceDelta24h,proto3" json:"priceDelta24h,omitempty"`
	// 成本价
	CostPrice *Currency `protobuf:"bytes,10,opt,name=costPrice,proto3" json:"costPrice,omitempty"`
	// 收益
	Income *Currency `protobuf:"bytes,11,opt,name=income,proto3" json:"income,omitempty"`
	// 收益百分比
	IncomePercentage string `protobuf:"bytes,12,opt,name=incomePercentage,proto3" json:"incomePercentage,omitempty"`
}

func (x *UserAssetListResp_UserAsset) Reset() {
	*x = UserAssetListResp_UserAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAssetListResp_UserAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAssetListResp_UserAsset) ProtoMessage() {}

func (x *UserAssetListResp_UserAsset) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAssetListResp_UserAsset.ProtoReflect.Descriptor instead.
func (*UserAssetListResp_UserAsset) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{16, 0}
}

func (x *UserAssetListResp_UserAsset) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *UserAssetListResp_UserAsset) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *UserAssetListResp_UserAsset) GetTokenLogo() string {
	if x != nil {
		return x.TokenLogo
	}
	return ""
}

func (x *UserAssetListResp_UserAsset) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *UserAssetListResp_UserAsset) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserAssetListResp_UserAsset) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UserAssetListResp_UserAsset) GetCurrencyAmount() *Currency {
	if x != nil {
		return x.CurrencyAmount
	}
	return nil
}

func (x *UserAssetListResp_UserAsset) GetPrice() *Currency {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *UserAssetListResp_UserAsset) GetPriceDelta24H() string {
	if x != nil {
		return x.PriceDelta24H
	}
	return ""
}

func (x *UserAssetListResp_UserAsset) GetCostPrice() *Currency {
	if x != nil {
		return x.CostPrice
	}
	return nil
}

func (x *UserAssetListResp_UserAsset) GetIncome() *Currency {
	if x != nil {
		return x.Income
	}
	return nil
}

func (x *UserAssetListResp_UserAsset) GetIncomePercentage() string {
	if x != nil {
		return x.IncomePercentage
	}
	return ""
}

type UserAssetDistributionResp_UserAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 代币名称
	TokenSymbol string `protobuf:"bytes,1,opt,name=tokenSymbol,proto3" json:"tokenSymbol,omitempty"`
	// 数量
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// 换算价值
	CurrencyAmount *Currency `protobuf:"bytes,3,opt,name=currencyAmount,proto3" json:"currencyAmount,omitempty"`
	// 百分比
	Percentage string `protobuf:"bytes,4,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *UserAssetDistributionResp_UserAsset) Reset() {
	*x = UserAssetDistributionResp_UserAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAssetDistributionResp_UserAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAssetDistributionResp_UserAsset) ProtoMessage() {}

func (x *UserAssetDistributionResp_UserAsset) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAssetDistributionResp_UserAsset.ProtoReflect.Descriptor instead.
func (*UserAssetDistributionResp_UserAsset) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{18, 0}
}

func (x *UserAssetDistributionResp_UserAsset) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *UserAssetDistributionResp_UserAsset) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UserAssetDistributionResp_UserAsset) GetCurrencyAmount() *Currency {
	if x != nil {
		return x.CurrencyAmount
	}
	return nil
}

func (x *UserAssetDistributionResp_UserAsset) GetPercentage() string {
	if x != nil {
		return x.Percentage
	}
	return ""
}

type UserChainAssetDistributionResp_UserAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 代币名称
	TokenSymbol string `protobuf:"bytes,1,opt,name=tokenSymbol,proto3" json:"tokenSymbol,omitempty"`
	// 数量
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// 换算价值
	CurrencyAmount *Currency `protobuf:"bytes,3,opt,name=currencyAmount,proto3" json:"currencyAmount,omitempty"`
	// 百分比
	Percentage string `protobuf:"bytes,4,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *UserChainAssetDistributionResp_UserAsset) Reset() {
	*x = UserChainAssetDistributionResp_UserAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainAssetDistributionResp_UserAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainAssetDistributionResp_UserAsset) ProtoMessage() {}

func (x *UserChainAssetDistributionResp_UserAsset) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainAssetDistributionResp_UserAsset.ProtoReflect.Descriptor instead.
func (*UserChainAssetDistributionResp_UserAsset) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{20, 0}
}

func (x *UserChainAssetDistributionResp_UserAsset) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *UserChainAssetDistributionResp_UserAsset) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UserChainAssetDistributionResp_UserAsset) GetCurrencyAmount() *Currency {
	if x != nil {
		return x.CurrencyAmount
	}
	return nil
}

func (x *UserChainAssetDistributionResp_UserAsset) GetPercentage() string {
	if x != nil {
		return x.Percentage
	}
	return ""
}

type UserChainDistributionResp_UserChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 链名
	ChainName string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	// 换算金额
	CurrencyAmount *Currency `protobuf:"bytes,2,opt,name=currencyAmount,proto3" json:"currencyAmount,omitempty"`
	// 百分比
	Percentage string `protobuf:"bytes,3,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *UserChainDistributionResp_UserChain) Reset() {
	*x = UserChainDistributionResp_UserChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainDistributionResp_UserChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainDistributionResp_UserChain) ProtoMessage() {}

func (x *UserChainDistributionResp_UserChain) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainDistributionResp_UserChain.ProtoReflect.Descriptor instead.
func (*UserChainDistributionResp_UserChain) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{22, 0}
}

func (x *UserChainDistributionResp_UserChain) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *UserChainDistributionResp_UserChain) GetCurrencyAmount() *Currency {
	if x != nil {
		return x.CurrencyAmount
	}
	return nil
}

func (x *UserChainDistributionResp_UserChain) GetPercentage() string {
	if x != nil {
		return x.Percentage
	}
	return ""
}

type UserWalletDistributionResp_UserWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包id
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 换算价值
	CurrencyAmount *Currency `protobuf:"bytes,2,opt,name=currencyAmount,proto3" json:"currencyAmount,omitempty"`
	// 百分比
	Percentage string `protobuf:"bytes,3,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *UserWalletDistributionResp_UserWallet) Reset() {
	*x = UserWalletDistributionResp_UserWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletDistributionResp_UserWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletDistributionResp_UserWallet) ProtoMessage() {}

func (x *UserWalletDistributionResp_UserWallet) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletDistributionResp_UserWallet.ProtoReflect.Descriptor instead.
func (*UserWalletDistributionResp_UserWallet) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{24, 0}
}

func (x *UserWalletDistributionResp_UserWallet) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserWalletDistributionResp_UserWallet) GetCurrencyAmount() *Currency {
	if x != nil {
		return x.CurrencyAmount
	}
	return nil
}

func (x *UserWalletDistributionResp_UserWallet) GetPercentage() string {
	if x != nil {
		return x.Percentage
	}
	return ""
}

type UserChainAssetFilterResp_UserChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 链名称
	ChainName string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	// 用户链资产列表
	UserChainAssetList []*UserChainAssetFilterResp_UserChainAsset `protobuf:"bytes,2,rep,name=userChainAssetList,proto3" json:"userChainAssetList,omitempty"`
}

func (x *UserChainAssetFilterResp_UserChain) Reset() {
	*x = UserChainAssetFilterResp_UserChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainAssetFilterResp_UserChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainAssetFilterResp_UserChain) ProtoMessage() {}

func (x *UserChainAssetFilterResp_UserChain) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainAssetFilterResp_UserChain.ProtoReflect.Descriptor instead.
func (*UserChainAssetFilterResp_UserChain) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{26, 0}
}

func (x *UserChainAssetFilterResp_UserChain) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *UserChainAssetFilterResp_UserChain) GetUserChainAssetList() []*UserChainAssetFilterResp_UserChainAsset {
	if x != nil {
		return x.UserChainAssetList
	}
	return nil
}

type UserChainAssetFilterResp_UserChainAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 钱包 id
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 地址
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UserChainAssetFilterResp_UserChainAsset) Reset() {
	*x = UserChainAssetFilterResp_UserChainAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainAssetFilterResp_UserChainAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainAssetFilterResp_UserChainAsset) ProtoMessage() {}

func (x *UserChainAssetFilterResp_UserChainAsset) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainAssetFilterResp_UserChainAsset.ProtoReflect.Descriptor instead.
func (*UserChainAssetFilterResp_UserChainAsset) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{26, 1}
}

func (x *UserChainAssetFilterResp_UserChainAsset) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserChainAssetFilterResp_UserChainAsset) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type UserWalletDeFiAssetResp_UserWalletDeFiAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Staked
	//	*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Debt
	//	*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Lp
	//	*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Deposit
	Value isUserWalletDeFiAssetResp_UserWalletDeFiAsset_Value `protobuf_oneof:"value"`
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset) Reset() {
	*x = UserWalletDeFiAssetResp_UserWalletDeFiAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletDeFiAssetResp_UserWalletDeFiAsset) ProtoMessage() {}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletDeFiAssetResp_UserWalletDeFiAsset.ProtoReflect.Descriptor instead.
func (*UserWalletDeFiAssetResp_UserWalletDeFiAsset) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{32, 0}
}

func (m *UserWalletDeFiAssetResp_UserWalletDeFiAsset) GetValue() isUserWalletDeFiAssetResp_UserWalletDeFiAsset_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset) GetStaked() *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked {
	if x, ok := x.GetValue().(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Staked); ok {
		return x.Staked
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset) GetDebt() *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt {
	if x, ok := x.GetValue().(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Debt); ok {
		return x.Debt
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset) GetLp() *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP {
	if x, ok := x.GetValue().(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Lp); ok {
		return x.Lp
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset) GetDeposit() *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit {
	if x, ok := x.GetValue().(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Deposit); ok {
		return x.Deposit
	}
	return nil
}

type isUserWalletDeFiAssetResp_UserWalletDeFiAsset_Value interface {
	isUserWalletDeFiAssetResp_UserWalletDeFiAsset_Value()
}

type UserWalletDeFiAssetResp_UserWalletDeFiAsset_Staked struct {
	Staked *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked `protobuf:"bytes,1,opt,name=staked,proto3,oneof"`
}

type UserWalletDeFiAssetResp_UserWalletDeFiAsset_Debt struct {
	Debt *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt `protobuf:"bytes,2,opt,name=debt,proto3,oneof"`
}

type UserWalletDeFiAssetResp_UserWalletDeFiAsset_Lp struct {
	Lp *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP `protobuf:"bytes,3,opt,name=lp,proto3,oneof"`
}

type UserWalletDeFiAssetResp_UserWalletDeFiAsset_Deposit struct {
	Deposit *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit `protobuf:"bytes,4,opt,name=deposit,proto3,oneof"`
}

func (*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Staked) isUserWalletDeFiAssetResp_UserWalletDeFiAsset_Value() {
}

func (*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Debt) isUserWalletDeFiAssetResp_UserWalletDeFiAsset_Value() {
}

func (*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Lp) isUserWalletDeFiAssetResp_UserWalletDeFiAsset_Value() {
}

func (*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Deposit) isUserWalletDeFiAssetResp_UserWalletDeFiAsset_Value() {
}

type UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 资产名称
	Token *UserWalletAssetToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// 抵押数量
	StakedAmount string `protobuf:"bytes,2,opt,name=stakedAmount,proto3" json:"stakedAmount,omitempty"`
	// 抵押平台
	Platform *DeFiPlatform `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// 抵押时间
	StakedAt int32 `protobuf:"varint,4,opt,name=stakedAt,proto3" json:"stakedAt,omitempty"`
	// 预计收益
	Profit *Currency `protobuf:"bytes,5,opt,name=profit,proto3" json:"profit,omitempty"`
	// 当前价值
	Value *Currency `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	// 钱包 ID
	Uid        string `protobuf:"bytes,7,opt,name=uid,proto3" json:"uid,omitempty"`
	ProfitRate string `protobuf:"bytes,8,opt,name=profitRate,proto3" json:"profitRate,omitempty"`
	ChainName  string `protobuf:"bytes,9,opt,name=chainName,proto3" json:"chainName,omitempty"`
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked) Reset() {
	*x = UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked) ProtoMessage() {}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked.ProtoReflect.Descriptor instead.
func (*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{32, 0, 0}
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked) GetToken() *UserWalletAssetToken {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked) GetStakedAmount() string {
	if x != nil {
		return x.StakedAmount
	}
	return ""
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked) GetPlatform() *DeFiPlatform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked) GetStakedAt() int32 {
	if x != nil {
		return x.StakedAt
	}
	return 0
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked) GetProfit() *Currency {
	if x != nil {
		return x.Profit
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked) GetValue() *Currency {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked) GetProfitRate() string {
	if x != nil {
		return x.ProfitRate
	}
	return ""
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

type UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 借入资产
	Token *UserWalletAssetToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// 借入数量
	BorrowAmount string `protobuf:"bytes,2,opt,name=borrowAmount,proto3" json:"borrowAmount,omitempty"`
	// 借入平台
	Platform *DeFiPlatform `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// 借入时间
	BorrowedAt int32 `protobuf:"varint,4,opt,name=borrowedAt,proto3" json:"borrowedAt,omitempty"`
	// 需还款额度
	RepayAmount string `protobuf:"bytes,5,opt,name=repayAmount,proto3" json:"repayAmount,omitempty"`
	// 当前价值
	Value *Currency `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	// 钱包 ID
	Uid       string `protobuf:"bytes,7,opt,name=uid,proto3" json:"uid,omitempty"`
	ChainName string `protobuf:"bytes,8,opt,name=chainName,proto3" json:"chainName,omitempty"`
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt) Reset() {
	*x = UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt) ProtoMessage() {}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt.ProtoReflect.Descriptor instead.
func (*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{32, 0, 1}
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt) GetToken() *UserWalletAssetToken {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt) GetBorrowAmount() string {
	if x != nil {
		return x.BorrowAmount
	}
	return ""
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt) GetPlatform() *DeFiPlatform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt) GetBorrowedAt() int32 {
	if x != nil {
		return x.BorrowedAt
	}
	return 0
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt) GetRepayAmount() string {
	if x != nil {
		return x.RepayAmount
	}
	return ""
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt) GetValue() *Currency {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

type UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 流动性代币 a
	TokenA *UserWalletAssetToken `protobuf:"bytes,1,opt,name=tokenA,proto3" json:"tokenA,omitempty"`
	// 流动性代币 b
	TokenB *UserWalletAssetToken `protobuf:"bytes,2,opt,name=tokenB,proto3" json:"tokenB,omitempty"`
	// 流动性池
	LpToken *UserWalletAssetToken `protobuf:"bytes,3,opt,name=lpToken,proto3" json:"lpToken,omitempty"`
	// 平台
	Platform *DeFiPlatform `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
	// 添加时间
	CreatedAt int32 `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// 收益
	Profit *Currency `protobuf:"bytes,6,opt,name=profit,proto3" json:"profit,omitempty"`
	// 当前价值
	Value *Currency `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	// 钱包 ID
	Uid        string `protobuf:"bytes,8,opt,name=uid,proto3" json:"uid,omitempty"`
	AmountA    string `protobuf:"bytes,9,opt,name=amountA,proto3" json:"amountA,omitempty"`
	AmountB    string `protobuf:"bytes,10,opt,name=amountB,proto3" json:"amountB,omitempty"`
	ProfitRate string `protobuf:"bytes,11,opt,name=profitRate,proto3" json:"profitRate,omitempty"`
	ChainName  string `protobuf:"bytes,12,opt,name=chainName,proto3" json:"chainName,omitempty"`
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) Reset() {
	*x = UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) ProtoMessage() {}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP.ProtoReflect.Descriptor instead.
func (*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{32, 0, 2}
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) GetTokenA() *UserWalletAssetToken {
	if x != nil {
		return x.TokenA
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) GetTokenB() *UserWalletAssetToken {
	if x != nil {
		return x.TokenB
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) GetLpToken() *UserWalletAssetToken {
	if x != nil {
		return x.LpToken
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) GetPlatform() *DeFiPlatform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) GetCreatedAt() int32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) GetProfit() *Currency {
	if x != nil {
		return x.Profit
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) GetValue() *Currency {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) GetAmountA() string {
	if x != nil {
		return x.AmountA
	}
	return ""
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) GetAmountB() string {
	if x != nil {
		return x.AmountB
	}
	return ""
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) GetProfitRate() string {
	if x != nil {
		return x.ProfitRate
	}
	return ""
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

type UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 存入资产
	Token *UserWalletAssetToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// 存入数量
	DepositAmount string `protobuf:"bytes,2,opt,name=depositAmount,proto3" json:"depositAmount,omitempty"`
	// 存入平台
	Platform *DeFiPlatform `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// 存入时间
	DepositedAt int32 `protobuf:"varint,4,opt,name=depositedAt,proto3" json:"depositedAt,omitempty"`
	// 收益
	Profit *Currency `protobuf:"bytes,5,opt,name=profit,proto3" json:"profit,omitempty"`
	// 当前价值
	Value *Currency `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	// 钱包 ID
	Uid        string `protobuf:"bytes,7,opt,name=uid,proto3" json:"uid,omitempty"`
	ProfitRate string `protobuf:"bytes,8,opt,name=profitRate,proto3" json:"profitRate,omitempty"`
	ChainName  string `protobuf:"bytes,9,opt,name=chainName,proto3" json:"chainName,omitempty"`
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit) Reset() {
	*x = UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit) ProtoMessage() {}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit.ProtoReflect.Descriptor instead.
func (*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{32, 0, 3}
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit) GetToken() *UserWalletAssetToken {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit) GetDepositAmount() string {
	if x != nil {
		return x.DepositAmount
	}
	return ""
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit) GetPlatform() *DeFiPlatform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit) GetDepositedAt() int32 {
	if x != nil {
		return x.DepositedAt
	}
	return 0
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit) GetProfit() *Currency {
	if x != nil {
		return x.Profit
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit) GetValue() *Currency {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit) GetProfitRate() string {
	if x != nil {
		return x.ProfitRate
	}
	return ""
}

func (x *UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

type UserWalletDeFiDistributionResp_UserWalletDeFiDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 占比
	Percentage string `protobuf:"bytes,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// 金额
	Amount *Currency `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// 平台
	Platform *DeFiPlatform `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *UserWalletDeFiDistributionResp_UserWalletDeFiDistribution) Reset() {
	*x = UserWalletDeFiDistributionResp_UserWalletDeFiDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletDeFiDistributionResp_UserWalletDeFiDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletDeFiDistributionResp_UserWalletDeFiDistribution) ProtoMessage() {}

func (x *UserWalletDeFiDistributionResp_UserWalletDeFiDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletDeFiDistributionResp_UserWalletDeFiDistribution.ProtoReflect.Descriptor instead.
func (*UserWalletDeFiDistributionResp_UserWalletDeFiDistribution) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{34, 0}
}

func (x *UserWalletDeFiDistributionResp_UserWalletDeFiDistribution) GetPercentage() string {
	if x != nil {
		return x.Percentage
	}
	return ""
}

func (x *UserWalletDeFiDistributionResp_UserWalletDeFiDistribution) GetAmount() *Currency {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *UserWalletDeFiDistributionResp_UserWalletDeFiDistribution) GetPlatform() *DeFiPlatform {
	if x != nil {
		return x.Platform
	}
	return nil
}

type UserWalletAssetTypeDistributionResp_UserWalletAssetTypeDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 占比
	Percentage string `protobuf:"bytes,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// 金额
	Amount *Currency `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// 资产类型
	AssetType string `protobuf:"bytes,3,opt,name=assetType,proto3" json:"assetType,omitempty"` // staked,debt,lp,deposit
}

func (x *UserWalletAssetTypeDistributionResp_UserWalletAssetTypeDistribution) Reset() {
	*x = UserWalletAssetTypeDistributionResp_UserWalletAssetTypeDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletAssetTypeDistributionResp_UserWalletAssetTypeDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletAssetTypeDistributionResp_UserWalletAssetTypeDistribution) ProtoMessage() {}

func (x *UserWalletAssetTypeDistributionResp_UserWalletAssetTypeDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletAssetTypeDistributionResp_UserWalletAssetTypeDistribution.ProtoReflect.Descriptor instead.
func (*UserWalletAssetTypeDistributionResp_UserWalletAssetTypeDistribution) Descriptor() ([]byte, []int) {
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP(), []int{35, 0}
}

func (x *UserWalletAssetTypeDistributionResp_UserWalletAssetTypeDistribution) GetPercentage() string {
	if x != nil {
		return x.Percentage
	}
	return ""
}

func (x *UserWalletAssetTypeDistributionResp_UserWalletAssetTypeDistribution) GetAmount() *Currency {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *UserWalletAssetTypeDistributionResp_UserWalletAssetTypeDistribution) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

var File_userWalletAsset_v1_userWalletAsset_proto protoreflect.FileDescriptor

var file_userWalletAsset_v1_userWalletAsset_proto_rawDesc = []byte{
	0x0a, 0x28, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x61, 0x70, 0x69, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x22, 0x54, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6e, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x73, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x64, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x64, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x74, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x74, 0x63, 0x22, 0x49, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x22, 0xf4, 0x03, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x57, 0x0a, 0x03, 0x63, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x03, 0x63, 0x6e, 0x79, 0x12, 0x57, 0x0a, 0x03, 0x75, 0x73, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x03, 0x75,
	0x73, 0x64, 0x12, 0x59, 0x0a, 0x04, 0x75, 0x73, 0x64, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x04, 0x75, 0x73, 0x64, 0x74, 0x12, 0x57, 0x0a,
	0x03, 0x62, 0x74, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x03, 0x62, 0x74, 0x63, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x1a, 0x46, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x19, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x44, 0x65, 0x66, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x69, 0x22, 0xa6, 0x05, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x1a, 0x98, 0x02, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6e, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6e, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x73, 0x64, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x64, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x74, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x74, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x7a,
	0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x65, 0x66, 0x69, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x65, 0x66, 0x69, 0x22, 0xfe, 0x03, 0x0a, 0x1b, 0x55,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x1a, 0xa7, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6e, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6e, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x73, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x73, 0x64, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x73, 0x64, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x74, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x74, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x23, 0x0a, 0x0d, 0x55,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73,
	0x22, 0xc5, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x58,
	0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x38,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x22, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x22, 0xa1, 0x01, 0x0a,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x1a, 0x47, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f,
	0x22, 0x48, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x13, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x6d, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x13, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x87, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x6f, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x86, 0x02, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x47, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x1a, 0xab, 0x01, 0x0a, 0x09, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x22, 0xcc, 0x02, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c,
	0x6c, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5a, 0x65, 0x72, 0x6f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5a, 0x65,
	0x72, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd0, 0x05, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x85, 0x04, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4c,
	0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x32, 0x34, 0x68, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x32, 0x34, 0x68, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x2e, 0x0a, 0x18, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x19, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xaf, 0x01, 0x0a, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a,
	0x1d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73,
	0x22, 0xba, 0x02, 0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xaf, 0x01, 0x0a, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x2e, 0x0a,
	0x18, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x22, 0x94, 0x02,
	0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x93,
	0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x69, 0x64, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x88, 0x01, 0x0a, 0x0a,
	0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x69, 0x64, 0x73, 0x22, 0xd7, 0x02, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x60, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x9a, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x6f, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x12, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x27, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x22, 0x47, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x56, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44,
	0x65, 0x46, 0x69, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x46, 0x69, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x7a, 0x0a, 0x0c, 0x44, 0x65, 0x46,
	0x69, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0xc1, 0x13, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x57, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x44, 0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0xf2, 0x11, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x77, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44,
	0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x64, 0x12, 0x71, 0x0a, 0x04, 0x64, 0x65, 0x62, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65,
	0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x62, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x65, 0x62, 0x74, 0x12, 0x6b, 0x0a, 0x02, 0x6c, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44,
	0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x50, 0x48, 0x00,
	0x52, 0x02, 0x6c, 0x70, 0x12, 0x75, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x44, 0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x1a, 0xa3, 0x03, 0x0a, 0x19,
	0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x46,
	0x69, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0xed, 0x02, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x44, 0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x62, 0x74, 0x12, 0x42, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x46, 0x69, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x72, 0x72, 0x6f,
	0x77, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x6f, 0x72,
	0x72, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0xc1, 0x04, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x44, 0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x50, 0x12, 0x44, 0x0a, 0x06, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x12, 0x44, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x12, 0x46, 0x0a, 0x07, 0x6c, 0x70, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x07, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x40, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x46, 0x69, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xa7, 0x03, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12,
	0x42, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x46, 0x69, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7a, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4c,
	0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x4c, 0x6f, 0x67, 0x6f, 0x22, 0xc2, 0x02, 0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xb8,
	0x01, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46,
	0x69, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x46, 0x69, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xb2, 0x02, 0x0a, 0x23, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x6f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x5b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x1a, 0x99, 0x01, 0x0a, 0x1f, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x32, 0xb1,
	0x10, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x7b, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x81, 0x01, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x09, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x66, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x36, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x14, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x73, 0x12, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46, 0x69, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44,
	0x65, 0x46, 0x69, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x7d, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44,
	0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x46,
	0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x44, 0x65, 0x46, 0x69, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x81, 0x01, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44,
	0x65, 0x46, 0x69, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65,
	0x46, 0x69, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x1f, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_userWalletAsset_v1_userWalletAsset_proto_rawDescOnce sync.Once
	file_userWalletAsset_v1_userWalletAsset_proto_rawDescData = file_userWalletAsset_v1_userWalletAsset_proto_rawDesc
)

func file_userWalletAsset_v1_userWalletAsset_proto_rawDescGZIP() []byte {
	file_userWalletAsset_v1_userWalletAsset_proto_rawDescOnce.Do(func() {
		file_userWalletAsset_v1_userWalletAsset_proto_rawDescData = protoimpl.X.CompressGZIP(file_userWalletAsset_v1_userWalletAsset_proto_rawDescData)
	})
	return file_userWalletAsset_v1_userWalletAsset_proto_rawDescData
}

var file_userWalletAsset_v1_userWalletAsset_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_userWalletAsset_v1_userWalletAsset_proto_goTypes = []interface{}{
	(*Currency)(nil),                                                              // 0: api.userWalletAsset.v1.Currency
	(*UserWalletAssetTotalReq)(nil),                                               // 1: api.userWalletAsset.v1.UserWalletAssetTotalReq
	(*UserWalletAssetTotalResp)(nil),                                              // 2: api.userWalletAsset.v1.UserWalletAssetTotalResp
	(*UserWalletAssetHistoryReq)(nil),                                             // 3: api.userWalletAsset.v1.UserWalletAssetHistoryReq
	(*UserWalletAssetHistoryResp)(nil),                                            // 4: api.userWalletAsset.v1.UserWalletAssetHistoryResp
	(*UserWalletIncomeHistoryReq)(nil),                                            // 5: api.userWalletAsset.v1.UserWalletIncomeHistoryReq
	(*UserWalletIncomeHistoryResp)(nil),                                           // 6: api.userWalletAsset.v1.UserWalletIncomeHistoryResp
	(*UserWalletReq)(nil),                                                         // 7: api.userWalletAsset.v1.UserWalletReq
	(*UserWalletResp)(nil),                                                        // 8: api.userWalletAsset.v1.UserWalletResp
	(*UserChainReq)(nil),                                                          // 9: api.userWalletAsset.v1.UserChainReq
	(*UserChainResp)(nil),                                                         // 10: api.userWalletAsset.v1.UserChainResp
	(*UserChainAmountReq)(nil),                                                    // 11: api.userWalletAsset.v1.UserChainAmountReq
	(*UserChainAmountResp)(nil),                                                   // 12: api.userWalletAsset.v1.UserChainAmountResp
	(*UserTokenReq)(nil),                                                          // 13: api.userWalletAsset.v1.UserTokenReq
	(*UserTokenResp)(nil),                                                         // 14: api.userWalletAsset.v1.UserTokenResp
	(*UserAssetListReq)(nil),                                                      // 15: api.userWalletAsset.v1.UserAssetListReq
	(*UserAssetListResp)(nil),                                                     // 16: api.userWalletAsset.v1.UserAssetListResp
	(*UserAssetDistributionReq)(nil),                                              // 17: api.userWalletAsset.v1.UserAssetDistributionReq
	(*UserAssetDistributionResp)(nil),                                             // 18: api.userWalletAsset.v1.UserAssetDistributionResp
	(*UserChainAssetDistributionReq)(nil),                                         // 19: api.userWalletAsset.v1.UserChainAssetDistributionReq
	(*UserChainAssetDistributionResp)(nil),                                        // 20: api.userWalletAsset.v1.UserChainAssetDistributionResp
	(*UserChainDistributionReq)(nil),                                              // 21: api.userWalletAsset.v1.UserChainDistributionReq
	(*UserChainDistributionResp)(nil),                                             // 22: api.userWalletAsset.v1.UserChainDistributionResp
	(*UserWalletDistributionReq)(nil),                                             // 23: api.userWalletAsset.v1.UserWalletDistributionReq
	(*UserWalletDistributionResp)(nil),                                            // 24: api.userWalletAsset.v1.UserWalletDistributionResp
	(*UserChainAssetFilterReq)(nil),                                               // 25: api.userWalletAsset.v1.UserChainAssetFilterReq
	(*UserChainAssetFilterResp)(nil),                                              // 26: api.userWalletAsset.v1.UserChainAssetFilterResp
	(*UserWalletRequest)(nil),                                                     // 27: api.userWalletAsset.v1.UserWalletRequest
	(*UserWalletDeFiPlatformRequest)(nil),                                         // 28: api.userWalletAsset.v1.UserWalletDeFiPlatformRequest
	(*UserWalletDeFiPlatformResp)(nil),                                            // 29: api.userWalletAsset.v1.UserWalletDeFiPlatformResp
	(*DeFiPlatform)(nil),                                                          // 30: api.userWalletAsset.v1.DeFiPlatform
	(*UserWalletDeFiAssetRequest)(nil),                                            // 31: api.userWalletAsset.v1.UserWalletDeFiAssetRequest
	(*UserWalletDeFiAssetResp)(nil),                                               // 32: api.userWalletAsset.v1.UserWalletDeFiAssetResp
	(*UserWalletAssetToken)(nil),                                                  // 33: api.userWalletAsset.v1.UserWalletAssetToken
	(*UserWalletDeFiDistributionResp)(nil),                                        // 34: api.userWalletAsset.v1.UserWalletDeFiDistributionResp
	(*UserWalletAssetTypeDistributionResp)(nil),                                   // 35: api.userWalletAsset.v1.UserWalletAssetTypeDistributionResp
	(*UserWalletAssetTotalResp_UserWalletAssetTotal)(nil),                         // 36: api.userWalletAsset.v1.UserWalletAssetTotalResp.UserWalletAssetTotal
	(*UserWalletAssetHistoryResp_UserWalletAssetHistory)(nil),                     // 37: api.userWalletAsset.v1.UserWalletAssetHistoryResp.UserWalletAssetHistory
	(*UserWalletIncomeHistoryResp_UserWalletIncomeHistory)(nil),                   // 38: api.userWalletAsset.v1.UserWalletIncomeHistoryResp.UserWalletIncomeHistory
	(*UserWalletResp_UserWallet)(nil),                                             // 39: api.userWalletAsset.v1.UserWalletResp.UserWallet
	(*UserChainResp_UserChain)(nil),                                               // 40: api.userWalletAsset.v1.UserChainResp.UserChain
	(*UserChainAmountResp_UserChainAmount)(nil),                                   // 41: api.userWalletAsset.v1.UserChainAmountResp.UserChainAmount
	(*UserTokenResp_UserToken)(nil),                                               // 42: api.userWalletAsset.v1.UserTokenResp.UserToken
	(*UserAssetListResp_UserAsset)(nil),                                           // 43: api.userWalletAsset.v1.UserAssetListResp.UserAsset
	(*UserAssetDistributionResp_UserAsset)(nil),                                   // 44: api.userWalletAsset.v1.UserAssetDistributionResp.UserAsset
	(*UserChainAssetDistributionResp_UserAsset)(nil),                              // 45: api.userWalletAsset.v1.UserChainAssetDistributionResp.UserAsset
	(*UserChainDistributionResp_UserChain)(nil),                                   // 46: api.userWalletAsset.v1.UserChainDistributionResp.UserChain
	(*UserWalletDistributionResp_UserWallet)(nil),                                 // 47: api.userWalletAsset.v1.UserWalletDistributionResp.UserWallet
	(*UserChainAssetFilterResp_UserChain)(nil),                                    // 48: api.userWalletAsset.v1.UserChainAssetFilterResp.UserChain
	(*UserChainAssetFilterResp_UserChainAsset)(nil),                               // 49: api.userWalletAsset.v1.UserChainAssetFilterResp.UserChainAsset
	(*UserWalletDeFiAssetResp_UserWalletDeFiAsset)(nil),                           // 50: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset
	(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked)(nil), // 51: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetStaked
	(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt)(nil),   // 52: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetDebt
	(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP)(nil),     // 53: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetLP
	(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit)(nil),     // 54: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiDeposit
	(*UserWalletDeFiDistributionResp_UserWalletDeFiDistribution)(nil),             // 55: api.userWalletAsset.v1.UserWalletDeFiDistributionResp.UserWalletDeFiDistribution
	(*UserWalletAssetTypeDistributionResp_UserWalletAssetTypeDistribution)(nil),   // 56: api.userWalletAsset.v1.UserWalletAssetTypeDistributionResp.UserWalletAssetTypeDistribution
}
var file_userWalletAsset_v1_userWalletAsset_proto_depIdxs = []int32{
	36, // 0: api.userWalletAsset.v1.UserWalletAssetTotalResp.cny:type_name -> api.userWalletAsset.v1.UserWalletAssetTotalResp.UserWalletAssetTotal
	36, // 1: api.userWalletAsset.v1.UserWalletAssetTotalResp.usd:type_name -> api.userWalletAsset.v1.UserWalletAssetTotalResp.UserWalletAssetTotal
	36, // 2: api.userWalletAsset.v1.UserWalletAssetTotalResp.usdt:type_name -> api.userWalletAsset.v1.UserWalletAssetTotalResp.UserWalletAssetTotal
	36, // 3: api.userWalletAsset.v1.UserWalletAssetTotalResp.btc:type_name -> api.userWalletAsset.v1.UserWalletAssetTotalResp.UserWalletAssetTotal
	0,  // 4: api.userWalletAsset.v1.UserWalletAssetHistoryResp.amount:type_name -> api.userWalletAsset.v1.Currency
	0,  // 5: api.userWalletAsset.v1.UserWalletAssetHistoryResp.income:type_name -> api.userWalletAsset.v1.Currency
	37, // 6: api.userWalletAsset.v1.UserWalletAssetHistoryResp.histories:type_name -> api.userWalletAsset.v1.UserWalletAssetHistoryResp.UserWalletAssetHistory
	0,  // 7: api.userWalletAsset.v1.UserWalletAssetHistoryResp.changeAmount:type_name -> api.userWalletAsset.v1.Currency
	0,  // 8: api.userWalletAsset.v1.UserWalletIncomeHistoryResp.amount:type_name -> api.userWalletAsset.v1.Currency
	38, // 9: api.userWalletAsset.v1.UserWalletIncomeHistoryResp.histories:type_name -> api.userWalletAsset.v1.UserWalletIncomeHistoryResp.UserWalletIncomeHistory
	0,  // 10: api.userWalletAsset.v1.UserWalletIncomeHistoryResp.changeAmount:type_name -> api.userWalletAsset.v1.Currency
	39, // 11: api.userWalletAsset.v1.UserWalletResp.userWalletList:type_name -> api.userWalletAsset.v1.UserWalletResp.UserWallet
	40, // 12: api.userWalletAsset.v1.UserChainResp.chains:type_name -> api.userWalletAsset.v1.UserChainResp.UserChain
	41, // 13: api.userWalletAsset.v1.UserChainAmountResp.userChainAmountList:type_name -> api.userWalletAsset.v1.UserChainAmountResp.UserChainAmount
	42, // 14: api.userWalletAsset.v1.UserTokenResp.tokens:type_name -> api.userWalletAsset.v1.UserTokenResp.UserToken
	0,  // 15: api.userWalletAsset.v1.UserAssetListResp.totalAmount:type_name -> api.userWalletAsset.v1.Currency
	43, // 16: api.userWalletAsset.v1.UserAssetListResp.userAssetList:type_name -> api.userWalletAsset.v1.UserAssetListResp.UserAsset
	44, // 17: api.userWalletAsset.v1.UserAssetDistributionResp.userAssetList:type_name -> api.userWalletAsset.v1.UserAssetDistributionResp.UserAsset
	45, // 18: api.userWalletAsset.v1.UserChainAssetDistributionResp.userAssetList:type_name -> api.userWalletAsset.v1.UserChainAssetDistributionResp.UserAsset
	46, // 19: api.userWalletAsset.v1.UserChainDistributionResp.userChainList:type_name -> api.userWalletAsset.v1.UserChainDistributionResp.UserChain
	47, // 20: api.userWalletAsset.v1.UserWalletDistributionResp.userWalletList:type_name -> api.userWalletAsset.v1.UserWalletDistributionResp.UserWallet
	48, // 21: api.userWalletAsset.v1.UserChainAssetFilterResp.userChainList:type_name -> api.userWalletAsset.v1.UserChainAssetFilterResp.UserChain
	30, // 22: api.userWalletAsset.v1.UserWalletDeFiPlatformResp.list:type_name -> api.userWalletAsset.v1.DeFiPlatform
	50, // 23: api.userWalletAsset.v1.UserWalletDeFiAssetResp.list:type_name -> api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset
	0,  // 24: api.userWalletAsset.v1.UserWalletDeFiAssetResp.totalAmount:type_name -> api.userWalletAsset.v1.Currency
	55, // 25: api.userWalletAsset.v1.UserWalletDeFiDistributionResp.list:type_name -> api.userWalletAsset.v1.UserWalletDeFiDistributionResp.UserWalletDeFiDistribution
	56, // 26: api.userWalletAsset.v1.UserWalletAssetTypeDistributionResp.list:type_name -> api.userWalletAsset.v1.UserWalletAssetTypeDistributionResp.UserWalletAssetTypeDistribution
	0,  // 27: api.userWalletAsset.v1.UserWalletAssetHistoryResp.UserWalletAssetHistory.changeAmount:type_name -> api.userWalletAsset.v1.Currency
	0,  // 28: api.userWalletAsset.v1.UserWalletResp.UserWallet.amount:type_name -> api.userWalletAsset.v1.Currency
	0,  // 29: api.userWalletAsset.v1.UserChainAmountResp.UserChainAmount.amount:type_name -> api.userWalletAsset.v1.Currency
	0,  // 30: api.userWalletAsset.v1.UserAssetListResp.UserAsset.currencyAmount:type_name -> api.userWalletAsset.v1.Currency
	0,  // 31: api.userWalletAsset.v1.UserAssetListResp.UserAsset.price:type_name -> api.userWalletAsset.v1.Currency
	0,  // 32: api.userWalletAsset.v1.UserAssetListResp.UserAsset.costPrice:type_name -> api.userWalletAsset.v1.Currency
	0,  // 33: api.userWalletAsset.v1.UserAssetListResp.UserAsset.income:type_name -> api.userWalletAsset.v1.Currency
	0,  // 34: api.userWalletAsset.v1.UserAssetDistributionResp.UserAsset.currencyAmount:type_name -> api.userWalletAsset.v1.Currency
	0,  // 35: api.userWalletAsset.v1.UserChainAssetDistributionResp.UserAsset.currencyAmount:type_name -> api.userWalletAsset.v1.Currency
	0,  // 36: api.userWalletAsset.v1.UserChainDistributionResp.UserChain.currencyAmount:type_name -> api.userWalletAsset.v1.Currency
	0,  // 37: api.userWalletAsset.v1.UserWalletDistributionResp.UserWallet.currencyAmount:type_name -> api.userWalletAsset.v1.Currency
	49, // 38: api.userWalletAsset.v1.UserChainAssetFilterResp.UserChain.userChainAssetList:type_name -> api.userWalletAsset.v1.UserChainAssetFilterResp.UserChainAsset
	51, // 39: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.staked:type_name -> api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetStaked
	52, // 40: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.debt:type_name -> api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetDebt
	53, // 41: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.lp:type_name -> api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetLP
	54, // 42: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.deposit:type_name -> api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiDeposit
	33, // 43: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetStaked.token:type_name -> api.userWalletAsset.v1.UserWalletAssetToken
	30, // 44: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetStaked.platform:type_name -> api.userWalletAsset.v1.DeFiPlatform
	0,  // 45: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetStaked.profit:type_name -> api.userWalletAsset.v1.Currency
	0,  // 46: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetStaked.value:type_name -> api.userWalletAsset.v1.Currency
	33, // 47: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetDebt.token:type_name -> api.userWalletAsset.v1.UserWalletAssetToken
	30, // 48: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetDebt.platform:type_name -> api.userWalletAsset.v1.DeFiPlatform
	0,  // 49: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetDebt.value:type_name -> api.userWalletAsset.v1.Currency
	33, // 50: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetLP.tokenA:type_name -> api.userWalletAsset.v1.UserWalletAssetToken
	33, // 51: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetLP.tokenB:type_name -> api.userWalletAsset.v1.UserWalletAssetToken
	33, // 52: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetLP.lpToken:type_name -> api.userWalletAsset.v1.UserWalletAssetToken
	30, // 53: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetLP.platform:type_name -> api.userWalletAsset.v1.DeFiPlatform
	0,  // 54: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetLP.profit:type_name -> api.userWalletAsset.v1.Currency
	0,  // 55: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiAssetLP.value:type_name -> api.userWalletAsset.v1.Currency
	33, // 56: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiDeposit.token:type_name -> api.userWalletAsset.v1.UserWalletAssetToken
	30, // 57: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiDeposit.platform:type_name -> api.userWalletAsset.v1.DeFiPlatform
	0,  // 58: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiDeposit.profit:type_name -> api.userWalletAsset.v1.Currency
	0,  // 59: api.userWalletAsset.v1.UserWalletDeFiAssetResp.UserWalletDeFiAsset.UserWalletDeFiDeposit.value:type_name -> api.userWalletAsset.v1.Currency
	0,  // 60: api.userWalletAsset.v1.UserWalletDeFiDistributionResp.UserWalletDeFiDistribution.amount:type_name -> api.userWalletAsset.v1.Currency
	30, // 61: api.userWalletAsset.v1.UserWalletDeFiDistributionResp.UserWalletDeFiDistribution.platform:type_name -> api.userWalletAsset.v1.DeFiPlatform
	0,  // 62: api.userWalletAsset.v1.UserWalletAssetTypeDistributionResp.UserWalletAssetTypeDistribution.amount:type_name -> api.userWalletAsset.v1.Currency
	1,  // 63: api.userWalletAsset.v1.UserWalletAsset.UserWalletAssetTotal:input_type -> api.userWalletAsset.v1.UserWalletAssetTotalReq
	3,  // 64: api.userWalletAsset.v1.UserWalletAsset.UserWalletAssetHistory:input_type -> api.userWalletAsset.v1.UserWalletAssetHistoryReq
	5,  // 65: api.userWalletAsset.v1.UserWalletAsset.UserWalletIncomeHistory:input_type -> api.userWalletAsset.v1.UserWalletIncomeHistoryReq
	7,  // 66: api.userWalletAsset.v1.UserWalletAsset.UserWallet:input_type -> api.userWalletAsset.v1.UserWalletReq
	9,  // 67: api.userWalletAsset.v1.UserWalletAsset.UserChain:input_type -> api.userWalletAsset.v1.UserChainReq
	11, // 68: api.userWalletAsset.v1.UserWalletAsset.UserChainAmount:input_type -> api.userWalletAsset.v1.UserChainAmountReq
	13, // 69: api.userWalletAsset.v1.UserWalletAsset.UserToken:input_type -> api.userWalletAsset.v1.UserTokenReq
	15, // 70: api.userWalletAsset.v1.UserWalletAsset.UserAssetList:input_type -> api.userWalletAsset.v1.UserAssetListReq
	17, // 71: api.userWalletAsset.v1.UserWalletAsset.UserAssetDistribution:input_type -> api.userWalletAsset.v1.UserAssetDistributionReq
	19, // 72: api.userWalletAsset.v1.UserWalletAsset.UserChainAssetDistribution:input_type -> api.userWalletAsset.v1.UserChainAssetDistributionReq
	21, // 73: api.userWalletAsset.v1.UserWalletAsset.UserChainDistribution:input_type -> api.userWalletAsset.v1.UserChainDistributionReq
	23, // 74: api.userWalletAsset.v1.UserWalletAsset.UserWalletDistribution:input_type -> api.userWalletAsset.v1.UserWalletDistributionReq
	25, // 75: api.userWalletAsset.v1.UserWalletAsset.UserChainAssetFilter:input_type -> api.userWalletAsset.v1.UserChainAssetFilterReq
	28, // 76: api.userWalletAsset.v1.UserWalletAsset.UserWalletDeFiPlatforms:input_type -> api.userWalletAsset.v1.UserWalletDeFiPlatformRequest
	31, // 77: api.userWalletAsset.v1.UserWalletAsset.UserWalletDeFiAssets:input_type -> api.userWalletAsset.v1.UserWalletDeFiAssetRequest
	27, // 78: api.userWalletAsset.v1.UserWalletAsset.UserWalletDeFiDistribution:input_type -> api.userWalletAsset.v1.UserWalletRequest
	27, // 79: api.userWalletAsset.v1.UserWalletAsset.UserWalletAssetTypeDistribution:input_type -> api.userWalletAsset.v1.UserWalletRequest
	2,  // 80: api.userWalletAsset.v1.UserWalletAsset.UserWalletAssetTotal:output_type -> api.userWalletAsset.v1.UserWalletAssetTotalResp
	4,  // 81: api.userWalletAsset.v1.UserWalletAsset.UserWalletAssetHistory:output_type -> api.userWalletAsset.v1.UserWalletAssetHistoryResp
	6,  // 82: api.userWalletAsset.v1.UserWalletAsset.UserWalletIncomeHistory:output_type -> api.userWalletAsset.v1.UserWalletIncomeHistoryResp
	8,  // 83: api.userWalletAsset.v1.UserWalletAsset.UserWallet:output_type -> api.userWalletAsset.v1.UserWalletResp
	10, // 84: api.userWalletAsset.v1.UserWalletAsset.UserChain:output_type -> api.userWalletAsset.v1.UserChainResp
	12, // 85: api.userWalletAsset.v1.UserWalletAsset.UserChainAmount:output_type -> api.userWalletAsset.v1.UserChainAmountResp
	14, // 86: api.userWalletAsset.v1.UserWalletAsset.UserToken:output_type -> api.userWalletAsset.v1.UserTokenResp
	16, // 87: api.userWalletAsset.v1.UserWalletAsset.UserAssetList:output_type -> api.userWalletAsset.v1.UserAssetListResp
	18, // 88: api.userWalletAsset.v1.UserWalletAsset.UserAssetDistribution:output_type -> api.userWalletAsset.v1.UserAssetDistributionResp
	20, // 89: api.userWalletAsset.v1.UserWalletAsset.UserChainAssetDistribution:output_type -> api.userWalletAsset.v1.UserChainAssetDistributionResp
	22, // 90: api.userWalletAsset.v1.UserWalletAsset.UserChainDistribution:output_type -> api.userWalletAsset.v1.UserChainDistributionResp
	24, // 91: api.userWalletAsset.v1.UserWalletAsset.UserWalletDistribution:output_type -> api.userWalletAsset.v1.UserWalletDistributionResp
	26, // 92: api.userWalletAsset.v1.UserWalletAsset.UserChainAssetFilter:output_type -> api.userWalletAsset.v1.UserChainAssetFilterResp
	29, // 93: api.userWalletAsset.v1.UserWalletAsset.UserWalletDeFiPlatforms:output_type -> api.userWalletAsset.v1.UserWalletDeFiPlatformResp
	32, // 94: api.userWalletAsset.v1.UserWalletAsset.UserWalletDeFiAssets:output_type -> api.userWalletAsset.v1.UserWalletDeFiAssetResp
	34, // 95: api.userWalletAsset.v1.UserWalletAsset.UserWalletDeFiDistribution:output_type -> api.userWalletAsset.v1.UserWalletDeFiDistributionResp
	35, // 96: api.userWalletAsset.v1.UserWalletAsset.UserWalletAssetTypeDistribution:output_type -> api.userWalletAsset.v1.UserWalletAssetTypeDistributionResp
	80, // [80:97] is the sub-list for method output_type
	63, // [63:80] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_userWalletAsset_v1_userWalletAsset_proto_init() }
func file_userWalletAsset_v1_userWalletAsset_proto_init() {
	if File_userWalletAsset_v1_userWalletAsset_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletAssetTotalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletAssetTotalResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletAssetHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletAssetHistoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletIncomeHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletIncomeHistoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainAmountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainAmountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAssetListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAssetListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAssetDistributionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAssetDistributionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainAssetDistributionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainAssetDistributionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainDistributionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainDistributionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletDistributionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletDistributionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainAssetFilterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainAssetFilterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletDeFiPlatformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletDeFiPlatformResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeFiPlatform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletDeFiAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletDeFiAssetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletAssetToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletDeFiDistributionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletAssetTypeDistributionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletAssetTotalResp_UserWalletAssetTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletAssetHistoryResp_UserWalletAssetHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletIncomeHistoryResp_UserWalletIncomeHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletResp_UserWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainResp_UserChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainAmountResp_UserChainAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTokenResp_UserToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAssetListResp_UserAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAssetDistributionResp_UserAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainAssetDistributionResp_UserAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainDistributionResp_UserChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletDistributionResp_UserWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainAssetFilterResp_UserChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainAssetFilterResp_UserChainAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletDeFiAssetResp_UserWalletDeFiAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetStaked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetDebt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiAssetLP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_UserWalletDeFiDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletDeFiDistributionResp_UserWalletDeFiDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWalletAssetTypeDistributionResp_UserWalletAssetTypeDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_userWalletAsset_v1_userWalletAsset_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Staked)(nil),
		(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Debt)(nil),
		(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Lp)(nil),
		(*UserWalletDeFiAssetResp_UserWalletDeFiAsset_Deposit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_userWalletAsset_v1_userWalletAsset_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_userWalletAsset_v1_userWalletAsset_proto_goTypes,
		DependencyIndexes: file_userWalletAsset_v1_userWalletAsset_proto_depIdxs,
		MessageInfos:      file_userWalletAsset_v1_userWalletAsset_proto_msgTypes,
	}.Build()
	File_userWalletAsset_v1_userWalletAsset_proto = out.File
	file_userWalletAsset_v1_userWalletAsset_proto_rawDesc = nil
	file_userWalletAsset_v1_userWalletAsset_proto_goTypes = nil
	file_userWalletAsset_v1_userWalletAsset_proto_depIdxs = nil
}
