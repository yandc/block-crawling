// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: userWalletAsset/v1/userWalletAsset.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserWalletAssetClient is the client API for UserWalletAsset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserWalletAssetClient interface {
	// 获取用户全部钱包资产总值
	UserWalletAssetTotal(ctx context.Context, in *UserWalletAssetTotalReq, opts ...grpc.CallOption) (*UserWalletAssetTotalResp, error)
	// 获取用户全部钱包资产总值历史
	UserWalletAssetHistory(ctx context.Context, in *UserWalletAssetHistoryReq, opts ...grpc.CallOption) (*UserWalletAssetHistoryResp, error)
	// 获取用户全部钱包收益历史
	UserWalletIncomeHistory(ctx context.Context, in *UserWalletIncomeHistoryReq, opts ...grpc.CallOption) (*UserWalletIncomeHistoryResp, error)
	// 获取用户全部有资产的钱包uid
	UserWallet(ctx context.Context, in *UserWalletReq, opts ...grpc.CallOption) (*UserWalletResp, error)
	// 获取用户全部有资产的链
	UserChain(ctx context.Context, in *UserChainReq, opts ...grpc.CallOption) (*UserChainResp, error)
	// 批量获取用户链资产汇总
	UserChainAmount(ctx context.Context, in *UserChainAmountReq, opts ...grpc.CallOption) (*UserChainAmountResp, error)
	// 获取用户全部有资产的Token
	UserToken(ctx context.Context, in *UserTokenReq, opts ...grpc.CallOption) (*UserTokenResp, error)
	// 获取用户全部资产列表
	UserAssetList(ctx context.Context, in *UserAssetListReq, opts ...grpc.CallOption) (*UserAssetListResp, error)
	// 用户资产分布饼状图
	UserAssetDistribution(ctx context.Context, in *UserAssetDistributionReq, opts ...grpc.CallOption) (*UserAssetDistributionResp, error)
	// 用户单链资产分布饼状图
	UserChainAssetDistribution(ctx context.Context, in *UserChainAssetDistributionReq, opts ...grpc.CallOption) (*UserChainAssetDistributionResp, error)
	// 用户网络分布饼状图
	UserChainDistribution(ctx context.Context, in *UserChainDistributionReq, opts ...grpc.CallOption) (*UserChainDistributionResp, error)
	// 用户钱包分布饼状图
	UserWalletDistribution(ctx context.Context, in *UserWalletDistributionReq, opts ...grpc.CallOption) (*UserWalletDistributionResp, error)
	// 用户单链资产分析
	UserChainAssetFilter(ctx context.Context, in *UserChainAssetFilterReq, opts ...grpc.CallOption) (*UserChainAssetFilterResp, error)
}

type userWalletAssetClient struct {
	cc grpc.ClientConnInterface
}

func NewUserWalletAssetClient(cc grpc.ClientConnInterface) UserWalletAssetClient {
	return &userWalletAssetClient{cc}
}

func (c *userWalletAssetClient) UserWalletAssetTotal(ctx context.Context, in *UserWalletAssetTotalReq, opts ...grpc.CallOption) (*UserWalletAssetTotalResp, error) {
	out := new(UserWalletAssetTotalResp)
	err := c.cc.Invoke(ctx, "/api.userWalletAsset.v1.UserWalletAsset/UserWalletAssetTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletAssetClient) UserWalletAssetHistory(ctx context.Context, in *UserWalletAssetHistoryReq, opts ...grpc.CallOption) (*UserWalletAssetHistoryResp, error) {
	out := new(UserWalletAssetHistoryResp)
	err := c.cc.Invoke(ctx, "/api.userWalletAsset.v1.UserWalletAsset/UserWalletAssetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletAssetClient) UserWalletIncomeHistory(ctx context.Context, in *UserWalletIncomeHistoryReq, opts ...grpc.CallOption) (*UserWalletIncomeHistoryResp, error) {
	out := new(UserWalletIncomeHistoryResp)
	err := c.cc.Invoke(ctx, "/api.userWalletAsset.v1.UserWalletAsset/UserWalletIncomeHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletAssetClient) UserWallet(ctx context.Context, in *UserWalletReq, opts ...grpc.CallOption) (*UserWalletResp, error) {
	out := new(UserWalletResp)
	err := c.cc.Invoke(ctx, "/api.userWalletAsset.v1.UserWalletAsset/UserWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletAssetClient) UserChain(ctx context.Context, in *UserChainReq, opts ...grpc.CallOption) (*UserChainResp, error) {
	out := new(UserChainResp)
	err := c.cc.Invoke(ctx, "/api.userWalletAsset.v1.UserWalletAsset/UserChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletAssetClient) UserChainAmount(ctx context.Context, in *UserChainAmountReq, opts ...grpc.CallOption) (*UserChainAmountResp, error) {
	out := new(UserChainAmountResp)
	err := c.cc.Invoke(ctx, "/api.userWalletAsset.v1.UserWalletAsset/UserChainAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletAssetClient) UserToken(ctx context.Context, in *UserTokenReq, opts ...grpc.CallOption) (*UserTokenResp, error) {
	out := new(UserTokenResp)
	err := c.cc.Invoke(ctx, "/api.userWalletAsset.v1.UserWalletAsset/UserToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletAssetClient) UserAssetList(ctx context.Context, in *UserAssetListReq, opts ...grpc.CallOption) (*UserAssetListResp, error) {
	out := new(UserAssetListResp)
	err := c.cc.Invoke(ctx, "/api.userWalletAsset.v1.UserWalletAsset/UserAssetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletAssetClient) UserAssetDistribution(ctx context.Context, in *UserAssetDistributionReq, opts ...grpc.CallOption) (*UserAssetDistributionResp, error) {
	out := new(UserAssetDistributionResp)
	err := c.cc.Invoke(ctx, "/api.userWalletAsset.v1.UserWalletAsset/UserAssetDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletAssetClient) UserChainAssetDistribution(ctx context.Context, in *UserChainAssetDistributionReq, opts ...grpc.CallOption) (*UserChainAssetDistributionResp, error) {
	out := new(UserChainAssetDistributionResp)
	err := c.cc.Invoke(ctx, "/api.userWalletAsset.v1.UserWalletAsset/UserChainAssetDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletAssetClient) UserChainDistribution(ctx context.Context, in *UserChainDistributionReq, opts ...grpc.CallOption) (*UserChainDistributionResp, error) {
	out := new(UserChainDistributionResp)
	err := c.cc.Invoke(ctx, "/api.userWalletAsset.v1.UserWalletAsset/UserChainDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletAssetClient) UserWalletDistribution(ctx context.Context, in *UserWalletDistributionReq, opts ...grpc.CallOption) (*UserWalletDistributionResp, error) {
	out := new(UserWalletDistributionResp)
	err := c.cc.Invoke(ctx, "/api.userWalletAsset.v1.UserWalletAsset/UserWalletDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletAssetClient) UserChainAssetFilter(ctx context.Context, in *UserChainAssetFilterReq, opts ...grpc.CallOption) (*UserChainAssetFilterResp, error) {
	out := new(UserChainAssetFilterResp)
	err := c.cc.Invoke(ctx, "/api.userWalletAsset.v1.UserWalletAsset/UserChainAssetFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserWalletAssetServer is the server API for UserWalletAsset service.
// All implementations must embed UnimplementedUserWalletAssetServer
// for forward compatibility
type UserWalletAssetServer interface {
	// 获取用户全部钱包资产总值
	UserWalletAssetTotal(context.Context, *UserWalletAssetTotalReq) (*UserWalletAssetTotalResp, error)
	// 获取用户全部钱包资产总值历史
	UserWalletAssetHistory(context.Context, *UserWalletAssetHistoryReq) (*UserWalletAssetHistoryResp, error)
	// 获取用户全部钱包收益历史
	UserWalletIncomeHistory(context.Context, *UserWalletIncomeHistoryReq) (*UserWalletIncomeHistoryResp, error)
	// 获取用户全部有资产的钱包uid
	UserWallet(context.Context, *UserWalletReq) (*UserWalletResp, error)
	// 获取用户全部有资产的链
	UserChain(context.Context, *UserChainReq) (*UserChainResp, error)
	// 批量获取用户链资产汇总
	UserChainAmount(context.Context, *UserChainAmountReq) (*UserChainAmountResp, error)
	// 获取用户全部有资产的Token
	UserToken(context.Context, *UserTokenReq) (*UserTokenResp, error)
	// 获取用户全部资产列表
	UserAssetList(context.Context, *UserAssetListReq) (*UserAssetListResp, error)
	// 用户资产分布饼状图
	UserAssetDistribution(context.Context, *UserAssetDistributionReq) (*UserAssetDistributionResp, error)
	// 用户单链资产分布饼状图
	UserChainAssetDistribution(context.Context, *UserChainAssetDistributionReq) (*UserChainAssetDistributionResp, error)
	// 用户网络分布饼状图
	UserChainDistribution(context.Context, *UserChainDistributionReq) (*UserChainDistributionResp, error)
	// 用户钱包分布饼状图
	UserWalletDistribution(context.Context, *UserWalletDistributionReq) (*UserWalletDistributionResp, error)
	// 用户单链资产分析
	UserChainAssetFilter(context.Context, *UserChainAssetFilterReq) (*UserChainAssetFilterResp, error)
	mustEmbedUnimplementedUserWalletAssetServer()
}

// UnimplementedUserWalletAssetServer must be embedded to have forward compatible implementations.
type UnimplementedUserWalletAssetServer struct {
}

func (UnimplementedUserWalletAssetServer) UserWalletAssetTotal(context.Context, *UserWalletAssetTotalReq) (*UserWalletAssetTotalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWalletAssetTotal not implemented")
}
func (UnimplementedUserWalletAssetServer) UserWalletAssetHistory(context.Context, *UserWalletAssetHistoryReq) (*UserWalletAssetHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWalletAssetHistory not implemented")
}
func (UnimplementedUserWalletAssetServer) UserWalletIncomeHistory(context.Context, *UserWalletIncomeHistoryReq) (*UserWalletIncomeHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWalletIncomeHistory not implemented")
}
func (UnimplementedUserWalletAssetServer) UserWallet(context.Context, *UserWalletReq) (*UserWalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWallet not implemented")
}
func (UnimplementedUserWalletAssetServer) UserChain(context.Context, *UserChainReq) (*UserChainResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChain not implemented")
}
func (UnimplementedUserWalletAssetServer) UserChainAmount(context.Context, *UserChainAmountReq) (*UserChainAmountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChainAmount not implemented")
}
func (UnimplementedUserWalletAssetServer) UserToken(context.Context, *UserTokenReq) (*UserTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserToken not implemented")
}
func (UnimplementedUserWalletAssetServer) UserAssetList(context.Context, *UserAssetListReq) (*UserAssetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAssetList not implemented")
}
func (UnimplementedUserWalletAssetServer) UserAssetDistribution(context.Context, *UserAssetDistributionReq) (*UserAssetDistributionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAssetDistribution not implemented")
}
func (UnimplementedUserWalletAssetServer) UserChainAssetDistribution(context.Context, *UserChainAssetDistributionReq) (*UserChainAssetDistributionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChainAssetDistribution not implemented")
}
func (UnimplementedUserWalletAssetServer) UserChainDistribution(context.Context, *UserChainDistributionReq) (*UserChainDistributionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChainDistribution not implemented")
}
func (UnimplementedUserWalletAssetServer) UserWalletDistribution(context.Context, *UserWalletDistributionReq) (*UserWalletDistributionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWalletDistribution not implemented")
}
func (UnimplementedUserWalletAssetServer) UserChainAssetFilter(context.Context, *UserChainAssetFilterReq) (*UserChainAssetFilterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChainAssetFilter not implemented")
}
func (UnimplementedUserWalletAssetServer) mustEmbedUnimplementedUserWalletAssetServer() {}

// UnsafeUserWalletAssetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserWalletAssetServer will
// result in compilation errors.
type UnsafeUserWalletAssetServer interface {
	mustEmbedUnimplementedUserWalletAssetServer()
}

func RegisterUserWalletAssetServer(s grpc.ServiceRegistrar, srv UserWalletAssetServer) {
	s.RegisterService(&UserWalletAsset_ServiceDesc, srv)
}

func _UserWalletAsset_UserWalletAssetTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWalletAssetTotalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletAssetServer).UserWalletAssetTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userWalletAsset.v1.UserWalletAsset/UserWalletAssetTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletAssetServer).UserWalletAssetTotal(ctx, req.(*UserWalletAssetTotalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletAsset_UserWalletAssetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWalletAssetHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletAssetServer).UserWalletAssetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userWalletAsset.v1.UserWalletAsset/UserWalletAssetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletAssetServer).UserWalletAssetHistory(ctx, req.(*UserWalletAssetHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletAsset_UserWalletIncomeHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWalletIncomeHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletAssetServer).UserWalletIncomeHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userWalletAsset.v1.UserWalletAsset/UserWalletIncomeHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletAssetServer).UserWalletIncomeHistory(ctx, req.(*UserWalletIncomeHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletAsset_UserWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletAssetServer).UserWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userWalletAsset.v1.UserWalletAsset/UserWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletAssetServer).UserWallet(ctx, req.(*UserWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletAsset_UserChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletAssetServer).UserChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userWalletAsset.v1.UserWalletAsset/UserChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletAssetServer).UserChain(ctx, req.(*UserChainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletAsset_UserChainAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChainAmountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletAssetServer).UserChainAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userWalletAsset.v1.UserWalletAsset/UserChainAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletAssetServer).UserChainAmount(ctx, req.(*UserChainAmountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletAsset_UserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletAssetServer).UserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userWalletAsset.v1.UserWalletAsset/UserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletAssetServer).UserToken(ctx, req.(*UserTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletAsset_UserAssetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAssetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletAssetServer).UserAssetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userWalletAsset.v1.UserWalletAsset/UserAssetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletAssetServer).UserAssetList(ctx, req.(*UserAssetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletAsset_UserAssetDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAssetDistributionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletAssetServer).UserAssetDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userWalletAsset.v1.UserWalletAsset/UserAssetDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletAssetServer).UserAssetDistribution(ctx, req.(*UserAssetDistributionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletAsset_UserChainAssetDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChainAssetDistributionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletAssetServer).UserChainAssetDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userWalletAsset.v1.UserWalletAsset/UserChainAssetDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletAssetServer).UserChainAssetDistribution(ctx, req.(*UserChainAssetDistributionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletAsset_UserChainDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChainDistributionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletAssetServer).UserChainDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userWalletAsset.v1.UserWalletAsset/UserChainDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletAssetServer).UserChainDistribution(ctx, req.(*UserChainDistributionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletAsset_UserWalletDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWalletDistributionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletAssetServer).UserWalletDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userWalletAsset.v1.UserWalletAsset/UserWalletDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletAssetServer).UserWalletDistribution(ctx, req.(*UserWalletDistributionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletAsset_UserChainAssetFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChainAssetFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletAssetServer).UserChainAssetFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userWalletAsset.v1.UserWalletAsset/UserChainAssetFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletAssetServer).UserChainAssetFilter(ctx, req.(*UserChainAssetFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserWalletAsset_ServiceDesc is the grpc.ServiceDesc for UserWalletAsset service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserWalletAsset_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.userWalletAsset.v1.UserWalletAsset",
	HandlerType: (*UserWalletAssetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserWalletAssetTotal",
			Handler:    _UserWalletAsset_UserWalletAssetTotal_Handler,
		},
		{
			MethodName: "UserWalletAssetHistory",
			Handler:    _UserWalletAsset_UserWalletAssetHistory_Handler,
		},
		{
			MethodName: "UserWalletIncomeHistory",
			Handler:    _UserWalletAsset_UserWalletIncomeHistory_Handler,
		},
		{
			MethodName: "UserWallet",
			Handler:    _UserWalletAsset_UserWallet_Handler,
		},
		{
			MethodName: "UserChain",
			Handler:    _UserWalletAsset_UserChain_Handler,
		},
		{
			MethodName: "UserChainAmount",
			Handler:    _UserWalletAsset_UserChainAmount_Handler,
		},
		{
			MethodName: "UserToken",
			Handler:    _UserWalletAsset_UserToken_Handler,
		},
		{
			MethodName: "UserAssetList",
			Handler:    _UserWalletAsset_UserAssetList_Handler,
		},
		{
			MethodName: "UserAssetDistribution",
			Handler:    _UserWalletAsset_UserAssetDistribution_Handler,
		},
		{
			MethodName: "UserChainAssetDistribution",
			Handler:    _UserWalletAsset_UserChainAssetDistribution_Handler,
		},
		{
			MethodName: "UserChainDistribution",
			Handler:    _UserWalletAsset_UserChainDistribution_Handler,
		},
		{
			MethodName: "UserWalletDistribution",
			Handler:    _UserWalletAsset_UserWalletDistribution_Handler,
		},
		{
			MethodName: "UserChainAssetFilter",
			Handler:    _UserWalletAsset_UserChainAssetFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userWalletAsset/v1/userWalletAsset.proto",
}
