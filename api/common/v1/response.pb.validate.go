// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v1/response.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmptyMultiError, or nil if none found.
func (m *Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMultiError(errors)
	}

	return nil
}

// EmptyMultiError is an error wrapping multiple validation errors returned by
// Empty.ValidateAll() if the designated constraints aren't met.
type EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMultiError) AllErrors() []error { return m }

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on BoolResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BoolResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BoolResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BoolResponseMultiError, or
// nil if none found.
func (m *BoolResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BoolResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Response

	if len(errors) > 0 {
		return BoolResponseMultiError(errors)
	}

	return nil
}

// BoolResponseMultiError is an error wrapping multiple validation errors
// returned by BoolResponse.ValidateAll() if the designated constraints aren't met.
type BoolResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BoolResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BoolResponseMultiError) AllErrors() []error { return m }

// BoolResponseValidationError is the validation error returned by
// BoolResponse.Validate if the designated constraints aren't met.
type BoolResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BoolResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BoolResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BoolResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BoolResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BoolResponseValidationError) ErrorName() string { return "BoolResponseValidationError" }

// Error satisfies the builtin error interface
func (e BoolResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBoolResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BoolResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BoolResponseValidationError{}

// Validate checks the field values on IntResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IntResponseMultiError, or
// nil if none found.
func (m *IntResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IntResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Response

	if len(errors) > 0 {
		return IntResponseMultiError(errors)
	}

	return nil
}

// IntResponseMultiError is an error wrapping multiple validation errors
// returned by IntResponse.ValidateAll() if the designated constraints aren't met.
type IntResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntResponseMultiError) AllErrors() []error { return m }

// IntResponseValidationError is the validation error returned by
// IntResponse.Validate if the designated constraints aren't met.
type IntResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntResponseValidationError) ErrorName() string { return "IntResponseValidationError" }

// Error satisfies the builtin error interface
func (e IntResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntResponseValidationError{}

// Validate checks the field values on Int64Response with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int64ResponseMultiError, or
// nil if none found.
func (m *Int64Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Response

	if len(errors) > 0 {
		return Int64ResponseMultiError(errors)
	}

	return nil
}

// Int64ResponseMultiError is an error wrapping multiple validation errors
// returned by Int64Response.ValidateAll() if the designated constraints
// aren't met.
type Int64ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Int64ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Int64ResponseMultiError) AllErrors() []error { return m }

// Int64ResponseValidationError is the validation error returned by
// Int64Response.Validate if the designated constraints aren't met.
type Int64ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64ResponseValidationError) ErrorName() string { return "Int64ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Int64ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64ResponseValidationError{}

// Validate checks the field values on StringResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StringResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StringResponseMultiError,
// or nil if none found.
func (m *StringResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StringResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Response

	if len(errors) > 0 {
		return StringResponseMultiError(errors)
	}

	return nil
}

// StringResponseMultiError is an error wrapping multiple validation errors
// returned by StringResponse.ValidateAll() if the designated constraints
// aren't met.
type StringResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringResponseMultiError) AllErrors() []error { return m }

// StringResponseValidationError is the validation error returned by
// StringResponse.Validate if the designated constraints aren't met.
type StringResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringResponseValidationError) ErrorName() string { return "StringResponseValidationError" }

// Error satisfies the builtin error interface
func (e StringResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringResponseValidationError{}

// Validate checks the field values on RequestId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RequestId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RequestIdMultiError, or nil
// if none found.
func (m *RequestId) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RequestIdMultiError(errors)
	}

	return nil
}

// RequestIdMultiError is an error wrapping multiple validation errors returned
// by RequestId.ValidateAll() if the designated constraints aren't met.
type RequestIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestIdMultiError) AllErrors() []error { return m }

// RequestIdValidationError is the validation error returned by
// RequestId.Validate if the designated constraints aren't met.
type RequestIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestIdValidationError) ErrorName() string { return "RequestIdValidationError" }

// Error satisfies the builtin error interface
func (e RequestIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestIdValidationError{}

// Validate checks the field values on ApiResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiResponseMultiError, or
// nil if none found.
func (m *ApiResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Status

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApiResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApiResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApiResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApiResponseMultiError(errors)
	}

	return nil
}

// ApiResponseMultiError is an error wrapping multiple validation errors
// returned by ApiResponse.ValidateAll() if the designated constraints aren't met.
type ApiResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiResponseMultiError) AllErrors() []error { return m }

// ApiResponseValidationError is the validation error returned by
// ApiResponse.Validate if the designated constraints aren't met.
type ApiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiResponseValidationError) ErrorName() string { return "ApiResponseValidationError" }

// Error satisfies the builtin error interface
func (e ApiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiResponseValidationError{}
