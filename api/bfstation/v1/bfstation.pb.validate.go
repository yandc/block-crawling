// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bfstation/v1/bfstation.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PageListTxnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageListTxnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListTxnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListTxnsRequestMultiError, or nil if none found.
func (m *PageListTxnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListTxnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetChainName()) < 1 {
		err := PageListTxnsRequestValidationError{
			field:  "ChainName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WalletAddress

	// no validation rules for Type

	if m.GetPageNum() < 0 {
		err := PageListTxnsRequestValidationError{
			field:  "PageNum",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 0 {
		err := PageListTxnsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WalletAddressOrUid

	// no validation rules for Status

	if m.GetStartTime() < 0 {
		err := PageListTxnsRequestValidationError{
			field:  "StartTime",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStopTime() < 0 {
		err := PageListTxnsRequestValidationError{
			field:  "StopTime",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FromOBWallet

	if len(errors) > 0 {
		return PageListTxnsRequestMultiError(errors)
	}

	return nil
}

// PageListTxnsRequestMultiError is an error wrapping multiple validation
// errors returned by PageListTxnsRequest.ValidateAll() if the designated
// constraints aren't met.
type PageListTxnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListTxnsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListTxnsRequestMultiError) AllErrors() []error { return m }

// PageListTxnsRequestValidationError is the validation error returned by
// PageListTxnsRequest.Validate if the designated constraints aren't met.
type PageListTxnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListTxnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListTxnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListTxnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListTxnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListTxnsRequestValidationError) ErrorName() string {
	return "PageListTxnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageListTxnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListTxnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListTxnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListTxnsRequestValidationError{}

// Validate checks the field values on PageListTxnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageListTxnsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListTxnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListTxnsResponseMultiError, or nil if none found.
func (m *PageListTxnsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListTxnsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageListTxnsResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageListTxnsResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageListTxnsResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageListTxnsResponseMultiError(errors)
	}

	return nil
}

// PageListTxnsResponseMultiError is an error wrapping multiple validation
// errors returned by PageListTxnsResponse.ValidateAll() if the designated
// constraints aren't met.
type PageListTxnsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListTxnsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListTxnsResponseMultiError) AllErrors() []error { return m }

// PageListTxnsResponseValidationError is the validation error returned by
// PageListTxnsResponse.Validate if the designated constraints aren't met.
type PageListTxnsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListTxnsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListTxnsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListTxnsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListTxnsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListTxnsResponseValidationError) ErrorName() string {
	return "PageListTxnsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PageListTxnsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListTxnsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListTxnsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListTxnsResponseValidationError{}

// Validate checks the field values on BFStationTxRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BFStationTxRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BFStationTxRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BFStationTxRecordMultiError, or nil if none found.
func (m *BFStationTxRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *BFStationTxRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for BlockHash

	// no validation rules for BlockNumber

	// no validation rules for TxTime

	// no validation rules for TransactionHash

	// no validation rules for WalletAddress

	// no validation rules for Type

	// no validation rules for Vault

	// no validation rules for TokenAmountIn

	// no validation rules for TokenAmountOut

	// no validation rules for CoinTypeIn

	// no validation rules for CoinTypeOut

	// no validation rules for ParsedJson

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for WalletUid

	// no validation rules for FeeAmount

	// no validation rules for GasLimit

	// no validation rules for GasUsed

	// no validation rules for FromOBWallet

	// no validation rules for CoinInfoIn

	// no validation rules for CoinInfoOut

	if len(errors) > 0 {
		return BFStationTxRecordMultiError(errors)
	}

	return nil
}

// BFStationTxRecordMultiError is an error wrapping multiple validation errors
// returned by BFStationTxRecord.ValidateAll() if the designated constraints
// aren't met.
type BFStationTxRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BFStationTxRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BFStationTxRecordMultiError) AllErrors() []error { return m }

// BFStationTxRecordValidationError is the validation error returned by
// BFStationTxRecord.Validate if the designated constraints aren't met.
type BFStationTxRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BFStationTxRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BFStationTxRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BFStationTxRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BFStationTxRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BFStationTxRecordValidationError) ErrorName() string {
	return "BFStationTxRecordValidationError"
}

// Error satisfies the builtin error interface
func (e BFStationTxRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBFStationTxRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BFStationTxRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BFStationTxRecordValidationError{}

// Validate checks the field values on PoolHolderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PoolHolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PoolHolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PoolHolderRequestMultiError, or nil if none found.
func (m *PoolHolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PoolHolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetChainName()) < 1 {
		err := PoolHolderRequestValidationError{
			field:  "ChainName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPoolId()) < 1 {
		err := PoolHolderRequestValidationError{
			field:  "PoolId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PoolHolderRequestMultiError(errors)
	}

	return nil
}

// PoolHolderRequestMultiError is an error wrapping multiple validation errors
// returned by PoolHolderRequest.ValidateAll() if the designated constraints
// aren't met.
type PoolHolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PoolHolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PoolHolderRequestMultiError) AllErrors() []error { return m }

// PoolHolderRequestValidationError is the validation error returned by
// PoolHolderRequest.Validate if the designated constraints aren't met.
type PoolHolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PoolHolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PoolHolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PoolHolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PoolHolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PoolHolderRequestValidationError) ErrorName() string {
	return "PoolHolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PoolHolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoolHolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PoolHolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PoolHolderRequestValidationError{}

// Validate checks the field values on TokenHolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TokenHolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenHolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TokenHolderRequestMultiError, or nil if none found.
func (m *TokenHolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenHolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetChainName()) < 1 {
		err := TokenHolderRequestValidationError{
			field:  "ChainName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCoinType()) < 1 {
		err := TokenHolderRequestValidationError{
			field:  "CoinType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TokenHolderRequestMultiError(errors)
	}

	return nil
}

// TokenHolderRequestMultiError is an error wrapping multiple validation errors
// returned by TokenHolderRequest.ValidateAll() if the designated constraints
// aren't met.
type TokenHolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenHolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenHolderRequestMultiError) AllErrors() []error { return m }

// TokenHolderRequestValidationError is the validation error returned by
// TokenHolderRequest.Validate if the designated constraints aren't met.
type TokenHolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenHolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenHolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenHolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenHolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenHolderRequestValidationError) ErrorName() string {
	return "TokenHolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TokenHolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenHolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenHolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenHolderRequestValidationError{}

// Validate checks the field values on CountResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CountResponseMultiError, or
// nil if none found.
func (m *CountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return CountResponseMultiError(errors)
	}

	return nil
}

// CountResponseMultiError is an error wrapping multiple validation errors
// returned by CountResponse.ValidateAll() if the designated constraints
// aren't met.
type CountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountResponseMultiError) AllErrors() []error { return m }

// CountResponseValidationError is the validation error returned by
// CountResponse.Validate if the designated constraints aren't met.
type CountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountResponseValidationError) ErrorName() string { return "CountResponseValidationError" }

// Error satisfies the builtin error interface
func (e CountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountResponseValidationError{}

// Validate checks the field values on PageListFeesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageListFeesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListFeesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListFeesRequestMultiError, or nil if none found.
func (m *PageListFeesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListFeesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetChainName()) < 1 {
		err := PageListFeesRequestValidationError{
			field:  "ChainName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPoolId()) < 1 {
		err := PageListFeesRequestValidationError{
			field:  "PoolId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageNum() < 0 {
		err := PageListFeesRequestValidationError{
			field:  "PageNum",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 0 {
		err := PageListFeesRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStartTime() < 0 {
		err := PageListFeesRequestValidationError{
			field:  "StartTime",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStopTime() < 0 {
		err := PageListFeesRequestValidationError{
			field:  "StopTime",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PageListFeesRequestMultiError(errors)
	}

	return nil
}

// PageListFeesRequestMultiError is an error wrapping multiple validation
// errors returned by PageListFeesRequest.ValidateAll() if the designated
// constraints aren't met.
type PageListFeesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListFeesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListFeesRequestMultiError) AllErrors() []error { return m }

// PageListFeesRequestValidationError is the validation error returned by
// PageListFeesRequest.Validate if the designated constraints aren't met.
type PageListFeesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListFeesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListFeesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListFeesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListFeesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListFeesRequestValidationError) ErrorName() string {
	return "PageListFeesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageListFeesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListFeesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListFeesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListFeesRequestValidationError{}

// Validate checks the field values on PageListFeesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageListFeesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListFeesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListFeesResponseMultiError, or nil if none found.
func (m *PageListFeesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListFeesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageListFeesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageListFeesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageListFeesResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageListFeesResponseMultiError(errors)
	}

	return nil
}

// PageListFeesResponseMultiError is an error wrapping multiple validation
// errors returned by PageListFeesResponse.ValidateAll() if the designated
// constraints aren't met.
type PageListFeesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListFeesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListFeesResponseMultiError) AllErrors() []error { return m }

// PageListFeesResponseValidationError is the validation error returned by
// PageListFeesResponse.Validate if the designated constraints aren't met.
type PageListFeesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListFeesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListFeesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListFeesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListFeesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListFeesResponseValidationError) ErrorName() string {
	return "PageListFeesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PageListFeesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListFeesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListFeesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListFeesResponseValidationError{}

// Validate checks the field values on BFStationCollectFeeRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BFStationCollectFeeRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BFStationCollectFeeRecord with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BFStationCollectFeeRecordMultiError, or nil if none found.
func (m *BFStationCollectFeeRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *BFStationCollectFeeRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TransactionHash

	// no validation rules for TxTime

	// no validation rules for WalletAddress

	// no validation rules for PoolId

	// no validation rules for PositionId

	// no validation rules for AmountA

	// no validation rules for AmountB

	// no validation rules for CoinTypeA

	// no validation rules for CoinTypeB

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return BFStationCollectFeeRecordMultiError(errors)
	}

	return nil
}

// BFStationCollectFeeRecordMultiError is an error wrapping multiple validation
// errors returned by BFStationCollectFeeRecord.ValidateAll() if the
// designated constraints aren't met.
type BFStationCollectFeeRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BFStationCollectFeeRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BFStationCollectFeeRecordMultiError) AllErrors() []error { return m }

// BFStationCollectFeeRecordValidationError is the validation error returned by
// BFStationCollectFeeRecord.Validate if the designated constraints aren't met.
type BFStationCollectFeeRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BFStationCollectFeeRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BFStationCollectFeeRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BFStationCollectFeeRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BFStationCollectFeeRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BFStationCollectFeeRecordValidationError) ErrorName() string {
	return "BFStationCollectFeeRecordValidationError"
}

// Error satisfies the builtin error interface
func (e BFStationCollectFeeRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBFStationCollectFeeRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BFStationCollectFeeRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BFStationCollectFeeRecordValidationError{}
