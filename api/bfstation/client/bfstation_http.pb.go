// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.12
// source: bfstation/client/bfstation.proto

package common

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBFStationGetPageListTxns = "/api.common.BFStation/GetPageListTxns"

type BFStationHTTPServer interface {
	GetPageListTxns(context.Context, *GetPageListTxnsRequest) (*GetPageListTxnsReply, error)
}

func RegisterBFStationHTTPServer(s *http.Server, srv BFStationHTTPServer) {
	r := s.Route("/")
	r.GET("/api/bfstation/common/list_txns", _BFStation_GetPageListTxns0_HTTP_Handler(srv))
}

func _BFStation_GetPageListTxns0_HTTP_Handler(srv BFStationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPageListTxnsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBFStationGetPageListTxns)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageListTxns(ctx, req.(*GetPageListTxnsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPageListTxnsReply)
		return ctx.Result(200, reply)
	}
}

type BFStationHTTPClient interface {
	GetPageListTxns(ctx context.Context, req *GetPageListTxnsRequest, opts ...http.CallOption) (rsp *GetPageListTxnsReply, err error)
}

type BFStationHTTPClientImpl struct {
	cc *http.Client
}

func NewBFStationHTTPClient(client *http.Client) BFStationHTTPClient {
	return &BFStationHTTPClientImpl{client}
}

func (c *BFStationHTTPClientImpl) GetPageListTxns(ctx context.Context, in *GetPageListTxnsRequest, opts ...http.CallOption) (*GetPageListTxnsReply, error) {
	var out GetPageListTxnsReply
	pattern := "/api/bfstation/common/list_txns"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBFStationGetPageListTxns))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
