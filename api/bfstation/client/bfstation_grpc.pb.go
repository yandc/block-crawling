// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: bfstation/client/bfstation.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BFStationClient is the client API for BFStation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BFStationClient interface {
	GetPageListTxns(ctx context.Context, in *GetPageListTxnsRequest, opts ...grpc.CallOption) (*GetPageListTxnsReply, error)
	SyncSwapEvent(ctx context.Context, in *SyncSwapEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SyncLiquidityEvent(ctx context.Context, in *SyncLiquidityEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bFStationClient struct {
	cc grpc.ClientConnInterface
}

func NewBFStationClient(cc grpc.ClientConnInterface) BFStationClient {
	return &bFStationClient{cc}
}

func (c *bFStationClient) GetPageListTxns(ctx context.Context, in *GetPageListTxnsRequest, opts ...grpc.CallOption) (*GetPageListTxnsReply, error) {
	out := new(GetPageListTxnsReply)
	err := c.cc.Invoke(ctx, "/api.common.BFStation/GetPageListTxns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFStationClient) SyncSwapEvent(ctx context.Context, in *SyncSwapEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.common.BFStation/SyncSwapEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFStationClient) SyncLiquidityEvent(ctx context.Context, in *SyncLiquidityEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.common.BFStation/SyncLiquidityEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BFStationServer is the server API for BFStation service.
// All implementations must embed UnimplementedBFStationServer
// for forward compatibility
type BFStationServer interface {
	GetPageListTxns(context.Context, *GetPageListTxnsRequest) (*GetPageListTxnsReply, error)
	SyncSwapEvent(context.Context, *SyncSwapEventRequest) (*emptypb.Empty, error)
	SyncLiquidityEvent(context.Context, *SyncLiquidityEventRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBFStationServer()
}

// UnimplementedBFStationServer must be embedded to have forward compatible implementations.
type UnimplementedBFStationServer struct {
}

func (UnimplementedBFStationServer) GetPageListTxns(context.Context, *GetPageListTxnsRequest) (*GetPageListTxnsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageListTxns not implemented")
}
func (UnimplementedBFStationServer) SyncSwapEvent(context.Context, *SyncSwapEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncSwapEvent not implemented")
}
func (UnimplementedBFStationServer) SyncLiquidityEvent(context.Context, *SyncLiquidityEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncLiquidityEvent not implemented")
}
func (UnimplementedBFStationServer) mustEmbedUnimplementedBFStationServer() {}

// UnsafeBFStationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BFStationServer will
// result in compilation errors.
type UnsafeBFStationServer interface {
	mustEmbedUnimplementedBFStationServer()
}

func RegisterBFStationServer(s grpc.ServiceRegistrar, srv BFStationServer) {
	s.RegisterService(&BFStation_ServiceDesc, srv)
}

func _BFStation_GetPageListTxns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPageListTxnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFStationServer).GetPageListTxns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.common.BFStation/GetPageListTxns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFStationServer).GetPageListTxns(ctx, req.(*GetPageListTxnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFStation_SyncSwapEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncSwapEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFStationServer).SyncSwapEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.common.BFStation/SyncSwapEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFStationServer).SyncSwapEvent(ctx, req.(*SyncSwapEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFStation_SyncLiquidityEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncLiquidityEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFStationServer).SyncLiquidityEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.common.BFStation/SyncLiquidityEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFStationServer).SyncLiquidityEvent(ctx, req.(*SyncLiquidityEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BFStation_ServiceDesc is the grpc.ServiceDesc for BFStation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BFStation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.common.BFStation",
	HandlerType: (*BFStationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageListTxns",
			Handler:    _BFStation_GetPageListTxns_Handler,
		},
		{
			MethodName: "SyncSwapEvent",
			Handler:    _BFStation_SyncSwapEvent_Handler,
		},
		{
			MethodName: "SyncLiquidityEvent",
			Handler:    _BFStation_SyncLiquidityEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bfstation/client/bfstation.proto",
}
