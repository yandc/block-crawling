// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bfstation/client/bfstation.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListTxnsInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTxnsInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTxnsInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListTxnsInfoMultiError, or
// nil if none found.
func (m *ListTxnsInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTxnsInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTxnsInfoValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTxnsInfoValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTxnsInfoValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTxnsInfoMultiError(errors)
	}

	return nil
}

// ListTxnsInfoMultiError is an error wrapping multiple validation errors
// returned by ListTxnsInfo.ValidateAll() if the designated constraints aren't met.
type ListTxnsInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTxnsInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTxnsInfoMultiError) AllErrors() []error { return m }

// ListTxnsInfoValidationError is the validation error returned by
// ListTxnsInfo.Validate if the designated constraints aren't met.
type ListTxnsInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTxnsInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTxnsInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTxnsInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTxnsInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTxnsInfoValidationError) ErrorName() string { return "ListTxnsInfoValidationError" }

// Error satisfies the builtin error interface
func (e ListTxnsInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTxnsInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTxnsInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTxnsInfoValidationError{}

// Validate checks the field values on GetPageListTxnsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPageListTxnsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPageListTxnsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPageListTxnsReplyMultiError, or nil if none found.
func (m *GetPageListTxnsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPageListTxnsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPageListTxnsReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPageListTxnsReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPageListTxnsReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPageListTxnsReplyMultiError(errors)
	}

	return nil
}

// GetPageListTxnsReplyMultiError is an error wrapping multiple validation
// errors returned by GetPageListTxnsReply.ValidateAll() if the designated
// constraints aren't met.
type GetPageListTxnsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPageListTxnsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPageListTxnsReplyMultiError) AllErrors() []error { return m }

// GetPageListTxnsReplyValidationError is the validation error returned by
// GetPageListTxnsReply.Validate if the designated constraints aren't met.
type GetPageListTxnsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPageListTxnsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPageListTxnsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPageListTxnsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPageListTxnsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPageListTxnsReplyValidationError) ErrorName() string {
	return "GetPageListTxnsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPageListTxnsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPageListTxnsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPageListTxnsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPageListTxnsReplyValidationError{}

// Validate checks the field values on GetPageListTxnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPageListTxnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPageListTxnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPageListTxnsRequestMultiError, or nil if none found.
func (m *GetPageListTxnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPageListTxnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WalletAddress

	// no validation rules for Type

	if m.GetPageNum() < 0 {
		err := GetPageListTxnsRequestValidationError{
			field:  "PageNum",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 0 {
		err := GetPageListTxnsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPageListTxnsRequestMultiError(errors)
	}

	return nil
}

// GetPageListTxnsRequestMultiError is an error wrapping multiple validation
// errors returned by GetPageListTxnsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPageListTxnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPageListTxnsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPageListTxnsRequestMultiError) AllErrors() []error { return m }

// GetPageListTxnsRequestValidationError is the validation error returned by
// GetPageListTxnsRequest.Validate if the designated constraints aren't met.
type GetPageListTxnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPageListTxnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPageListTxnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPageListTxnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPageListTxnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPageListTxnsRequestValidationError) ErrorName() string {
	return "GetPageListTxnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPageListTxnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPageListTxnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPageListTxnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPageListTxnsRequestValidationError{}

// Validate checks the field values on SyncSwapEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SyncSwapEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncSwapEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncSwapEventRequestMultiError, or nil if none found.
func (m *SyncSwapEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncSwapEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolID

	// no validation rules for A2B

	// no validation rules for SenderAddress

	// no validation rules for CoinTypeA

	// no validation rules for CoinTypeB

	// no validation rules for AmountIn

	// no validation rules for AmountOut

	// no validation rules for FeeAmount

	// no validation rules for BeforeSqrtPrice

	// no validation rules for AfterSqrtPrice

	if len(errors) > 0 {
		return SyncSwapEventRequestMultiError(errors)
	}

	return nil
}

// SyncSwapEventRequestMultiError is an error wrapping multiple validation
// errors returned by SyncSwapEventRequest.ValidateAll() if the designated
// constraints aren't met.
type SyncSwapEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncSwapEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncSwapEventRequestMultiError) AllErrors() []error { return m }

// SyncSwapEventRequestValidationError is the validation error returned by
// SyncSwapEventRequest.Validate if the designated constraints aren't met.
type SyncSwapEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncSwapEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncSwapEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncSwapEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncSwapEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncSwapEventRequestValidationError) ErrorName() string {
	return "SyncSwapEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SyncSwapEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncSwapEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncSwapEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncSwapEventRequestValidationError{}

// Validate checks the field values on SyncLiquidityEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SyncLiquidityEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncLiquidityEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncLiquidityEventRequestMultiError, or nil if none found.
func (m *SyncLiquidityEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncLiquidityEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolID

	// no validation rules for PositionID

	// no validation rules for SenderAddress

	// no validation rules for CoinTypeA

	// no validation rules for CoinTypeB

	// no validation rules for DeltaLiquidity

	// no validation rules for BeforePositioinLiquidity

	// no validation rules for BeforePoolLiquidity

	// no validation rules for AfterPositionLiquidity

	// no validation rules for AfterPoolLiquidity

	// no validation rules for AmountA

	// no validation rules for AmountB

	// no validation rules for Action

	if len(errors) > 0 {
		return SyncLiquidityEventRequestMultiError(errors)
	}

	return nil
}

// SyncLiquidityEventRequestMultiError is an error wrapping multiple validation
// errors returned by SyncLiquidityEventRequest.ValidateAll() if the
// designated constraints aren't met.
type SyncLiquidityEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncLiquidityEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncLiquidityEventRequestMultiError) AllErrors() []error { return m }

// SyncLiquidityEventRequestValidationError is the validation error returned by
// SyncLiquidityEventRequest.Validate if the designated constraints aren't met.
type SyncLiquidityEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncLiquidityEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncLiquidityEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncLiquidityEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncLiquidityEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncLiquidityEventRequestValidationError) ErrorName() string {
	return "SyncLiquidityEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SyncLiquidityEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncLiquidityEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncLiquidityEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncLiquidityEventRequestValidationError{}
