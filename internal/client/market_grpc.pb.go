// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: transaction/v1/market.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketClient is the client API for Market service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketClient interface {
	DescribeHotCoins(ctx context.Context, in *DescribeHotCoinsRequest, opts ...grpc.CallOption) (*DescribeHotCoinsReply, error)
	DescribeHotCoinsV2(ctx context.Context, in *DescribeHotCoinsRequest, opts ...grpc.CallOption) (*DescribeHotCoinsV2Reply, error)
	CreateHotCoin(ctx context.Context, in *CreateHotCoinRequest, opts ...grpc.CallOption) (*CreateHotCoinReply, error)
	DeleteHotCoin(ctx context.Context, in *DeleteHotCoinRequest, opts ...grpc.CallOption) (*DeleteHotCoinReply, error)
	ModifyHotCoin(ctx context.Context, in *ModifyHotCoinRequest, opts ...grpc.CallOption) (*ModifyHotCoinReply, error)
	CreatePairTrend(ctx context.Context, in *CreatePairTrendRequest, opts ...grpc.CallOption) (*CreatePairTrendReply, error)
	ModifyPairTrend(ctx context.Context, in *ModifyPairTrendRequest, opts ...grpc.CallOption) (*ModifyPairTrendReply, error)
	DeletePairTrend(ctx context.Context, in *DeletePairTrendRequest, opts ...grpc.CallOption) (*DeletePairTrendReply, error)
	DescribeChainsSupport(ctx context.Context, in *DescribeChainsSupportRequest, opts ...grpc.CallOption) (*DescribeChainsSupportReply, error)
	DescribeAlerts(ctx context.Context, in *DescribeAlertsRequest, opts ...grpc.CallOption) (*DescribeAlertsReply, error)
	CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertReply, error)
	ModifyAlert(ctx context.Context, in *ModifyAlertRequest, opts ...grpc.CallOption) (*ModifyAlertReply, error)
	RemoveAlert(ctx context.Context, in *RemoveAlertRequest, opts ...grpc.CallOption) (*RemoveAlertReply, error)
	DescribeCollectionGuideList(ctx context.Context, in *DescribeCollectionGuideListRequest, opts ...grpc.CallOption) (*DescribeCollectionGuideListReply, error)
	DescribeCollectionGuides(ctx context.Context, in *DescribeCollectionGuidesRequest, opts ...grpc.CallOption) (*DescribeCollectionGuidesReply, error)
	DescribeCoinSwaps(ctx context.Context, in *DescribeCoinSwapsRequest, opts ...grpc.CallOption) (*DescribeCoinSwapsReply, error)
	DescribePairSwaps(ctx context.Context, in *DescribePairSwapsRequest, opts ...grpc.CallOption) (*DescribeCoinSwapsReply, error)
	DescribeCoinLiquidity(ctx context.Context, in *DescribeCoinLiquidityRequest, opts ...grpc.CallOption) (*DescribeCoinLiquidityReply, error)
	DescribeCoinSwapStats(ctx context.Context, in *DescribeCoinSwapStatsRequest, opts ...grpc.CallOption) (*DescribeCoinSwapStatsReply, error)
	DescribeCoinPriceChart(ctx context.Context, in *DescribeCoinPriceChartRequest, opts ...grpc.CallOption) (*DescribeCoinPriceChartReply, error)
	DescribeCoinPriceByRange(ctx context.Context, in *DescribeCoinPriceByRangeRequest, opts ...grpc.CallOption) (*DescribeCoinPriceByRangeReply, error)
	DescribeCoinPriceByTimestamp(ctx context.Context, in *DescribeCoinPriceByTimestampRequest, opts ...grpc.CallOption) (*DescribeCoinPriceByTimestampReply, error)
	DescribeCexCoins(ctx context.Context, in *DescribeCexCoinsRequest, opts ...grpc.CallOption) (*DescribeCexCoinsReply, error)
	DescribeAllExtraDetail(ctx context.Context, in *DescribeAllExtraDetailRequest, opts ...grpc.CallOption) (*DescribeAllExtraDetailReply, error)
	DescribeMarketExtraDetail(ctx context.Context, in *DescribeMarketExtraDetailRequest, opts ...grpc.CallOption) (*DescribeMarketExtraDetailReply, error)
	DescribeMenuCategory(ctx context.Context, in *DescribeMenuCategoryRequest, opts ...grpc.CallOption) (*DescribeMenuCategoryReply, error)
	ModifyMenuCategory(ctx context.Context, in *ModifyMenuCategoryRequest, opts ...grpc.CallOption) (*ModifyMenuCategoryReply, error)
	DescribeCategoryList(ctx context.Context, in *DescribeCategoryListRequest, opts ...grpc.CallOption) (*DescribeCategoryListReply, error)
	ModifyCoinDescription(ctx context.Context, in *ModifyCoinDescriptionRequest, opts ...grpc.CallOption) (*ModifyCoinDescriptionReply, error)
	ModifyCoinCategory(ctx context.Context, in *ModifyCoinCategoryRequest, opts ...grpc.CallOption) (*ModifyCoinCategoryReply, error)
	DescribeColumnList(ctx context.Context, in *DescribeColumnListRequest, opts ...grpc.CallOption) (*DescribeColumnListReply, error)
	CreateColumn(ctx context.Context, in *CreateColumnRequest, opts ...grpc.CallOption) (*CreateColumnReply, error)
	RemoveColumn(ctx context.Context, in *RemoveColumnRequest, opts ...grpc.CallOption) (*RemoveColumnReply, error)
	ModifyColumn(ctx context.Context, in *ModifyColumnRequest, opts ...grpc.CallOption) (*ModifyColumnReply, error)
	CreateCoinCategory(ctx context.Context, in *CreateCoinCategoryRequest, opts ...grpc.CallOption) (*CreateCoinCategoryReply, error)
	DescribeCoinUserChart(ctx context.Context, in *DescribeCoinUserChartRequest, opts ...grpc.CallOption) (*DescribeCoinUserChartReply, error)
	DescribeCoinOrderChart(ctx context.Context, in *DescribeCoinOrderChartRequest, opts ...grpc.CallOption) (*DescribeCoinOrderChartReply, error)
	DescribeCoinVolumeChart(ctx context.Context, in *DescribeCoinVolumeChartRequest, opts ...grpc.CallOption) (*DescribeCoinVolumeChartReply, error)
	DescribeCoinLiquidityChart(ctx context.Context, in *DescribeCoinLiquidityChartRequest, opts ...grpc.CallOption) (*DescribeCoinLiquidityChartReply, error)
	DescribeDeFiCoins(ctx context.Context, in *DescribeDeFiCoinsRequest, opts ...grpc.CallOption) (*DescribeDeFiCoinsReply, error)
	DescribeCoinSimples(ctx context.Context, in *DescribeCoinSimplesRequest, opts ...grpc.CallOption) (*DescribeCoinSimplesReply, error)
	SearchCoins(ctx context.Context, in *SearchCoinsRequest, opts ...grpc.CallOption) (*SearchCoinsReply, error)
	DescribeTokens(ctx context.Context, in *DescribeTokensRequest, opts ...grpc.CallOption) (*DescribeTokensReply, error)
	DescribeGuruChains(ctx context.Context, in *DescribeGuruChainsRequest, opts ...grpc.CallOption) (*DescribeGuruChainsReply, error)
	DescribeSwapConfig(ctx context.Context, in *DescribeSwapConfigRequest, opts ...grpc.CallOption) (*DescribeSwapConfigReply, error)
	DescribeCoinsByFields(ctx context.Context, in *DescribeCoinsByFieldsRequest, opts ...grpc.CallOption) (*DescribeCoinsByFieldsReply, error)
	DescribeTokensByFields(ctx context.Context, in *DescribeTokensByFieldsRequest, opts ...grpc.CallOption) (*DescribeTokensByFieldsReply, error)
	DescribePriceByCoinAddress(ctx context.Context, in *DescribePriceByCoinAddressRequest, opts ...grpc.CallOption) (*DescribePriceByCoinAddressReply, error)
	DescribeCoinIDByTokens(ctx context.Context, in *DescribeCoinIDByTokensRequest, opts ...grpc.CallOption) (*DescribeCoinIDByTokensReply, error)
	CreateCoinGuide(ctx context.Context, in *CreateCoinGuideRequest, opts ...grpc.CallOption) (*CreateCoinGuideReply, error)
	DeleteCoinGuide(ctx context.Context, in *DeleteCoinGuideRequest, opts ...grpc.CallOption) (*DeleteCoinGuideReply, error)
	ModifyCoinGuide(ctx context.Context, in *ModifyCoinGuideRequest, opts ...grpc.CallOption) (*ModifyCoinGuideReply, error)
	DescribeWhiteTokens(ctx context.Context, in *DescribeWhiteTokensRequest, opts ...grpc.CallOption) (*DescribeWhiteTokensReply, error)
	CreateChain(ctx context.Context, in *CreateChainRequest, opts ...grpc.CallOption) (*CreateChainReply, error)
	ModifyChain(ctx context.Context, in *ModifyChainRequest, opts ...grpc.CallOption) (*NoneReply, error)
	DeleteChain(ctx context.Context, in *DeleteChainRequest, opts ...grpc.CallOption) (*NoneReply, error)
	CreateChainRelation(ctx context.Context, in *CreateChainRelationRequest, opts ...grpc.CallOption) (*NoneReply, error)
	DeleteChainRelation(ctx context.Context, in *DeleteChainRelationRequest, opts ...grpc.CallOption) (*NoneReply, error)
	CheckCoins(ctx context.Context, in *CheckCoinsRequest, opts ...grpc.CallOption) (*CheckCoinsReply, error)
	DescribeDex(ctx context.Context, in *DescribeDexRequest, opts ...grpc.CallOption) (*DescribeDexReply, error)
	DescribePairs(ctx context.Context, in *DescribePairsRequest, opts ...grpc.CallOption) (*DescribePairsReply, error)
	DescribePairBatch(ctx context.Context, in *DescribePairBatchRequest, opts ...grpc.CallOption) (*DescribePairBatchReply, error)
	DescribePair(ctx context.Context, in *DescribePairRequest, opts ...grpc.CallOption) (*DescribePairReply, error)
	DescribePairTrends(ctx context.Context, in *DescribePairTrendsRequest, opts ...grpc.CallOption) (*DescribePairTrendsReply, error)
	DescribePairTrendsV2(ctx context.Context, in *DescribePairTrendsV2Request, opts ...grpc.CallOption) (*DescribePairTrendsV2Reply, error)
	SearchCoinAndPair(ctx context.Context, in *SearchCoinAndPairRequest, opts ...grpc.CallOption) (*SearchCoinAndPairReply, error)
	AddCollection(ctx context.Context, in *AddCollectionRequest, opts ...grpc.CallOption) (*AddCollectionReply, error)
	RemoveCollection(ctx context.Context, in *RemoveCollectionRequest, opts ...grpc.CallOption) (*RemoveCollectionReply, error)
	DescribeCollections(ctx context.Context, in *DescribeCollectionsRequest, opts ...grpc.CallOption) (*DescribeCollectionsReply, error)
	CreateDex(ctx context.Context, in *CreateDexRequest, opts ...grpc.CallOption) (*CreateDexReply, error)
	ModifyDex(ctx context.Context, in *ModifyDexRequest, opts ...grpc.CallOption) (*NoneReply, error)
	DeleteDex(ctx context.Context, in *DeleteDexRequest, opts ...grpc.CallOption) (*NoneReply, error)
	DescribeRate(ctx context.Context, in *DescribeRateRequest, opts ...grpc.CallOption) (*DescribeRateReply, error)
	DescribePairGuides(ctx context.Context, in *DescribePairGuidesRequest, opts ...grpc.CallOption) (*DescribePairGuidesReply, error)
	DescribeCoinKLine(ctx context.Context, in *DescribeCoinKLineRequest, opts ...grpc.CallOption) (*DescribeCoinKLineReply, error)
	DescribePairKLine(ctx context.Context, in *DescribePairKLineRequest, opts ...grpc.CallOption) (*DescribeCoinKLineReply, error)
	DescribePairScanSite(ctx context.Context, in *DescribePairScanSiteRequest, opts ...grpc.CallOption) (*DescribePairScanSiteReply, error)
	CreatePairGuide(ctx context.Context, in *CreatePairGuideRequest, opts ...grpc.CallOption) (*CreatePairGuideReply, error)
	DeletePairGuide(ctx context.Context, in *DeletePairGuideRequest, opts ...grpc.CallOption) (*NoneReply, error)
	ModifyPairGuide(ctx context.Context, in *ModifyPairGuideRequest, opts ...grpc.CallOption) (*NoneReply, error)
	DescribeCoinsByChain(ctx context.Context, in *DescribeCoinsByChainRequest, opts ...grpc.CallOption) (*DescribeCoinsByChainReply, error)
	DescribePairByCoins(ctx context.Context, in *DescribePairByCoinsRequest, opts ...grpc.CallOption) (*DescribePairByCoinsReply, error)
	// 根据 Coin ID 直接查询 coin_info 数据库，并返回全部信息
	DescribeCoinInfoByID(ctx context.Context, in *DescribeCoinInfoByIDRequest, opts ...grpc.CallOption) (*DescribeCoinInfoByIDReply, error)
	// TopToken 需求专用接口, 服务于相对应的磐石管理后台
	// 需求文档: https://tk3en79uf0.larksuite.com/docx/JEvRdf949orMQPxIXoVuFEpIsYd?chunked=false#CDRcdsOvsoc9CRxPIZduve0KsBc
	DescribeTopTokenList(ctx context.Context, in *DescribeTopTokenListRequest, opts ...grpc.CallOption) (*DescribeTopTokenListReply, error)
	CreateTopToken(ctx context.Context, in *CreateTopTokenRequest, opts ...grpc.CallOption) (*CreateTopTokenReply, error)
	ModifyTopToken(ctx context.Context, in *ModifyTopTokenRequest, opts ...grpc.CallOption) (*ModifyTopTokenReply, error)
	DeleteTopToken(ctx context.Context, in *DeleteTopTokenRequest, opts ...grpc.CallOption) (*DeleteTopTokenReply, error)
	// 代币板块管理
	// 需求文档: https://tk3en79uf0.larksuite.com/docx/JEvRdf949orMQPxIXoVuFEpIsYd?chunked=false#CDRcdsOvsoc9CRxPIZduve0KsBc
	DescribeRecommandTokenSectionList(ctx context.Context, in *DescribeRecommandTokenSectionListRequest, opts ...grpc.CallOption) (*DescribeRecommandTokenSectionListReply, error)
	CreateRecommandTokenSection(ctx context.Context, in *CreateRecommandTokenSectionRequest, opts ...grpc.CallOption) (*CreateRecommandTokenSectionReply, error)
	ModifyRecommandTokenSection(ctx context.Context, in *ModifyRecommandTokenSectionRequest, opts ...grpc.CallOption) (*ModifyRecommandTokenSectionReply, error)
	DeleteRecommandTokenSection(ctx context.Context, in *DeleteRecommandTokenSectionRequest, opts ...grpc.CallOption) (*DeleteRecommandTokenSectionReply, error)
	DescribePriceDeltaMsg(ctx context.Context, in *DescribePriceDeltaMsgRequest, opts ...grpc.CallOption) (*DescribePriceDeltaMsgReply, error)
	// 获取TBird资讯
	DescribeTBirdNews(ctx context.Context, in *DescribeTBirdNewsRequest, opts ...grpc.CallOption) (*DescribeTBirdNewsReply, error)
	DescribeChainSummary(ctx context.Context, in *DescribeChainSummaryRequest, opts ...grpc.CallOption) (*DescribeChainSummaryReply, error)
	CreateTerminalPairOHLCV(ctx context.Context, in *CreateTerminalPairOHLCVRequest, opts ...grpc.CallOption) (*NoneReply, error)
	DeleteTerminalPairOHLCV(ctx context.Context, in *DeleteTerminalPairOHLCVRequest, opts ...grpc.CallOption) (*NoneReply, error)
	DescribeCollectionCombines(ctx context.Context, in *DescribeCollectionCombinesRequest, opts ...grpc.CallOption) (*DescribeCollectionCombinesReply, error)
	DescribeTopPairByCoin(ctx context.Context, in *DescribeTopPairByCoinRequest, opts ...grpc.CallOption) (*DescribeTopPairByCoinReply, error)
}

type marketClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketClient(cc grpc.ClientConnInterface) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) DescribeHotCoins(ctx context.Context, in *DescribeHotCoinsRequest, opts ...grpc.CallOption) (*DescribeHotCoinsReply, error) {
	out := new(DescribeHotCoinsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeHotCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeHotCoinsV2(ctx context.Context, in *DescribeHotCoinsRequest, opts ...grpc.CallOption) (*DescribeHotCoinsV2Reply, error) {
	out := new(DescribeHotCoinsV2Reply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeHotCoinsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateHotCoin(ctx context.Context, in *CreateHotCoinRequest, opts ...grpc.CallOption) (*CreateHotCoinReply, error) {
	out := new(CreateHotCoinReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CreateHotCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DeleteHotCoin(ctx context.Context, in *DeleteHotCoinRequest, opts ...grpc.CallOption) (*DeleteHotCoinReply, error) {
	out := new(DeleteHotCoinReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DeleteHotCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyHotCoin(ctx context.Context, in *ModifyHotCoinRequest, opts ...grpc.CallOption) (*ModifyHotCoinReply, error) {
	out := new(ModifyHotCoinReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyHotCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreatePairTrend(ctx context.Context, in *CreatePairTrendRequest, opts ...grpc.CallOption) (*CreatePairTrendReply, error) {
	out := new(CreatePairTrendReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CreatePairTrend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyPairTrend(ctx context.Context, in *ModifyPairTrendRequest, opts ...grpc.CallOption) (*ModifyPairTrendReply, error) {
	out := new(ModifyPairTrendReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyPairTrend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DeletePairTrend(ctx context.Context, in *DeletePairTrendRequest, opts ...grpc.CallOption) (*DeletePairTrendReply, error) {
	out := new(DeletePairTrendReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DeletePairTrend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeChainsSupport(ctx context.Context, in *DescribeChainsSupportRequest, opts ...grpc.CallOption) (*DescribeChainsSupportReply, error) {
	out := new(DescribeChainsSupportReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeChainsSupport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeAlerts(ctx context.Context, in *DescribeAlertsRequest, opts ...grpc.CallOption) (*DescribeAlertsReply, error) {
	out := new(DescribeAlertsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertReply, error) {
	out := new(CreateAlertReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CreateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyAlert(ctx context.Context, in *ModifyAlertRequest, opts ...grpc.CallOption) (*ModifyAlertReply, error) {
	out := new(ModifyAlertReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) RemoveAlert(ctx context.Context, in *RemoveAlertRequest, opts ...grpc.CallOption) (*RemoveAlertReply, error) {
	out := new(RemoveAlertReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/RemoveAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCollectionGuideList(ctx context.Context, in *DescribeCollectionGuideListRequest, opts ...grpc.CallOption) (*DescribeCollectionGuideListReply, error) {
	out := new(DescribeCollectionGuideListReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCollectionGuideList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCollectionGuides(ctx context.Context, in *DescribeCollectionGuidesRequest, opts ...grpc.CallOption) (*DescribeCollectionGuidesReply, error) {
	out := new(DescribeCollectionGuidesReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCollectionGuides", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinSwaps(ctx context.Context, in *DescribeCoinSwapsRequest, opts ...grpc.CallOption) (*DescribeCoinSwapsReply, error) {
	out := new(DescribeCoinSwapsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinSwaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribePairSwaps(ctx context.Context, in *DescribePairSwapsRequest, opts ...grpc.CallOption) (*DescribeCoinSwapsReply, error) {
	out := new(DescribeCoinSwapsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribePairSwaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinLiquidity(ctx context.Context, in *DescribeCoinLiquidityRequest, opts ...grpc.CallOption) (*DescribeCoinLiquidityReply, error) {
	out := new(DescribeCoinLiquidityReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinSwapStats(ctx context.Context, in *DescribeCoinSwapStatsRequest, opts ...grpc.CallOption) (*DescribeCoinSwapStatsReply, error) {
	out := new(DescribeCoinSwapStatsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinSwapStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinPriceChart(ctx context.Context, in *DescribeCoinPriceChartRequest, opts ...grpc.CallOption) (*DescribeCoinPriceChartReply, error) {
	out := new(DescribeCoinPriceChartReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinPriceChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinPriceByRange(ctx context.Context, in *DescribeCoinPriceByRangeRequest, opts ...grpc.CallOption) (*DescribeCoinPriceByRangeReply, error) {
	out := new(DescribeCoinPriceByRangeReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinPriceByRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinPriceByTimestamp(ctx context.Context, in *DescribeCoinPriceByTimestampRequest, opts ...grpc.CallOption) (*DescribeCoinPriceByTimestampReply, error) {
	out := new(DescribeCoinPriceByTimestampReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinPriceByTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCexCoins(ctx context.Context, in *DescribeCexCoinsRequest, opts ...grpc.CallOption) (*DescribeCexCoinsReply, error) {
	out := new(DescribeCexCoinsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCexCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeAllExtraDetail(ctx context.Context, in *DescribeAllExtraDetailRequest, opts ...grpc.CallOption) (*DescribeAllExtraDetailReply, error) {
	out := new(DescribeAllExtraDetailReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeAllExtraDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeMarketExtraDetail(ctx context.Context, in *DescribeMarketExtraDetailRequest, opts ...grpc.CallOption) (*DescribeMarketExtraDetailReply, error) {
	out := new(DescribeMarketExtraDetailReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeMarketExtraDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeMenuCategory(ctx context.Context, in *DescribeMenuCategoryRequest, opts ...grpc.CallOption) (*DescribeMenuCategoryReply, error) {
	out := new(DescribeMenuCategoryReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeMenuCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyMenuCategory(ctx context.Context, in *ModifyMenuCategoryRequest, opts ...grpc.CallOption) (*ModifyMenuCategoryReply, error) {
	out := new(ModifyMenuCategoryReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyMenuCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCategoryList(ctx context.Context, in *DescribeCategoryListRequest, opts ...grpc.CallOption) (*DescribeCategoryListReply, error) {
	out := new(DescribeCategoryListReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyCoinDescription(ctx context.Context, in *ModifyCoinDescriptionRequest, opts ...grpc.CallOption) (*ModifyCoinDescriptionReply, error) {
	out := new(ModifyCoinDescriptionReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyCoinDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyCoinCategory(ctx context.Context, in *ModifyCoinCategoryRequest, opts ...grpc.CallOption) (*ModifyCoinCategoryReply, error) {
	out := new(ModifyCoinCategoryReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyCoinCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeColumnList(ctx context.Context, in *DescribeColumnListRequest, opts ...grpc.CallOption) (*DescribeColumnListReply, error) {
	out := new(DescribeColumnListReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeColumnList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateColumn(ctx context.Context, in *CreateColumnRequest, opts ...grpc.CallOption) (*CreateColumnReply, error) {
	out := new(CreateColumnReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CreateColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) RemoveColumn(ctx context.Context, in *RemoveColumnRequest, opts ...grpc.CallOption) (*RemoveColumnReply, error) {
	out := new(RemoveColumnReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/RemoveColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyColumn(ctx context.Context, in *ModifyColumnRequest, opts ...grpc.CallOption) (*ModifyColumnReply, error) {
	out := new(ModifyColumnReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateCoinCategory(ctx context.Context, in *CreateCoinCategoryRequest, opts ...grpc.CallOption) (*CreateCoinCategoryReply, error) {
	out := new(CreateCoinCategoryReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CreateCoinCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinUserChart(ctx context.Context, in *DescribeCoinUserChartRequest, opts ...grpc.CallOption) (*DescribeCoinUserChartReply, error) {
	out := new(DescribeCoinUserChartReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinUserChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinOrderChart(ctx context.Context, in *DescribeCoinOrderChartRequest, opts ...grpc.CallOption) (*DescribeCoinOrderChartReply, error) {
	out := new(DescribeCoinOrderChartReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinOrderChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinVolumeChart(ctx context.Context, in *DescribeCoinVolumeChartRequest, opts ...grpc.CallOption) (*DescribeCoinVolumeChartReply, error) {
	out := new(DescribeCoinVolumeChartReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinVolumeChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinLiquidityChart(ctx context.Context, in *DescribeCoinLiquidityChartRequest, opts ...grpc.CallOption) (*DescribeCoinLiquidityChartReply, error) {
	out := new(DescribeCoinLiquidityChartReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinLiquidityChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeDeFiCoins(ctx context.Context, in *DescribeDeFiCoinsRequest, opts ...grpc.CallOption) (*DescribeDeFiCoinsReply, error) {
	out := new(DescribeDeFiCoinsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeDeFiCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinSimples(ctx context.Context, in *DescribeCoinSimplesRequest, opts ...grpc.CallOption) (*DescribeCoinSimplesReply, error) {
	out := new(DescribeCoinSimplesReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinSimples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) SearchCoins(ctx context.Context, in *SearchCoinsRequest, opts ...grpc.CallOption) (*SearchCoinsReply, error) {
	out := new(SearchCoinsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/SearchCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeTokens(ctx context.Context, in *DescribeTokensRequest, opts ...grpc.CallOption) (*DescribeTokensReply, error) {
	out := new(DescribeTokensReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeGuruChains(ctx context.Context, in *DescribeGuruChainsRequest, opts ...grpc.CallOption) (*DescribeGuruChainsReply, error) {
	out := new(DescribeGuruChainsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeGuruChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeSwapConfig(ctx context.Context, in *DescribeSwapConfigRequest, opts ...grpc.CallOption) (*DescribeSwapConfigReply, error) {
	out := new(DescribeSwapConfigReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeSwapConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinsByFields(ctx context.Context, in *DescribeCoinsByFieldsRequest, opts ...grpc.CallOption) (*DescribeCoinsByFieldsReply, error) {
	out := new(DescribeCoinsByFieldsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinsByFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeTokensByFields(ctx context.Context, in *DescribeTokensByFieldsRequest, opts ...grpc.CallOption) (*DescribeTokensByFieldsReply, error) {
	out := new(DescribeTokensByFieldsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeTokensByFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribePriceByCoinAddress(ctx context.Context, in *DescribePriceByCoinAddressRequest, opts ...grpc.CallOption) (*DescribePriceByCoinAddressReply, error) {
	out := new(DescribePriceByCoinAddressReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribePriceByCoinAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinIDByTokens(ctx context.Context, in *DescribeCoinIDByTokensRequest, opts ...grpc.CallOption) (*DescribeCoinIDByTokensReply, error) {
	out := new(DescribeCoinIDByTokensReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinIDByTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateCoinGuide(ctx context.Context, in *CreateCoinGuideRequest, opts ...grpc.CallOption) (*CreateCoinGuideReply, error) {
	out := new(CreateCoinGuideReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CreateCoinGuide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DeleteCoinGuide(ctx context.Context, in *DeleteCoinGuideRequest, opts ...grpc.CallOption) (*DeleteCoinGuideReply, error) {
	out := new(DeleteCoinGuideReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DeleteCoinGuide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyCoinGuide(ctx context.Context, in *ModifyCoinGuideRequest, opts ...grpc.CallOption) (*ModifyCoinGuideReply, error) {
	out := new(ModifyCoinGuideReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyCoinGuide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeWhiteTokens(ctx context.Context, in *DescribeWhiteTokensRequest, opts ...grpc.CallOption) (*DescribeWhiteTokensReply, error) {
	out := new(DescribeWhiteTokensReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeWhiteTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateChain(ctx context.Context, in *CreateChainRequest, opts ...grpc.CallOption) (*CreateChainReply, error) {
	out := new(CreateChainReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CreateChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyChain(ctx context.Context, in *ModifyChainRequest, opts ...grpc.CallOption) (*NoneReply, error) {
	out := new(NoneReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DeleteChain(ctx context.Context, in *DeleteChainRequest, opts ...grpc.CallOption) (*NoneReply, error) {
	out := new(NoneReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DeleteChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateChainRelation(ctx context.Context, in *CreateChainRelationRequest, opts ...grpc.CallOption) (*NoneReply, error) {
	out := new(NoneReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CreateChainRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DeleteChainRelation(ctx context.Context, in *DeleteChainRelationRequest, opts ...grpc.CallOption) (*NoneReply, error) {
	out := new(NoneReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DeleteChainRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CheckCoins(ctx context.Context, in *CheckCoinsRequest, opts ...grpc.CallOption) (*CheckCoinsReply, error) {
	out := new(CheckCoinsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CheckCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeDex(ctx context.Context, in *DescribeDexRequest, opts ...grpc.CallOption) (*DescribeDexReply, error) {
	out := new(DescribeDexReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeDex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribePairs(ctx context.Context, in *DescribePairsRequest, opts ...grpc.CallOption) (*DescribePairsReply, error) {
	out := new(DescribePairsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribePairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribePairBatch(ctx context.Context, in *DescribePairBatchRequest, opts ...grpc.CallOption) (*DescribePairBatchReply, error) {
	out := new(DescribePairBatchReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribePairBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribePair(ctx context.Context, in *DescribePairRequest, opts ...grpc.CallOption) (*DescribePairReply, error) {
	out := new(DescribePairReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribePair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribePairTrends(ctx context.Context, in *DescribePairTrendsRequest, opts ...grpc.CallOption) (*DescribePairTrendsReply, error) {
	out := new(DescribePairTrendsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribePairTrends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribePairTrendsV2(ctx context.Context, in *DescribePairTrendsV2Request, opts ...grpc.CallOption) (*DescribePairTrendsV2Reply, error) {
	out := new(DescribePairTrendsV2Reply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribePairTrendsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) SearchCoinAndPair(ctx context.Context, in *SearchCoinAndPairRequest, opts ...grpc.CallOption) (*SearchCoinAndPairReply, error) {
	out := new(SearchCoinAndPairReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/SearchCoinAndPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) AddCollection(ctx context.Context, in *AddCollectionRequest, opts ...grpc.CallOption) (*AddCollectionReply, error) {
	out := new(AddCollectionReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/AddCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) RemoveCollection(ctx context.Context, in *RemoveCollectionRequest, opts ...grpc.CallOption) (*RemoveCollectionReply, error) {
	out := new(RemoveCollectionReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/RemoveCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCollections(ctx context.Context, in *DescribeCollectionsRequest, opts ...grpc.CallOption) (*DescribeCollectionsReply, error) {
	out := new(DescribeCollectionsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateDex(ctx context.Context, in *CreateDexRequest, opts ...grpc.CallOption) (*CreateDexReply, error) {
	out := new(CreateDexReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CreateDex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyDex(ctx context.Context, in *ModifyDexRequest, opts ...grpc.CallOption) (*NoneReply, error) {
	out := new(NoneReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyDex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DeleteDex(ctx context.Context, in *DeleteDexRequest, opts ...grpc.CallOption) (*NoneReply, error) {
	out := new(NoneReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DeleteDex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeRate(ctx context.Context, in *DescribeRateRequest, opts ...grpc.CallOption) (*DescribeRateReply, error) {
	out := new(DescribeRateReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribePairGuides(ctx context.Context, in *DescribePairGuidesRequest, opts ...grpc.CallOption) (*DescribePairGuidesReply, error) {
	out := new(DescribePairGuidesReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribePairGuides", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinKLine(ctx context.Context, in *DescribeCoinKLineRequest, opts ...grpc.CallOption) (*DescribeCoinKLineReply, error) {
	out := new(DescribeCoinKLineReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinKLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribePairKLine(ctx context.Context, in *DescribePairKLineRequest, opts ...grpc.CallOption) (*DescribeCoinKLineReply, error) {
	out := new(DescribeCoinKLineReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribePairKLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribePairScanSite(ctx context.Context, in *DescribePairScanSiteRequest, opts ...grpc.CallOption) (*DescribePairScanSiteReply, error) {
	out := new(DescribePairScanSiteReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribePairScanSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreatePairGuide(ctx context.Context, in *CreatePairGuideRequest, opts ...grpc.CallOption) (*CreatePairGuideReply, error) {
	out := new(CreatePairGuideReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CreatePairGuide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DeletePairGuide(ctx context.Context, in *DeletePairGuideRequest, opts ...grpc.CallOption) (*NoneReply, error) {
	out := new(NoneReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DeletePairGuide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyPairGuide(ctx context.Context, in *ModifyPairGuideRequest, opts ...grpc.CallOption) (*NoneReply, error) {
	out := new(NoneReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyPairGuide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinsByChain(ctx context.Context, in *DescribeCoinsByChainRequest, opts ...grpc.CallOption) (*DescribeCoinsByChainReply, error) {
	out := new(DescribeCoinsByChainReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinsByChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribePairByCoins(ctx context.Context, in *DescribePairByCoinsRequest, opts ...grpc.CallOption) (*DescribePairByCoinsReply, error) {
	out := new(DescribePairByCoinsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribePairByCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinInfoByID(ctx context.Context, in *DescribeCoinInfoByIDRequest, opts ...grpc.CallOption) (*DescribeCoinInfoByIDReply, error) {
	out := new(DescribeCoinInfoByIDReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinInfoByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeTopTokenList(ctx context.Context, in *DescribeTopTokenListRequest, opts ...grpc.CallOption) (*DescribeTopTokenListReply, error) {
	out := new(DescribeTopTokenListReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeTopTokenList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateTopToken(ctx context.Context, in *CreateTopTokenRequest, opts ...grpc.CallOption) (*CreateTopTokenReply, error) {
	out := new(CreateTopTokenReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CreateTopToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyTopToken(ctx context.Context, in *ModifyTopTokenRequest, opts ...grpc.CallOption) (*ModifyTopTokenReply, error) {
	out := new(ModifyTopTokenReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyTopToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DeleteTopToken(ctx context.Context, in *DeleteTopTokenRequest, opts ...grpc.CallOption) (*DeleteTopTokenReply, error) {
	out := new(DeleteTopTokenReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DeleteTopToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeRecommandTokenSectionList(ctx context.Context, in *DescribeRecommandTokenSectionListRequest, opts ...grpc.CallOption) (*DescribeRecommandTokenSectionListReply, error) {
	out := new(DescribeRecommandTokenSectionListReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeRecommandTokenSectionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateRecommandTokenSection(ctx context.Context, in *CreateRecommandTokenSectionRequest, opts ...grpc.CallOption) (*CreateRecommandTokenSectionReply, error) {
	out := new(CreateRecommandTokenSectionReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CreateRecommandTokenSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyRecommandTokenSection(ctx context.Context, in *ModifyRecommandTokenSectionRequest, opts ...grpc.CallOption) (*ModifyRecommandTokenSectionReply, error) {
	out := new(ModifyRecommandTokenSectionReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyRecommandTokenSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DeleteRecommandTokenSection(ctx context.Context, in *DeleteRecommandTokenSectionRequest, opts ...grpc.CallOption) (*DeleteRecommandTokenSectionReply, error) {
	out := new(DeleteRecommandTokenSectionReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DeleteRecommandTokenSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribePriceDeltaMsg(ctx context.Context, in *DescribePriceDeltaMsgRequest, opts ...grpc.CallOption) (*DescribePriceDeltaMsgReply, error) {
	out := new(DescribePriceDeltaMsgReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribePriceDeltaMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeTBirdNews(ctx context.Context, in *DescribeTBirdNewsRequest, opts ...grpc.CallOption) (*DescribeTBirdNewsReply, error) {
	out := new(DescribeTBirdNewsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeTBirdNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeChainSummary(ctx context.Context, in *DescribeChainSummaryRequest, opts ...grpc.CallOption) (*DescribeChainSummaryReply, error) {
	out := new(DescribeChainSummaryReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeChainSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateTerminalPairOHLCV(ctx context.Context, in *CreateTerminalPairOHLCVRequest, opts ...grpc.CallOption) (*NoneReply, error) {
	out := new(NoneReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CreateTerminalPairOHLCV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DeleteTerminalPairOHLCV(ctx context.Context, in *DeleteTerminalPairOHLCVRequest, opts ...grpc.CallOption) (*NoneReply, error) {
	out := new(NoneReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DeleteTerminalPairOHLCV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCollectionCombines(ctx context.Context, in *DescribeCollectionCombinesRequest, opts ...grpc.CallOption) (*DescribeCollectionCombinesReply, error) {
	out := new(DescribeCollectionCombinesReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCollectionCombines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeTopPairByCoin(ctx context.Context, in *DescribeTopPairByCoinRequest, opts ...grpc.CallOption) (*DescribeTopPairByCoinReply, error) {
	out := new(DescribeTopPairByCoinReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeTopPairByCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServer is the server API for Market service.
// All implementations must embed UnimplementedMarketServer
// for forward compatibility
type MarketServer interface {
	DescribeHotCoins(context.Context, *DescribeHotCoinsRequest) (*DescribeHotCoinsReply, error)
	DescribeHotCoinsV2(context.Context, *DescribeHotCoinsRequest) (*DescribeHotCoinsV2Reply, error)
	CreateHotCoin(context.Context, *CreateHotCoinRequest) (*CreateHotCoinReply, error)
	DeleteHotCoin(context.Context, *DeleteHotCoinRequest) (*DeleteHotCoinReply, error)
	ModifyHotCoin(context.Context, *ModifyHotCoinRequest) (*ModifyHotCoinReply, error)
	CreatePairTrend(context.Context, *CreatePairTrendRequest) (*CreatePairTrendReply, error)
	ModifyPairTrend(context.Context, *ModifyPairTrendRequest) (*ModifyPairTrendReply, error)
	DeletePairTrend(context.Context, *DeletePairTrendRequest) (*DeletePairTrendReply, error)
	DescribeChainsSupport(context.Context, *DescribeChainsSupportRequest) (*DescribeChainsSupportReply, error)
	DescribeAlerts(context.Context, *DescribeAlertsRequest) (*DescribeAlertsReply, error)
	CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertReply, error)
	ModifyAlert(context.Context, *ModifyAlertRequest) (*ModifyAlertReply, error)
	RemoveAlert(context.Context, *RemoveAlertRequest) (*RemoveAlertReply, error)
	DescribeCollectionGuideList(context.Context, *DescribeCollectionGuideListRequest) (*DescribeCollectionGuideListReply, error)
	DescribeCollectionGuides(context.Context, *DescribeCollectionGuidesRequest) (*DescribeCollectionGuidesReply, error)
	DescribeCoinSwaps(context.Context, *DescribeCoinSwapsRequest) (*DescribeCoinSwapsReply, error)
	DescribePairSwaps(context.Context, *DescribePairSwapsRequest) (*DescribeCoinSwapsReply, error)
	DescribeCoinLiquidity(context.Context, *DescribeCoinLiquidityRequest) (*DescribeCoinLiquidityReply, error)
	DescribeCoinSwapStats(context.Context, *DescribeCoinSwapStatsRequest) (*DescribeCoinSwapStatsReply, error)
	DescribeCoinPriceChart(context.Context, *DescribeCoinPriceChartRequest) (*DescribeCoinPriceChartReply, error)
	DescribeCoinPriceByRange(context.Context, *DescribeCoinPriceByRangeRequest) (*DescribeCoinPriceByRangeReply, error)
	DescribeCoinPriceByTimestamp(context.Context, *DescribeCoinPriceByTimestampRequest) (*DescribeCoinPriceByTimestampReply, error)
	DescribeCexCoins(context.Context, *DescribeCexCoinsRequest) (*DescribeCexCoinsReply, error)
	DescribeAllExtraDetail(context.Context, *DescribeAllExtraDetailRequest) (*DescribeAllExtraDetailReply, error)
	DescribeMarketExtraDetail(context.Context, *DescribeMarketExtraDetailRequest) (*DescribeMarketExtraDetailReply, error)
	DescribeMenuCategory(context.Context, *DescribeMenuCategoryRequest) (*DescribeMenuCategoryReply, error)
	ModifyMenuCategory(context.Context, *ModifyMenuCategoryRequest) (*ModifyMenuCategoryReply, error)
	DescribeCategoryList(context.Context, *DescribeCategoryListRequest) (*DescribeCategoryListReply, error)
	ModifyCoinDescription(context.Context, *ModifyCoinDescriptionRequest) (*ModifyCoinDescriptionReply, error)
	ModifyCoinCategory(context.Context, *ModifyCoinCategoryRequest) (*ModifyCoinCategoryReply, error)
	DescribeColumnList(context.Context, *DescribeColumnListRequest) (*DescribeColumnListReply, error)
	CreateColumn(context.Context, *CreateColumnRequest) (*CreateColumnReply, error)
	RemoveColumn(context.Context, *RemoveColumnRequest) (*RemoveColumnReply, error)
	ModifyColumn(context.Context, *ModifyColumnRequest) (*ModifyColumnReply, error)
	CreateCoinCategory(context.Context, *CreateCoinCategoryRequest) (*CreateCoinCategoryReply, error)
	DescribeCoinUserChart(context.Context, *DescribeCoinUserChartRequest) (*DescribeCoinUserChartReply, error)
	DescribeCoinOrderChart(context.Context, *DescribeCoinOrderChartRequest) (*DescribeCoinOrderChartReply, error)
	DescribeCoinVolumeChart(context.Context, *DescribeCoinVolumeChartRequest) (*DescribeCoinVolumeChartReply, error)
	DescribeCoinLiquidityChart(context.Context, *DescribeCoinLiquidityChartRequest) (*DescribeCoinLiquidityChartReply, error)
	DescribeDeFiCoins(context.Context, *DescribeDeFiCoinsRequest) (*DescribeDeFiCoinsReply, error)
	DescribeCoinSimples(context.Context, *DescribeCoinSimplesRequest) (*DescribeCoinSimplesReply, error)
	SearchCoins(context.Context, *SearchCoinsRequest) (*SearchCoinsReply, error)
	DescribeTokens(context.Context, *DescribeTokensRequest) (*DescribeTokensReply, error)
	DescribeGuruChains(context.Context, *DescribeGuruChainsRequest) (*DescribeGuruChainsReply, error)
	DescribeSwapConfig(context.Context, *DescribeSwapConfigRequest) (*DescribeSwapConfigReply, error)
	DescribeCoinsByFields(context.Context, *DescribeCoinsByFieldsRequest) (*DescribeCoinsByFieldsReply, error)
	DescribeTokensByFields(context.Context, *DescribeTokensByFieldsRequest) (*DescribeTokensByFieldsReply, error)
	DescribePriceByCoinAddress(context.Context, *DescribePriceByCoinAddressRequest) (*DescribePriceByCoinAddressReply, error)
	DescribeCoinIDByTokens(context.Context, *DescribeCoinIDByTokensRequest) (*DescribeCoinIDByTokensReply, error)
	CreateCoinGuide(context.Context, *CreateCoinGuideRequest) (*CreateCoinGuideReply, error)
	DeleteCoinGuide(context.Context, *DeleteCoinGuideRequest) (*DeleteCoinGuideReply, error)
	ModifyCoinGuide(context.Context, *ModifyCoinGuideRequest) (*ModifyCoinGuideReply, error)
	DescribeWhiteTokens(context.Context, *DescribeWhiteTokensRequest) (*DescribeWhiteTokensReply, error)
	CreateChain(context.Context, *CreateChainRequest) (*CreateChainReply, error)
	ModifyChain(context.Context, *ModifyChainRequest) (*NoneReply, error)
	DeleteChain(context.Context, *DeleteChainRequest) (*NoneReply, error)
	CreateChainRelation(context.Context, *CreateChainRelationRequest) (*NoneReply, error)
	DeleteChainRelation(context.Context, *DeleteChainRelationRequest) (*NoneReply, error)
	CheckCoins(context.Context, *CheckCoinsRequest) (*CheckCoinsReply, error)
	DescribeDex(context.Context, *DescribeDexRequest) (*DescribeDexReply, error)
	DescribePairs(context.Context, *DescribePairsRequest) (*DescribePairsReply, error)
	DescribePairBatch(context.Context, *DescribePairBatchRequest) (*DescribePairBatchReply, error)
	DescribePair(context.Context, *DescribePairRequest) (*DescribePairReply, error)
	DescribePairTrends(context.Context, *DescribePairTrendsRequest) (*DescribePairTrendsReply, error)
	DescribePairTrendsV2(context.Context, *DescribePairTrendsV2Request) (*DescribePairTrendsV2Reply, error)
	SearchCoinAndPair(context.Context, *SearchCoinAndPairRequest) (*SearchCoinAndPairReply, error)
	AddCollection(context.Context, *AddCollectionRequest) (*AddCollectionReply, error)
	RemoveCollection(context.Context, *RemoveCollectionRequest) (*RemoveCollectionReply, error)
	DescribeCollections(context.Context, *DescribeCollectionsRequest) (*DescribeCollectionsReply, error)
	CreateDex(context.Context, *CreateDexRequest) (*CreateDexReply, error)
	ModifyDex(context.Context, *ModifyDexRequest) (*NoneReply, error)
	DeleteDex(context.Context, *DeleteDexRequest) (*NoneReply, error)
	DescribeRate(context.Context, *DescribeRateRequest) (*DescribeRateReply, error)
	DescribePairGuides(context.Context, *DescribePairGuidesRequest) (*DescribePairGuidesReply, error)
	DescribeCoinKLine(context.Context, *DescribeCoinKLineRequest) (*DescribeCoinKLineReply, error)
	DescribePairKLine(context.Context, *DescribePairKLineRequest) (*DescribeCoinKLineReply, error)
	DescribePairScanSite(context.Context, *DescribePairScanSiteRequest) (*DescribePairScanSiteReply, error)
	CreatePairGuide(context.Context, *CreatePairGuideRequest) (*CreatePairGuideReply, error)
	DeletePairGuide(context.Context, *DeletePairGuideRequest) (*NoneReply, error)
	ModifyPairGuide(context.Context, *ModifyPairGuideRequest) (*NoneReply, error)
	DescribeCoinsByChain(context.Context, *DescribeCoinsByChainRequest) (*DescribeCoinsByChainReply, error)
	DescribePairByCoins(context.Context, *DescribePairByCoinsRequest) (*DescribePairByCoinsReply, error)
	// 根据 Coin ID 直接查询 coin_info 数据库，并返回全部信息
	DescribeCoinInfoByID(context.Context, *DescribeCoinInfoByIDRequest) (*DescribeCoinInfoByIDReply, error)
	// TopToken 需求专用接口, 服务于相对应的磐石管理后台
	// 需求文档: https://tk3en79uf0.larksuite.com/docx/JEvRdf949orMQPxIXoVuFEpIsYd?chunked=false#CDRcdsOvsoc9CRxPIZduve0KsBc
	DescribeTopTokenList(context.Context, *DescribeTopTokenListRequest) (*DescribeTopTokenListReply, error)
	CreateTopToken(context.Context, *CreateTopTokenRequest) (*CreateTopTokenReply, error)
	ModifyTopToken(context.Context, *ModifyTopTokenRequest) (*ModifyTopTokenReply, error)
	DeleteTopToken(context.Context, *DeleteTopTokenRequest) (*DeleteTopTokenReply, error)
	// 代币板块管理
	// 需求文档: https://tk3en79uf0.larksuite.com/docx/JEvRdf949orMQPxIXoVuFEpIsYd?chunked=false#CDRcdsOvsoc9CRxPIZduve0KsBc
	DescribeRecommandTokenSectionList(context.Context, *DescribeRecommandTokenSectionListRequest) (*DescribeRecommandTokenSectionListReply, error)
	CreateRecommandTokenSection(context.Context, *CreateRecommandTokenSectionRequest) (*CreateRecommandTokenSectionReply, error)
	ModifyRecommandTokenSection(context.Context, *ModifyRecommandTokenSectionRequest) (*ModifyRecommandTokenSectionReply, error)
	DeleteRecommandTokenSection(context.Context, *DeleteRecommandTokenSectionRequest) (*DeleteRecommandTokenSectionReply, error)
	DescribePriceDeltaMsg(context.Context, *DescribePriceDeltaMsgRequest) (*DescribePriceDeltaMsgReply, error)
	// 获取TBird资讯
	DescribeTBirdNews(context.Context, *DescribeTBirdNewsRequest) (*DescribeTBirdNewsReply, error)
	DescribeChainSummary(context.Context, *DescribeChainSummaryRequest) (*DescribeChainSummaryReply, error)
	CreateTerminalPairOHLCV(context.Context, *CreateTerminalPairOHLCVRequest) (*NoneReply, error)
	DeleteTerminalPairOHLCV(context.Context, *DeleteTerminalPairOHLCVRequest) (*NoneReply, error)
	DescribeCollectionCombines(context.Context, *DescribeCollectionCombinesRequest) (*DescribeCollectionCombinesReply, error)
	DescribeTopPairByCoin(context.Context, *DescribeTopPairByCoinRequest) (*DescribeTopPairByCoinReply, error)
	mustEmbedUnimplementedMarketServer()
}

// UnimplementedMarketServer must be embedded to have forward compatible implementations.
type UnimplementedMarketServer struct {
}

func (UnimplementedMarketServer) DescribeHotCoins(context.Context, *DescribeHotCoinsRequest) (*DescribeHotCoinsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeHotCoins not implemented")
}
func (UnimplementedMarketServer) DescribeHotCoinsV2(context.Context, *DescribeHotCoinsRequest) (*DescribeHotCoinsV2Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeHotCoinsV2 not implemented")
}
func (UnimplementedMarketServer) CreateHotCoin(context.Context, *CreateHotCoinRequest) (*CreateHotCoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHotCoin not implemented")
}
func (UnimplementedMarketServer) DeleteHotCoin(context.Context, *DeleteHotCoinRequest) (*DeleteHotCoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHotCoin not implemented")
}
func (UnimplementedMarketServer) ModifyHotCoin(context.Context, *ModifyHotCoinRequest) (*ModifyHotCoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyHotCoin not implemented")
}
func (UnimplementedMarketServer) CreatePairTrend(context.Context, *CreatePairTrendRequest) (*CreatePairTrendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePairTrend not implemented")
}
func (UnimplementedMarketServer) ModifyPairTrend(context.Context, *ModifyPairTrendRequest) (*ModifyPairTrendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPairTrend not implemented")
}
func (UnimplementedMarketServer) DeletePairTrend(context.Context, *DeletePairTrendRequest) (*DeletePairTrendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePairTrend not implemented")
}
func (UnimplementedMarketServer) DescribeChainsSupport(context.Context, *DescribeChainsSupportRequest) (*DescribeChainsSupportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeChainsSupport not implemented")
}
func (UnimplementedMarketServer) DescribeAlerts(context.Context, *DescribeAlertsRequest) (*DescribeAlertsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAlerts not implemented")
}
func (UnimplementedMarketServer) CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlert not implemented")
}
func (UnimplementedMarketServer) ModifyAlert(context.Context, *ModifyAlertRequest) (*ModifyAlertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyAlert not implemented")
}
func (UnimplementedMarketServer) RemoveAlert(context.Context, *RemoveAlertRequest) (*RemoveAlertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAlert not implemented")
}
func (UnimplementedMarketServer) DescribeCollectionGuideList(context.Context, *DescribeCollectionGuideListRequest) (*DescribeCollectionGuideListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCollectionGuideList not implemented")
}
func (UnimplementedMarketServer) DescribeCollectionGuides(context.Context, *DescribeCollectionGuidesRequest) (*DescribeCollectionGuidesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCollectionGuides not implemented")
}
func (UnimplementedMarketServer) DescribeCoinSwaps(context.Context, *DescribeCoinSwapsRequest) (*DescribeCoinSwapsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinSwaps not implemented")
}
func (UnimplementedMarketServer) DescribePairSwaps(context.Context, *DescribePairSwapsRequest) (*DescribeCoinSwapsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePairSwaps not implemented")
}
func (UnimplementedMarketServer) DescribeCoinLiquidity(context.Context, *DescribeCoinLiquidityRequest) (*DescribeCoinLiquidityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinLiquidity not implemented")
}
func (UnimplementedMarketServer) DescribeCoinSwapStats(context.Context, *DescribeCoinSwapStatsRequest) (*DescribeCoinSwapStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinSwapStats not implemented")
}
func (UnimplementedMarketServer) DescribeCoinPriceChart(context.Context, *DescribeCoinPriceChartRequest) (*DescribeCoinPriceChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinPriceChart not implemented")
}
func (UnimplementedMarketServer) DescribeCoinPriceByRange(context.Context, *DescribeCoinPriceByRangeRequest) (*DescribeCoinPriceByRangeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinPriceByRange not implemented")
}
func (UnimplementedMarketServer) DescribeCoinPriceByTimestamp(context.Context, *DescribeCoinPriceByTimestampRequest) (*DescribeCoinPriceByTimestampReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinPriceByTimestamp not implemented")
}
func (UnimplementedMarketServer) DescribeCexCoins(context.Context, *DescribeCexCoinsRequest) (*DescribeCexCoinsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCexCoins not implemented")
}
func (UnimplementedMarketServer) DescribeAllExtraDetail(context.Context, *DescribeAllExtraDetailRequest) (*DescribeAllExtraDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAllExtraDetail not implemented")
}
func (UnimplementedMarketServer) DescribeMarketExtraDetail(context.Context, *DescribeMarketExtraDetailRequest) (*DescribeMarketExtraDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMarketExtraDetail not implemented")
}
func (UnimplementedMarketServer) DescribeMenuCategory(context.Context, *DescribeMenuCategoryRequest) (*DescribeMenuCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMenuCategory not implemented")
}
func (UnimplementedMarketServer) ModifyMenuCategory(context.Context, *ModifyMenuCategoryRequest) (*ModifyMenuCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyMenuCategory not implemented")
}
func (UnimplementedMarketServer) DescribeCategoryList(context.Context, *DescribeCategoryListRequest) (*DescribeCategoryListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCategoryList not implemented")
}
func (UnimplementedMarketServer) ModifyCoinDescription(context.Context, *ModifyCoinDescriptionRequest) (*ModifyCoinDescriptionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyCoinDescription not implemented")
}
func (UnimplementedMarketServer) ModifyCoinCategory(context.Context, *ModifyCoinCategoryRequest) (*ModifyCoinCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyCoinCategory not implemented")
}
func (UnimplementedMarketServer) DescribeColumnList(context.Context, *DescribeColumnListRequest) (*DescribeColumnListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeColumnList not implemented")
}
func (UnimplementedMarketServer) CreateColumn(context.Context, *CreateColumnRequest) (*CreateColumnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColumn not implemented")
}
func (UnimplementedMarketServer) RemoveColumn(context.Context, *RemoveColumnRequest) (*RemoveColumnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveColumn not implemented")
}
func (UnimplementedMarketServer) ModifyColumn(context.Context, *ModifyColumnRequest) (*ModifyColumnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyColumn not implemented")
}
func (UnimplementedMarketServer) CreateCoinCategory(context.Context, *CreateCoinCategoryRequest) (*CreateCoinCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinCategory not implemented")
}
func (UnimplementedMarketServer) DescribeCoinUserChart(context.Context, *DescribeCoinUserChartRequest) (*DescribeCoinUserChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinUserChart not implemented")
}
func (UnimplementedMarketServer) DescribeCoinOrderChart(context.Context, *DescribeCoinOrderChartRequest) (*DescribeCoinOrderChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinOrderChart not implemented")
}
func (UnimplementedMarketServer) DescribeCoinVolumeChart(context.Context, *DescribeCoinVolumeChartRequest) (*DescribeCoinVolumeChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinVolumeChart not implemented")
}
func (UnimplementedMarketServer) DescribeCoinLiquidityChart(context.Context, *DescribeCoinLiquidityChartRequest) (*DescribeCoinLiquidityChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinLiquidityChart not implemented")
}
func (UnimplementedMarketServer) DescribeDeFiCoins(context.Context, *DescribeDeFiCoinsRequest) (*DescribeDeFiCoinsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDeFiCoins not implemented")
}
func (UnimplementedMarketServer) DescribeCoinSimples(context.Context, *DescribeCoinSimplesRequest) (*DescribeCoinSimplesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinSimples not implemented")
}
func (UnimplementedMarketServer) SearchCoins(context.Context, *SearchCoinsRequest) (*SearchCoinsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCoins not implemented")
}
func (UnimplementedMarketServer) DescribeTokens(context.Context, *DescribeTokensRequest) (*DescribeTokensReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTokens not implemented")
}
func (UnimplementedMarketServer) DescribeGuruChains(context.Context, *DescribeGuruChainsRequest) (*DescribeGuruChainsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeGuruChains not implemented")
}
func (UnimplementedMarketServer) DescribeSwapConfig(context.Context, *DescribeSwapConfigRequest) (*DescribeSwapConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSwapConfig not implemented")
}
func (UnimplementedMarketServer) DescribeCoinsByFields(context.Context, *DescribeCoinsByFieldsRequest) (*DescribeCoinsByFieldsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinsByFields not implemented")
}
func (UnimplementedMarketServer) DescribeTokensByFields(context.Context, *DescribeTokensByFieldsRequest) (*DescribeTokensByFieldsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTokensByFields not implemented")
}
func (UnimplementedMarketServer) DescribePriceByCoinAddress(context.Context, *DescribePriceByCoinAddressRequest) (*DescribePriceByCoinAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePriceByCoinAddress not implemented")
}
func (UnimplementedMarketServer) DescribeCoinIDByTokens(context.Context, *DescribeCoinIDByTokensRequest) (*DescribeCoinIDByTokensReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinIDByTokens not implemented")
}
func (UnimplementedMarketServer) CreateCoinGuide(context.Context, *CreateCoinGuideRequest) (*CreateCoinGuideReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinGuide not implemented")
}
func (UnimplementedMarketServer) DeleteCoinGuide(context.Context, *DeleteCoinGuideRequest) (*DeleteCoinGuideReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoinGuide not implemented")
}
func (UnimplementedMarketServer) ModifyCoinGuide(context.Context, *ModifyCoinGuideRequest) (*ModifyCoinGuideReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyCoinGuide not implemented")
}
func (UnimplementedMarketServer) DescribeWhiteTokens(context.Context, *DescribeWhiteTokensRequest) (*DescribeWhiteTokensReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeWhiteTokens not implemented")
}
func (UnimplementedMarketServer) CreateChain(context.Context, *CreateChainRequest) (*CreateChainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChain not implemented")
}
func (UnimplementedMarketServer) ModifyChain(context.Context, *ModifyChainRequest) (*NoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyChain not implemented")
}
func (UnimplementedMarketServer) DeleteChain(context.Context, *DeleteChainRequest) (*NoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChain not implemented")
}
func (UnimplementedMarketServer) CreateChainRelation(context.Context, *CreateChainRelationRequest) (*NoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChainRelation not implemented")
}
func (UnimplementedMarketServer) DeleteChainRelation(context.Context, *DeleteChainRelationRequest) (*NoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChainRelation not implemented")
}
func (UnimplementedMarketServer) CheckCoins(context.Context, *CheckCoinsRequest) (*CheckCoinsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCoins not implemented")
}
func (UnimplementedMarketServer) DescribeDex(context.Context, *DescribeDexRequest) (*DescribeDexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDex not implemented")
}
func (UnimplementedMarketServer) DescribePairs(context.Context, *DescribePairsRequest) (*DescribePairsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePairs not implemented")
}
func (UnimplementedMarketServer) DescribePairBatch(context.Context, *DescribePairBatchRequest) (*DescribePairBatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePairBatch not implemented")
}
func (UnimplementedMarketServer) DescribePair(context.Context, *DescribePairRequest) (*DescribePairReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePair not implemented")
}
func (UnimplementedMarketServer) DescribePairTrends(context.Context, *DescribePairTrendsRequest) (*DescribePairTrendsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePairTrends not implemented")
}
func (UnimplementedMarketServer) DescribePairTrendsV2(context.Context, *DescribePairTrendsV2Request) (*DescribePairTrendsV2Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePairTrendsV2 not implemented")
}
func (UnimplementedMarketServer) SearchCoinAndPair(context.Context, *SearchCoinAndPairRequest) (*SearchCoinAndPairReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCoinAndPair not implemented")
}
func (UnimplementedMarketServer) AddCollection(context.Context, *AddCollectionRequest) (*AddCollectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollection not implemented")
}
func (UnimplementedMarketServer) RemoveCollection(context.Context, *RemoveCollectionRequest) (*RemoveCollectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCollection not implemented")
}
func (UnimplementedMarketServer) DescribeCollections(context.Context, *DescribeCollectionsRequest) (*DescribeCollectionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCollections not implemented")
}
func (UnimplementedMarketServer) CreateDex(context.Context, *CreateDexRequest) (*CreateDexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDex not implemented")
}
func (UnimplementedMarketServer) ModifyDex(context.Context, *ModifyDexRequest) (*NoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyDex not implemented")
}
func (UnimplementedMarketServer) DeleteDex(context.Context, *DeleteDexRequest) (*NoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDex not implemented")
}
func (UnimplementedMarketServer) DescribeRate(context.Context, *DescribeRateRequest) (*DescribeRateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRate not implemented")
}
func (UnimplementedMarketServer) DescribePairGuides(context.Context, *DescribePairGuidesRequest) (*DescribePairGuidesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePairGuides not implemented")
}
func (UnimplementedMarketServer) DescribeCoinKLine(context.Context, *DescribeCoinKLineRequest) (*DescribeCoinKLineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinKLine not implemented")
}
func (UnimplementedMarketServer) DescribePairKLine(context.Context, *DescribePairKLineRequest) (*DescribeCoinKLineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePairKLine not implemented")
}
func (UnimplementedMarketServer) DescribePairScanSite(context.Context, *DescribePairScanSiteRequest) (*DescribePairScanSiteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePairScanSite not implemented")
}
func (UnimplementedMarketServer) CreatePairGuide(context.Context, *CreatePairGuideRequest) (*CreatePairGuideReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePairGuide not implemented")
}
func (UnimplementedMarketServer) DeletePairGuide(context.Context, *DeletePairGuideRequest) (*NoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePairGuide not implemented")
}
func (UnimplementedMarketServer) ModifyPairGuide(context.Context, *ModifyPairGuideRequest) (*NoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPairGuide not implemented")
}
func (UnimplementedMarketServer) DescribeCoinsByChain(context.Context, *DescribeCoinsByChainRequest) (*DescribeCoinsByChainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinsByChain not implemented")
}
func (UnimplementedMarketServer) DescribePairByCoins(context.Context, *DescribePairByCoinsRequest) (*DescribePairByCoinsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePairByCoins not implemented")
}
func (UnimplementedMarketServer) DescribeCoinInfoByID(context.Context, *DescribeCoinInfoByIDRequest) (*DescribeCoinInfoByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinInfoByID not implemented")
}
func (UnimplementedMarketServer) DescribeTopTokenList(context.Context, *DescribeTopTokenListRequest) (*DescribeTopTokenListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTopTokenList not implemented")
}
func (UnimplementedMarketServer) CreateTopToken(context.Context, *CreateTopTokenRequest) (*CreateTopTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopToken not implemented")
}
func (UnimplementedMarketServer) ModifyTopToken(context.Context, *ModifyTopTokenRequest) (*ModifyTopTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyTopToken not implemented")
}
func (UnimplementedMarketServer) DeleteTopToken(context.Context, *DeleteTopTokenRequest) (*DeleteTopTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopToken not implemented")
}
func (UnimplementedMarketServer) DescribeRecommandTokenSectionList(context.Context, *DescribeRecommandTokenSectionListRequest) (*DescribeRecommandTokenSectionListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRecommandTokenSectionList not implemented")
}
func (UnimplementedMarketServer) CreateRecommandTokenSection(context.Context, *CreateRecommandTokenSectionRequest) (*CreateRecommandTokenSectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecommandTokenSection not implemented")
}
func (UnimplementedMarketServer) ModifyRecommandTokenSection(context.Context, *ModifyRecommandTokenSectionRequest) (*ModifyRecommandTokenSectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyRecommandTokenSection not implemented")
}
func (UnimplementedMarketServer) DeleteRecommandTokenSection(context.Context, *DeleteRecommandTokenSectionRequest) (*DeleteRecommandTokenSectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecommandTokenSection not implemented")
}
func (UnimplementedMarketServer) DescribePriceDeltaMsg(context.Context, *DescribePriceDeltaMsgRequest) (*DescribePriceDeltaMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePriceDeltaMsg not implemented")
}
func (UnimplementedMarketServer) DescribeTBirdNews(context.Context, *DescribeTBirdNewsRequest) (*DescribeTBirdNewsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTBirdNews not implemented")
}
func (UnimplementedMarketServer) DescribeChainSummary(context.Context, *DescribeChainSummaryRequest) (*DescribeChainSummaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeChainSummary not implemented")
}
func (UnimplementedMarketServer) CreateTerminalPairOHLCV(context.Context, *CreateTerminalPairOHLCVRequest) (*NoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTerminalPairOHLCV not implemented")
}
func (UnimplementedMarketServer) DeleteTerminalPairOHLCV(context.Context, *DeleteTerminalPairOHLCVRequest) (*NoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTerminalPairOHLCV not implemented")
}
func (UnimplementedMarketServer) DescribeCollectionCombines(context.Context, *DescribeCollectionCombinesRequest) (*DescribeCollectionCombinesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCollectionCombines not implemented")
}
func (UnimplementedMarketServer) DescribeTopPairByCoin(context.Context, *DescribeTopPairByCoinRequest) (*DescribeTopPairByCoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTopPairByCoin not implemented")
}
func (UnimplementedMarketServer) mustEmbedUnimplementedMarketServer() {}

// UnsafeMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServer will
// result in compilation errors.
type UnsafeMarketServer interface {
	mustEmbedUnimplementedMarketServer()
}

func RegisterMarketServer(s grpc.ServiceRegistrar, srv MarketServer) {
	s.RegisterService(&Market_ServiceDesc, srv)
}

func _Market_DescribeHotCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeHotCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeHotCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeHotCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeHotCoins(ctx, req.(*DescribeHotCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeHotCoinsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeHotCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeHotCoinsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeHotCoinsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeHotCoinsV2(ctx, req.(*DescribeHotCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateHotCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHotCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateHotCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CreateHotCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateHotCoin(ctx, req.(*CreateHotCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DeleteHotCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHotCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DeleteHotCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DeleteHotCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DeleteHotCoin(ctx, req.(*DeleteHotCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyHotCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyHotCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyHotCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyHotCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyHotCoin(ctx, req.(*ModifyHotCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreatePairTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePairTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreatePairTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CreatePairTrend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreatePairTrend(ctx, req.(*CreatePairTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyPairTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPairTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyPairTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyPairTrend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyPairTrend(ctx, req.(*ModifyPairTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DeletePairTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePairTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DeletePairTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DeletePairTrend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DeletePairTrend(ctx, req.(*DeletePairTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeChainsSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeChainsSupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeChainsSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeChainsSupport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeChainsSupport(ctx, req.(*DescribeChainsSupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeAlerts(ctx, req.(*DescribeAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CreateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateAlert(ctx, req.(*CreateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyAlert(ctx, req.(*ModifyAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_RemoveAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).RemoveAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/RemoveAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).RemoveAlert(ctx, req.(*RemoveAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCollectionGuideList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCollectionGuideListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCollectionGuideList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCollectionGuideList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCollectionGuideList(ctx, req.(*DescribeCollectionGuideListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCollectionGuides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCollectionGuidesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCollectionGuides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCollectionGuides",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCollectionGuides(ctx, req.(*DescribeCollectionGuidesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinSwaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinSwapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinSwaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinSwaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinSwaps(ctx, req.(*DescribeCoinSwapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribePairSwaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePairSwapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribePairSwaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribePairSwaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribePairSwaps(ctx, req.(*DescribePairSwapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinLiquidity(ctx, req.(*DescribeCoinLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinSwapStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinSwapStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinSwapStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinSwapStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinSwapStats(ctx, req.(*DescribeCoinSwapStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinPriceChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinPriceChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinPriceChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinPriceChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinPriceChart(ctx, req.(*DescribeCoinPriceChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinPriceByRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinPriceByRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinPriceByRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinPriceByRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinPriceByRange(ctx, req.(*DescribeCoinPriceByRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinPriceByTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinPriceByTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinPriceByTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinPriceByTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinPriceByTimestamp(ctx, req.(*DescribeCoinPriceByTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCexCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCexCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCexCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCexCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCexCoins(ctx, req.(*DescribeCexCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeAllExtraDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAllExtraDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeAllExtraDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeAllExtraDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeAllExtraDetail(ctx, req.(*DescribeAllExtraDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeMarketExtraDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeMarketExtraDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeMarketExtraDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeMarketExtraDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeMarketExtraDetail(ctx, req.(*DescribeMarketExtraDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeMenuCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeMenuCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeMenuCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeMenuCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeMenuCategory(ctx, req.(*DescribeMenuCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyMenuCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyMenuCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyMenuCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyMenuCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyMenuCategory(ctx, req.(*ModifyMenuCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCategoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCategoryList(ctx, req.(*DescribeCategoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyCoinDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyCoinDescription(ctx, req.(*ModifyCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyCoinCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyCoinCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyCoinCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyCoinCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyCoinCategory(ctx, req.(*ModifyCoinCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeColumnList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeColumnListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeColumnList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeColumnList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeColumnList(ctx, req.(*DescribeColumnListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CreateColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateColumn(ctx, req.(*CreateColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_RemoveColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).RemoveColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/RemoveColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).RemoveColumn(ctx, req.(*RemoveColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyColumn(ctx, req.(*ModifyColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateCoinCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateCoinCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CreateCoinCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateCoinCategory(ctx, req.(*CreateCoinCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinUserChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinUserChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinUserChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinUserChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinUserChart(ctx, req.(*DescribeCoinUserChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinOrderChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinOrderChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinOrderChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinOrderChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinOrderChart(ctx, req.(*DescribeCoinOrderChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinVolumeChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinVolumeChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinVolumeChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinVolumeChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinVolumeChart(ctx, req.(*DescribeCoinVolumeChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinLiquidityChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinLiquidityChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinLiquidityChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinLiquidityChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinLiquidityChart(ctx, req.(*DescribeCoinLiquidityChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeDeFiCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeDeFiCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeDeFiCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeDeFiCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeDeFiCoins(ctx, req.(*DescribeDeFiCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinSimples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinSimplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinSimples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinSimples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinSimples(ctx, req.(*DescribeCoinSimplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_SearchCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).SearchCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/SearchCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).SearchCoins(ctx, req.(*SearchCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeTokens(ctx, req.(*DescribeTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeGuruChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeGuruChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeGuruChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeGuruChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeGuruChains(ctx, req.(*DescribeGuruChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeSwapConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSwapConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeSwapConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeSwapConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeSwapConfig(ctx, req.(*DescribeSwapConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinsByFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinsByFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinsByFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinsByFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinsByFields(ctx, req.(*DescribeCoinsByFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeTokensByFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTokensByFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeTokensByFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeTokensByFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeTokensByFields(ctx, req.(*DescribeTokensByFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribePriceByCoinAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePriceByCoinAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribePriceByCoinAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribePriceByCoinAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribePriceByCoinAddress(ctx, req.(*DescribePriceByCoinAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinIDByTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinIDByTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinIDByTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinIDByTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinIDByTokens(ctx, req.(*DescribeCoinIDByTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateCoinGuide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinGuideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateCoinGuide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CreateCoinGuide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateCoinGuide(ctx, req.(*CreateCoinGuideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DeleteCoinGuide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinGuideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DeleteCoinGuide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DeleteCoinGuide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DeleteCoinGuide(ctx, req.(*DeleteCoinGuideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyCoinGuide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyCoinGuideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyCoinGuide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyCoinGuide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyCoinGuide(ctx, req.(*ModifyCoinGuideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeWhiteTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeWhiteTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeWhiteTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeWhiteTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeWhiteTokens(ctx, req.(*DescribeWhiteTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CreateChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateChain(ctx, req.(*CreateChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyChain(ctx, req.(*ModifyChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DeleteChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DeleteChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DeleteChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DeleteChain(ctx, req.(*DeleteChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateChainRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChainRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateChainRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CreateChainRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateChainRelation(ctx, req.(*CreateChainRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DeleteChainRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChainRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DeleteChainRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DeleteChainRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DeleteChainRelation(ctx, req.(*DeleteChainRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CheckCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CheckCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CheckCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CheckCoins(ctx, req.(*CheckCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeDex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeDexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeDex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeDex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeDex(ctx, req.(*DescribeDexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribePairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribePairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribePairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribePairs(ctx, req.(*DescribePairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribePairBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePairBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribePairBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribePairBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribePairBatch(ctx, req.(*DescribePairBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribePair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribePair(ctx, req.(*DescribePairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribePairTrends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePairTrendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribePairTrends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribePairTrends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribePairTrends(ctx, req.(*DescribePairTrendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribePairTrendsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePairTrendsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribePairTrendsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribePairTrendsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribePairTrendsV2(ctx, req.(*DescribePairTrendsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_SearchCoinAndPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCoinAndPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).SearchCoinAndPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/SearchCoinAndPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).SearchCoinAndPair(ctx, req.(*SearchCoinAndPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_AddCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).AddCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/AddCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).AddCollection(ctx, req.(*AddCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_RemoveCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).RemoveCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/RemoveCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).RemoveCollection(ctx, req.(*RemoveCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCollections(ctx, req.(*DescribeCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateDex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateDex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CreateDex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateDex(ctx, req.(*CreateDexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyDex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyDexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyDex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyDex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyDex(ctx, req.(*ModifyDexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DeleteDex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DeleteDex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DeleteDex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DeleteDex(ctx, req.(*DeleteDexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeRate(ctx, req.(*DescribeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribePairGuides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePairGuidesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribePairGuides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribePairGuides",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribePairGuides(ctx, req.(*DescribePairGuidesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinKLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinKLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinKLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinKLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinKLine(ctx, req.(*DescribeCoinKLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribePairKLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePairKLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribePairKLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribePairKLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribePairKLine(ctx, req.(*DescribePairKLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribePairScanSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePairScanSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribePairScanSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribePairScanSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribePairScanSite(ctx, req.(*DescribePairScanSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreatePairGuide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePairGuideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreatePairGuide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CreatePairGuide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreatePairGuide(ctx, req.(*CreatePairGuideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DeletePairGuide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePairGuideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DeletePairGuide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DeletePairGuide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DeletePairGuide(ctx, req.(*DeletePairGuideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyPairGuide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPairGuideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyPairGuide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyPairGuide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyPairGuide(ctx, req.(*ModifyPairGuideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinsByChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinsByChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinsByChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinsByChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinsByChain(ctx, req.(*DescribeCoinsByChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribePairByCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePairByCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribePairByCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribePairByCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribePairByCoins(ctx, req.(*DescribePairByCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinInfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinInfoByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinInfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinInfoByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinInfoByID(ctx, req.(*DescribeCoinInfoByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeTopTokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTopTokenListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeTopTokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeTopTokenList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeTopTokenList(ctx, req.(*DescribeTopTokenListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateTopToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateTopToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CreateTopToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateTopToken(ctx, req.(*CreateTopTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyTopToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyTopTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyTopToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyTopToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyTopToken(ctx, req.(*ModifyTopTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DeleteTopToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DeleteTopToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DeleteTopToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DeleteTopToken(ctx, req.(*DeleteTopTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeRecommandTokenSectionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRecommandTokenSectionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeRecommandTokenSectionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeRecommandTokenSectionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeRecommandTokenSectionList(ctx, req.(*DescribeRecommandTokenSectionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateRecommandTokenSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecommandTokenSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateRecommandTokenSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CreateRecommandTokenSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateRecommandTokenSection(ctx, req.(*CreateRecommandTokenSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyRecommandTokenSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRecommandTokenSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyRecommandTokenSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyRecommandTokenSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyRecommandTokenSection(ctx, req.(*ModifyRecommandTokenSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DeleteRecommandTokenSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecommandTokenSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DeleteRecommandTokenSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DeleteRecommandTokenSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DeleteRecommandTokenSection(ctx, req.(*DeleteRecommandTokenSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribePriceDeltaMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePriceDeltaMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribePriceDeltaMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribePriceDeltaMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribePriceDeltaMsg(ctx, req.(*DescribePriceDeltaMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeTBirdNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTBirdNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeTBirdNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeTBirdNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeTBirdNews(ctx, req.(*DescribeTBirdNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeChainSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeChainSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeChainSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeChainSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeChainSummary(ctx, req.(*DescribeChainSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateTerminalPairOHLCV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTerminalPairOHLCVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateTerminalPairOHLCV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CreateTerminalPairOHLCV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateTerminalPairOHLCV(ctx, req.(*CreateTerminalPairOHLCVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DeleteTerminalPairOHLCV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTerminalPairOHLCVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DeleteTerminalPairOHLCV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DeleteTerminalPairOHLCV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DeleteTerminalPairOHLCV(ctx, req.(*DeleteTerminalPairOHLCVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCollectionCombines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCollectionCombinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCollectionCombines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCollectionCombines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCollectionCombines(ctx, req.(*DescribeCollectionCombinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeTopPairByCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTopPairByCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeTopPairByCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeTopPairByCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeTopPairByCoin(ctx, req.(*DescribeTopPairByCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Market_ServiceDesc is the grpc.ServiceDesc for Market service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Market_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.market.v1.Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeHotCoins",
			Handler:    _Market_DescribeHotCoins_Handler,
		},
		{
			MethodName: "DescribeHotCoinsV2",
			Handler:    _Market_DescribeHotCoinsV2_Handler,
		},
		{
			MethodName: "CreateHotCoin",
			Handler:    _Market_CreateHotCoin_Handler,
		},
		{
			MethodName: "DeleteHotCoin",
			Handler:    _Market_DeleteHotCoin_Handler,
		},
		{
			MethodName: "ModifyHotCoin",
			Handler:    _Market_ModifyHotCoin_Handler,
		},
		{
			MethodName: "CreatePairTrend",
			Handler:    _Market_CreatePairTrend_Handler,
		},
		{
			MethodName: "ModifyPairTrend",
			Handler:    _Market_ModifyPairTrend_Handler,
		},
		{
			MethodName: "DeletePairTrend",
			Handler:    _Market_DeletePairTrend_Handler,
		},
		{
			MethodName: "DescribeChainsSupport",
			Handler:    _Market_DescribeChainsSupport_Handler,
		},
		{
			MethodName: "DescribeAlerts",
			Handler:    _Market_DescribeAlerts_Handler,
		},
		{
			MethodName: "CreateAlert",
			Handler:    _Market_CreateAlert_Handler,
		},
		{
			MethodName: "ModifyAlert",
			Handler:    _Market_ModifyAlert_Handler,
		},
		{
			MethodName: "RemoveAlert",
			Handler:    _Market_RemoveAlert_Handler,
		},
		{
			MethodName: "DescribeCollectionGuideList",
			Handler:    _Market_DescribeCollectionGuideList_Handler,
		},
		{
			MethodName: "DescribeCollectionGuides",
			Handler:    _Market_DescribeCollectionGuides_Handler,
		},
		{
			MethodName: "DescribeCoinSwaps",
			Handler:    _Market_DescribeCoinSwaps_Handler,
		},
		{
			MethodName: "DescribePairSwaps",
			Handler:    _Market_DescribePairSwaps_Handler,
		},
		{
			MethodName: "DescribeCoinLiquidity",
			Handler:    _Market_DescribeCoinLiquidity_Handler,
		},
		{
			MethodName: "DescribeCoinSwapStats",
			Handler:    _Market_DescribeCoinSwapStats_Handler,
		},
		{
			MethodName: "DescribeCoinPriceChart",
			Handler:    _Market_DescribeCoinPriceChart_Handler,
		},
		{
			MethodName: "DescribeCoinPriceByRange",
			Handler:    _Market_DescribeCoinPriceByRange_Handler,
		},
		{
			MethodName: "DescribeCoinPriceByTimestamp",
			Handler:    _Market_DescribeCoinPriceByTimestamp_Handler,
		},
		{
			MethodName: "DescribeCexCoins",
			Handler:    _Market_DescribeCexCoins_Handler,
		},
		{
			MethodName: "DescribeAllExtraDetail",
			Handler:    _Market_DescribeAllExtraDetail_Handler,
		},
		{
			MethodName: "DescribeMarketExtraDetail",
			Handler:    _Market_DescribeMarketExtraDetail_Handler,
		},
		{
			MethodName: "DescribeMenuCategory",
			Handler:    _Market_DescribeMenuCategory_Handler,
		},
		{
			MethodName: "ModifyMenuCategory",
			Handler:    _Market_ModifyMenuCategory_Handler,
		},
		{
			MethodName: "DescribeCategoryList",
			Handler:    _Market_DescribeCategoryList_Handler,
		},
		{
			MethodName: "ModifyCoinDescription",
			Handler:    _Market_ModifyCoinDescription_Handler,
		},
		{
			MethodName: "ModifyCoinCategory",
			Handler:    _Market_ModifyCoinCategory_Handler,
		},
		{
			MethodName: "DescribeColumnList",
			Handler:    _Market_DescribeColumnList_Handler,
		},
		{
			MethodName: "CreateColumn",
			Handler:    _Market_CreateColumn_Handler,
		},
		{
			MethodName: "RemoveColumn",
			Handler:    _Market_RemoveColumn_Handler,
		},
		{
			MethodName: "ModifyColumn",
			Handler:    _Market_ModifyColumn_Handler,
		},
		{
			MethodName: "CreateCoinCategory",
			Handler:    _Market_CreateCoinCategory_Handler,
		},
		{
			MethodName: "DescribeCoinUserChart",
			Handler:    _Market_DescribeCoinUserChart_Handler,
		},
		{
			MethodName: "DescribeCoinOrderChart",
			Handler:    _Market_DescribeCoinOrderChart_Handler,
		},
		{
			MethodName: "DescribeCoinVolumeChart",
			Handler:    _Market_DescribeCoinVolumeChart_Handler,
		},
		{
			MethodName: "DescribeCoinLiquidityChart",
			Handler:    _Market_DescribeCoinLiquidityChart_Handler,
		},
		{
			MethodName: "DescribeDeFiCoins",
			Handler:    _Market_DescribeDeFiCoins_Handler,
		},
		{
			MethodName: "DescribeCoinSimples",
			Handler:    _Market_DescribeCoinSimples_Handler,
		},
		{
			MethodName: "SearchCoins",
			Handler:    _Market_SearchCoins_Handler,
		},
		{
			MethodName: "DescribeTokens",
			Handler:    _Market_DescribeTokens_Handler,
		},
		{
			MethodName: "DescribeGuruChains",
			Handler:    _Market_DescribeGuruChains_Handler,
		},
		{
			MethodName: "DescribeSwapConfig",
			Handler:    _Market_DescribeSwapConfig_Handler,
		},
		{
			MethodName: "DescribeCoinsByFields",
			Handler:    _Market_DescribeCoinsByFields_Handler,
		},
		{
			MethodName: "DescribeTokensByFields",
			Handler:    _Market_DescribeTokensByFields_Handler,
		},
		{
			MethodName: "DescribePriceByCoinAddress",
			Handler:    _Market_DescribePriceByCoinAddress_Handler,
		},
		{
			MethodName: "DescribeCoinIDByTokens",
			Handler:    _Market_DescribeCoinIDByTokens_Handler,
		},
		{
			MethodName: "CreateCoinGuide",
			Handler:    _Market_CreateCoinGuide_Handler,
		},
		{
			MethodName: "DeleteCoinGuide",
			Handler:    _Market_DeleteCoinGuide_Handler,
		},
		{
			MethodName: "ModifyCoinGuide",
			Handler:    _Market_ModifyCoinGuide_Handler,
		},
		{
			MethodName: "DescribeWhiteTokens",
			Handler:    _Market_DescribeWhiteTokens_Handler,
		},
		{
			MethodName: "CreateChain",
			Handler:    _Market_CreateChain_Handler,
		},
		{
			MethodName: "ModifyChain",
			Handler:    _Market_ModifyChain_Handler,
		},
		{
			MethodName: "DeleteChain",
			Handler:    _Market_DeleteChain_Handler,
		},
		{
			MethodName: "CreateChainRelation",
			Handler:    _Market_CreateChainRelation_Handler,
		},
		{
			MethodName: "DeleteChainRelation",
			Handler:    _Market_DeleteChainRelation_Handler,
		},
		{
			MethodName: "CheckCoins",
			Handler:    _Market_CheckCoins_Handler,
		},
		{
			MethodName: "DescribeDex",
			Handler:    _Market_DescribeDex_Handler,
		},
		{
			MethodName: "DescribePairs",
			Handler:    _Market_DescribePairs_Handler,
		},
		{
			MethodName: "DescribePairBatch",
			Handler:    _Market_DescribePairBatch_Handler,
		},
		{
			MethodName: "DescribePair",
			Handler:    _Market_DescribePair_Handler,
		},
		{
			MethodName: "DescribePairTrends",
			Handler:    _Market_DescribePairTrends_Handler,
		},
		{
			MethodName: "DescribePairTrendsV2",
			Handler:    _Market_DescribePairTrendsV2_Handler,
		},
		{
			MethodName: "SearchCoinAndPair",
			Handler:    _Market_SearchCoinAndPair_Handler,
		},
		{
			MethodName: "AddCollection",
			Handler:    _Market_AddCollection_Handler,
		},
		{
			MethodName: "RemoveCollection",
			Handler:    _Market_RemoveCollection_Handler,
		},
		{
			MethodName: "DescribeCollections",
			Handler:    _Market_DescribeCollections_Handler,
		},
		{
			MethodName: "CreateDex",
			Handler:    _Market_CreateDex_Handler,
		},
		{
			MethodName: "ModifyDex",
			Handler:    _Market_ModifyDex_Handler,
		},
		{
			MethodName: "DeleteDex",
			Handler:    _Market_DeleteDex_Handler,
		},
		{
			MethodName: "DescribeRate",
			Handler:    _Market_DescribeRate_Handler,
		},
		{
			MethodName: "DescribePairGuides",
			Handler:    _Market_DescribePairGuides_Handler,
		},
		{
			MethodName: "DescribeCoinKLine",
			Handler:    _Market_DescribeCoinKLine_Handler,
		},
		{
			MethodName: "DescribePairKLine",
			Handler:    _Market_DescribePairKLine_Handler,
		},
		{
			MethodName: "DescribePairScanSite",
			Handler:    _Market_DescribePairScanSite_Handler,
		},
		{
			MethodName: "CreatePairGuide",
			Handler:    _Market_CreatePairGuide_Handler,
		},
		{
			MethodName: "DeletePairGuide",
			Handler:    _Market_DeletePairGuide_Handler,
		},
		{
			MethodName: "ModifyPairGuide",
			Handler:    _Market_ModifyPairGuide_Handler,
		},
		{
			MethodName: "DescribeCoinsByChain",
			Handler:    _Market_DescribeCoinsByChain_Handler,
		},
		{
			MethodName: "DescribePairByCoins",
			Handler:    _Market_DescribePairByCoins_Handler,
		},
		{
			MethodName: "DescribeCoinInfoByID",
			Handler:    _Market_DescribeCoinInfoByID_Handler,
		},
		{
			MethodName: "DescribeTopTokenList",
			Handler:    _Market_DescribeTopTokenList_Handler,
		},
		{
			MethodName: "CreateTopToken",
			Handler:    _Market_CreateTopToken_Handler,
		},
		{
			MethodName: "ModifyTopToken",
			Handler:    _Market_ModifyTopToken_Handler,
		},
		{
			MethodName: "DeleteTopToken",
			Handler:    _Market_DeleteTopToken_Handler,
		},
		{
			MethodName: "DescribeRecommandTokenSectionList",
			Handler:    _Market_DescribeRecommandTokenSectionList_Handler,
		},
		{
			MethodName: "CreateRecommandTokenSection",
			Handler:    _Market_CreateRecommandTokenSection_Handler,
		},
		{
			MethodName: "ModifyRecommandTokenSection",
			Handler:    _Market_ModifyRecommandTokenSection_Handler,
		},
		{
			MethodName: "DeleteRecommandTokenSection",
			Handler:    _Market_DeleteRecommandTokenSection_Handler,
		},
		{
			MethodName: "DescribePriceDeltaMsg",
			Handler:    _Market_DescribePriceDeltaMsg_Handler,
		},
		{
			MethodName: "DescribeTBirdNews",
			Handler:    _Market_DescribeTBirdNews_Handler,
		},
		{
			MethodName: "DescribeChainSummary",
			Handler:    _Market_DescribeChainSummary_Handler,
		},
		{
			MethodName: "CreateTerminalPairOHLCV",
			Handler:    _Market_CreateTerminalPairOHLCV_Handler,
		},
		{
			MethodName: "DeleteTerminalPairOHLCV",
			Handler:    _Market_DeleteTerminalPairOHLCV_Handler,
		},
		{
			MethodName: "DescribeCollectionCombines",
			Handler:    _Market_DescribeCollectionCombines_Handler,
		},
		{
			MethodName: "DescribeTopPairByCoin",
			Handler:    _Market_DescribeTopPairByCoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction/v1/market.proto",
}
