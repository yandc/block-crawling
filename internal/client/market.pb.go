// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: transaction/v1/market.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IntervalEnum int32

const (
	// 0-3 预留，现在只能做到15m级别 [3,4,5,6,7,8]
	IntervalEnum_Interval1s  IntervalEnum = 0
	IntervalEnum_Interval1m  IntervalEnum = 1
	IntervalEnum_Interval5m  IntervalEnum = 2
	IntervalEnum_Interval15m IntervalEnum = 3
	IntervalEnum_Interval30m IntervalEnum = 4
	IntervalEnum_Interval1h  IntervalEnum = 5
	IntervalEnum_Interval4h  IntervalEnum = 6
	IntervalEnum_Interval1d  IntervalEnum = 7
	IntervalEnum_Interval1w  IntervalEnum = 8
	IntervalEnum_Interval1Mo IntervalEnum = 9
)

// Enum value maps for IntervalEnum.
var (
	IntervalEnum_name = map[int32]string{
		0: "Interval1s",
		1: "Interval1m",
		2: "Interval5m",
		3: "Interval15m",
		4: "Interval30m",
		5: "Interval1h",
		6: "Interval4h",
		7: "Interval1d",
		8: "Interval1w",
		9: "Interval1Mo",
	}
	IntervalEnum_value = map[string]int32{
		"Interval1s":  0,
		"Interval1m":  1,
		"Interval5m":  2,
		"Interval15m": 3,
		"Interval30m": 4,
		"Interval1h":  5,
		"Interval4h":  6,
		"Interval1d":  7,
		"Interval1w":  8,
		"Interval1Mo": 9,
	}
)

func (x IntervalEnum) Enum() *IntervalEnum {
	p := new(IntervalEnum)
	*p = x
	return p
}

func (x IntervalEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntervalEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v1_market_proto_enumTypes[0].Descriptor()
}

func (IntervalEnum) Type() protoreflect.EnumType {
	return &file_transaction_v1_market_proto_enumTypes[0]
}

func (x IntervalEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntervalEnum.Descriptor instead.
func (IntervalEnum) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{0}
}

type DescribeCollectionsRequest_SortFieldEnum int32

const (
	DescribeCollectionsRequest_Price             DescribeCollectionsRequest_SortFieldEnum = 0
	DescribeCollectionsRequest_PriceDelta24h     DescribeCollectionsRequest_SortFieldEnum = 1
	DescribeCollectionsRequest_Volume24h         DescribeCollectionsRequest_SortFieldEnum = 2
	DescribeCollectionsRequest_MarketCap         DescribeCollectionsRequest_SortFieldEnum = 3
	DescribeCollectionsRequest_PriceDelta7d      DescribeCollectionsRequest_SortFieldEnum = 4
	DescribeCollectionsRequest_PairPriceDelta5m  DescribeCollectionsRequest_SortFieldEnum = 5
	DescribeCollectionsRequest_PairPriceDelta1h  DescribeCollectionsRequest_SortFieldEnum = 6
	DescribeCollectionsRequest_PairPriceDelta6h  DescribeCollectionsRequest_SortFieldEnum = 7
	DescribeCollectionsRequest_PairPriceDelta24h DescribeCollectionsRequest_SortFieldEnum = 8
	DescribeCollectionsRequest_PairVolume24h     DescribeCollectionsRequest_SortFieldEnum = 9
	DescribeCollectionsRequest_PairOrders24h     DescribeCollectionsRequest_SortFieldEnum = 10
	DescribeCollectionsRequest_PairFdv           DescribeCollectionsRequest_SortFieldEnum = 11
	DescribeCollectionsRequest_PairLiquidity     DescribeCollectionsRequest_SortFieldEnum = 12
	DescribeCollectionsRequest_PairPrice         DescribeCollectionsRequest_SortFieldEnum = 13
)

// Enum value maps for DescribeCollectionsRequest_SortFieldEnum.
var (
	DescribeCollectionsRequest_SortFieldEnum_name = map[int32]string{
		0:  "Price",
		1:  "PriceDelta24h",
		2:  "Volume24h",
		3:  "MarketCap",
		4:  "PriceDelta7d",
		5:  "PairPriceDelta5m",
		6:  "PairPriceDelta1h",
		7:  "PairPriceDelta6h",
		8:  "PairPriceDelta24h",
		9:  "PairVolume24h",
		10: "PairOrders24h",
		11: "PairFdv",
		12: "PairLiquidity",
		13: "PairPrice",
	}
	DescribeCollectionsRequest_SortFieldEnum_value = map[string]int32{
		"Price":             0,
		"PriceDelta24h":     1,
		"Volume24h":         2,
		"MarketCap":         3,
		"PriceDelta7d":      4,
		"PairPriceDelta5m":  5,
		"PairPriceDelta1h":  6,
		"PairPriceDelta6h":  7,
		"PairPriceDelta24h": 8,
		"PairVolume24h":     9,
		"PairOrders24h":     10,
		"PairFdv":           11,
		"PairLiquidity":     12,
		"PairPrice":         13,
	}
)

func (x DescribeCollectionsRequest_SortFieldEnum) Enum() *DescribeCollectionsRequest_SortFieldEnum {
	p := new(DescribeCollectionsRequest_SortFieldEnum)
	*p = x
	return p
}

func (x DescribeCollectionsRequest_SortFieldEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DescribeCollectionsRequest_SortFieldEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v1_market_proto_enumTypes[1].Descriptor()
}

func (DescribeCollectionsRequest_SortFieldEnum) Type() protoreflect.EnumType {
	return &file_transaction_v1_market_proto_enumTypes[1]
}

func (x DescribeCollectionsRequest_SortFieldEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DescribeCollectionsRequest_SortFieldEnum.Descriptor instead.
func (DescribeCollectionsRequest_SortFieldEnum) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{25, 0}
}

type DescribeCexCoinsRequest_SortFieldEnum int32

const (
	DescribeCexCoinsRequest_Price         DescribeCexCoinsRequest_SortFieldEnum = 0
	DescribeCexCoinsRequest_PriceDelta24h DescribeCexCoinsRequest_SortFieldEnum = 1
	DescribeCexCoinsRequest_Volume24h     DescribeCexCoinsRequest_SortFieldEnum = 2
	DescribeCexCoinsRequest_MarketCap     DescribeCexCoinsRequest_SortFieldEnum = 3
	DescribeCexCoinsRequest_PriceDelta7d  DescribeCexCoinsRequest_SortFieldEnum = 4
	DescribeCexCoinsRequest_PriceDelta5m  DescribeCexCoinsRequest_SortFieldEnum = 14
	DescribeCexCoinsRequest_PriceDelta1h  DescribeCexCoinsRequest_SortFieldEnum = 15
)

// Enum value maps for DescribeCexCoinsRequest_SortFieldEnum.
var (
	DescribeCexCoinsRequest_SortFieldEnum_name = map[int32]string{
		0:  "Price",
		1:  "PriceDelta24h",
		2:  "Volume24h",
		3:  "MarketCap",
		4:  "PriceDelta7d",
		14: "PriceDelta5m",
		15: "PriceDelta1h",
	}
	DescribeCexCoinsRequest_SortFieldEnum_value = map[string]int32{
		"Price":         0,
		"PriceDelta24h": 1,
		"Volume24h":     2,
		"MarketCap":     3,
		"PriceDelta7d":  4,
		"PriceDelta5m":  14,
		"PriceDelta1h":  15,
	}
)

func (x DescribeCexCoinsRequest_SortFieldEnum) Enum() *DescribeCexCoinsRequest_SortFieldEnum {
	p := new(DescribeCexCoinsRequest_SortFieldEnum)
	*p = x
	return p
}

func (x DescribeCexCoinsRequest_SortFieldEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DescribeCexCoinsRequest_SortFieldEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v1_market_proto_enumTypes[2].Descriptor()
}

func (DescribeCexCoinsRequest_SortFieldEnum) Type() protoreflect.EnumType {
	return &file_transaction_v1_market_proto_enumTypes[2]
}

func (x DescribeCexCoinsRequest_SortFieldEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DescribeCexCoinsRequest_SortFieldEnum.Descriptor instead.
func (DescribeCexCoinsRequest_SortFieldEnum) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{65, 0}
}

type DescribeDeFiCoinsRequest_SortFieldDefine int32

const (
	DescribeDeFiCoinsRequest_Liquidity     DescribeDeFiCoinsRequest_SortFieldDefine = 0
	DescribeDeFiCoinsRequest_Volume24h     DescribeDeFiCoinsRequest_SortFieldDefine = 1
	DescribeDeFiCoinsRequest_Orders24h     DescribeDeFiCoinsRequest_SortFieldDefine = 2
	DescribeDeFiCoinsRequest_Users24h      DescribeDeFiCoinsRequest_SortFieldDefine = 3
	DescribeDeFiCoinsRequest_Price         DescribeDeFiCoinsRequest_SortFieldDefine = 4
	DescribeDeFiCoinsRequest_PriceDelta24h DescribeDeFiCoinsRequest_SortFieldDefine = 5
	DescribeDeFiCoinsRequest_Name          DescribeDeFiCoinsRequest_SortFieldDefine = 6
)

// Enum value maps for DescribeDeFiCoinsRequest_SortFieldDefine.
var (
	DescribeDeFiCoinsRequest_SortFieldDefine_name = map[int32]string{
		0: "Liquidity",
		1: "Volume24h",
		2: "Orders24h",
		3: "Users24h",
		4: "Price",
		5: "PriceDelta24h",
		6: "Name",
	}
	DescribeDeFiCoinsRequest_SortFieldDefine_value = map[string]int32{
		"Liquidity":     0,
		"Volume24h":     1,
		"Orders24h":     2,
		"Users24h":      3,
		"Price":         4,
		"PriceDelta24h": 5,
		"Name":          6,
	}
)

func (x DescribeDeFiCoinsRequest_SortFieldDefine) Enum() *DescribeDeFiCoinsRequest_SortFieldDefine {
	p := new(DescribeDeFiCoinsRequest_SortFieldDefine)
	*p = x
	return p
}

func (x DescribeDeFiCoinsRequest_SortFieldDefine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DescribeDeFiCoinsRequest_SortFieldDefine) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v1_market_proto_enumTypes[3].Descriptor()
}

func (DescribeDeFiCoinsRequest_SortFieldDefine) Type() protoreflect.EnumType {
	return &file_transaction_v1_market_proto_enumTypes[3]
}

func (x DescribeDeFiCoinsRequest_SortFieldDefine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DescribeDeFiCoinsRequest_SortFieldDefine.Descriptor instead.
func (DescribeDeFiCoinsRequest_SortFieldDefine) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{94, 0}
}

type DescribeChainSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Chain    string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *DescribeChainSummaryRequest) Reset() {
	*x = DescribeChainSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeChainSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeChainSummaryRequest) ProtoMessage() {}

func (x *DescribeChainSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeChainSummaryRequest.ProtoReflect.Descriptor instead.
func (*DescribeChainSummaryRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{0}
}

func (x *DescribeChainSummaryRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeChainSummaryRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeChainSummaryRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type DescribeChainSummaryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume24H   float64 `protobuf:"fixed64,1,opt,name=volume24h,proto3" json:"volume24h,omitempty"`
	Txn24H      int64   `protobuf:"varint,2,opt,name=txn24h,proto3" json:"txn24h,omitempty"`
	BlockHeight int64   `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
}

func (x *DescribeChainSummaryReply) Reset() {
	*x = DescribeChainSummaryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeChainSummaryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeChainSummaryReply) ProtoMessage() {}

func (x *DescribeChainSummaryReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeChainSummaryReply.ProtoReflect.Descriptor instead.
func (*DescribeChainSummaryReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{1}
}

func (x *DescribeChainSummaryReply) GetVolume24H() float64 {
	if x != nil {
		return x.Volume24H
	}
	return 0
}

func (x *DescribeChainSummaryReply) GetTxn24H() int64 {
	if x != nil {
		return x.Txn24H
	}
	return 0
}

func (x *DescribeChainSummaryReply) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type DescribeTBirdNewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string  `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Limit    int32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	EndID    *string `protobuf:"bytes,3,opt,name=endID,proto3,oneof" json:"endID,omitempty"`
	EndTS    *int32  `protobuf:"varint,4,opt,name=endTS,proto3,oneof" json:"endTS,omitempty"`
	Category *string `protobuf:"bytes,5,opt,name=category,proto3,oneof" json:"category,omitempty"`
}

func (x *DescribeTBirdNewsRequest) Reset() {
	*x = DescribeTBirdNewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTBirdNewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTBirdNewsRequest) ProtoMessage() {}

func (x *DescribeTBirdNewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTBirdNewsRequest.ProtoReflect.Descriptor instead.
func (*DescribeTBirdNewsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{2}
}

func (x *DescribeTBirdNewsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeTBirdNewsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DescribeTBirdNewsRequest) GetEndID() string {
	if x != nil && x.EndID != nil {
		return *x.EndID
	}
	return ""
}

func (x *DescribeTBirdNewsRequest) GetEndTS() int32 {
	if x != nil && x.EndTS != nil {
		return *x.EndTS
	}
	return 0
}

func (x *DescribeTBirdNewsRequest) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

type DescribeTBirdNewsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	News []*DescribeTBirdNewsReply_TBirdNews `protobuf:"bytes,1,rep,name=news,proto3" json:"news,omitempty"`
}

func (x *DescribeTBirdNewsReply) Reset() {
	*x = DescribeTBirdNewsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTBirdNewsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTBirdNewsReply) ProtoMessage() {}

func (x *DescribeTBirdNewsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTBirdNewsReply.ProtoReflect.Descriptor instead.
func (*DescribeTBirdNewsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{3}
}

func (x *DescribeTBirdNewsReply) GetNews() []*DescribeTBirdNewsReply_TBirdNews {
	if x != nil {
		return x.News
	}
	return nil
}

type DeletePairTrendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeletePairTrendRequest) Reset() {
	*x = DeletePairTrendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePairTrendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePairTrendRequest) ProtoMessage() {}

func (x *DeletePairTrendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePairTrendRequest.ProtoReflect.Descriptor instead.
func (*DeletePairTrendRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{4}
}

func (x *DeletePairTrendRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DeletePairTrendRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeletePairTrendReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *DeletePairTrendReply) Reset() {
	*x = DeletePairTrendReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePairTrendReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePairTrendReply) ProtoMessage() {}

func (x *DeletePairTrendReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePairTrendReply.ProtoReflect.Descriptor instead.
func (*DeletePairTrendReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{5}
}

func (x *DeletePairTrendReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DeletePairTrendReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeletePairTrendReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type ModifyPairTrendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Chain   string `protobuf:"bytes,3,opt,name=chain,proto3" json:"chain,omitempty"`
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Weight  int32  `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	Type    int32  `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	Pin     int32  `protobuf:"varint,7,opt,name=pin,proto3" json:"pin,omitempty"`
}

func (x *ModifyPairTrendRequest) Reset() {
	*x = ModifyPairTrendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPairTrendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPairTrendRequest) ProtoMessage() {}

func (x *ModifyPairTrendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPairTrendRequest.ProtoReflect.Descriptor instead.
func (*ModifyPairTrendRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{6}
}

func (x *ModifyPairTrendRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyPairTrendRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModifyPairTrendRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *ModifyPairTrendRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ModifyPairTrendRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ModifyPairTrendRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ModifyPairTrendRequest) GetPin() int32 {
	if x != nil {
		return x.Pin
	}
	return 0
}

type ModifyPairTrendReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *ModifyPairTrendReply) Reset() {
	*x = ModifyPairTrendReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPairTrendReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPairTrendReply) ProtoMessage() {}

func (x *ModifyPairTrendReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPairTrendReply.ProtoReflect.Descriptor instead.
func (*ModifyPairTrendReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{7}
}

func (x *ModifyPairTrendReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ModifyPairTrendReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ModifyPairTrendReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type CreatePairTrendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Chain   string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Weight  int32  `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	Type    int32  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CreatePairTrendRequest) Reset() {
	*x = CreatePairTrendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePairTrendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePairTrendRequest) ProtoMessage() {}

func (x *CreatePairTrendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePairTrendRequest.ProtoReflect.Descriptor instead.
func (*CreatePairTrendRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{8}
}

func (x *CreatePairTrendRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreatePairTrendRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *CreatePairTrendRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreatePairTrendRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *CreatePairTrendRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type CreatePairTrendReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreatePairTrendReply) Reset() {
	*x = CreatePairTrendReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePairTrendReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePairTrendReply) ProtoMessage() {}

func (x *CreatePairTrendReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePairTrendReply.ProtoReflect.Descriptor instead.
func (*CreatePairTrendReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{9}
}

func (x *CreatePairTrendReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteHotCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteHotCoinRequest) Reset() {
	*x = DeleteHotCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHotCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHotCoinRequest) ProtoMessage() {}

func (x *DeleteHotCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHotCoinRequest.ProtoReflect.Descriptor instead.
func (*DeleteHotCoinRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteHotCoinRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DeleteHotCoinRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteHotCoinReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *DeleteHotCoinReply) Reset() {
	*x = DeleteHotCoinReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHotCoinReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHotCoinReply) ProtoMessage() {}

func (x *DeleteHotCoinReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHotCoinReply.ProtoReflect.Descriptor instead.
func (*DeleteHotCoinReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteHotCoinReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DeleteHotCoinReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteHotCoinReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type ModifyHotCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	CoinID  string `protobuf:"bytes,3,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Weight  int32  `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	Pin     int32  `protobuf:"varint,5,opt,name=pin,proto3" json:"pin,omitempty"`
}

func (x *ModifyHotCoinRequest) Reset() {
	*x = ModifyHotCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyHotCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyHotCoinRequest) ProtoMessage() {}

func (x *ModifyHotCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyHotCoinRequest.ProtoReflect.Descriptor instead.
func (*ModifyHotCoinRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{12}
}

func (x *ModifyHotCoinRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyHotCoinRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModifyHotCoinRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *ModifyHotCoinRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ModifyHotCoinRequest) GetPin() int32 {
	if x != nil {
		return x.Pin
	}
	return 0
}

type ModifyHotCoinReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *ModifyHotCoinReply) Reset() {
	*x = ModifyHotCoinReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyHotCoinReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyHotCoinReply) ProtoMessage() {}

func (x *ModifyHotCoinReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyHotCoinReply.ProtoReflect.Descriptor instead.
func (*ModifyHotCoinReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{13}
}

func (x *ModifyHotCoinReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ModifyHotCoinReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ModifyHotCoinReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type CreateHotCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Weight  int32  `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *CreateHotCoinRequest) Reset() {
	*x = CreateHotCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHotCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHotCoinRequest) ProtoMessage() {}

func (x *CreateHotCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHotCoinRequest.ProtoReflect.Descriptor instead.
func (*CreateHotCoinRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{14}
}

func (x *CreateHotCoinRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateHotCoinRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *CreateHotCoinRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type CreateHotCoinReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateHotCoinReply) Reset() {
	*x = CreateHotCoinReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHotCoinReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHotCoinReply) ProtoMessage() {}

func (x *CreateHotCoinReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHotCoinReply.ProtoReflect.Descriptor instead.
func (*CreateHotCoinReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{15}
}

func (x *CreateHotCoinReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DescribePairScanSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Chain   string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *DescribePairScanSiteRequest) Reset() {
	*x = DescribePairScanSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairScanSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairScanSiteRequest) ProtoMessage() {}

func (x *DescribePairScanSiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairScanSiteRequest.ProtoReflect.Descriptor instead.
func (*DescribePairScanSiteRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{16}
}

func (x *DescribePairScanSiteRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribePairScanSiteRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribePairScanSiteRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type DescribePairScanSiteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanSites []*DescribePairScanSiteReply_ScanSite `protobuf:"bytes,1,rep,name=scanSites,proto3" json:"scanSites,omitempty"`
}

func (x *DescribePairScanSiteReply) Reset() {
	*x = DescribePairScanSiteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairScanSiteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairScanSiteReply) ProtoMessage() {}

func (x *DescribePairScanSiteReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairScanSiteReply.ProtoReflect.Descriptor instead.
func (*DescribePairScanSiteReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{17}
}

func (x *DescribePairScanSiteReply) GetScanSites() []*DescribePairScanSiteReply_ScanSite {
	if x != nil {
		return x.ScanSites
	}
	return nil
}

type DescribePairKLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId        string       `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Chain          string       `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Address        string       `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Currency       string       `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Interval       IntervalEnum `protobuf:"varint,5,opt,name=interval,proto3,enum=api.market.v1.IntervalEnum" json:"interval,omitempty"`
	BeginTimestamp *uint32      `protobuf:"varint,6,opt,name=beginTimestamp,proto3,oneof" json:"beginTimestamp,omitempty"`
	EndTimestamp   *uint32      `protobuf:"varint,7,opt,name=endTimestamp,proto3,oneof" json:"endTimestamp,omitempty"`
	Limit          *int32       `protobuf:"varint,8,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *DescribePairKLineRequest) Reset() {
	*x = DescribePairKLineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairKLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairKLineRequest) ProtoMessage() {}

func (x *DescribePairKLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairKLineRequest.ProtoReflect.Descriptor instead.
func (*DescribePairKLineRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{18}
}

func (x *DescribePairKLineRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribePairKLineRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribePairKLineRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribePairKLineRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribePairKLineRequest) GetInterval() IntervalEnum {
	if x != nil {
		return x.Interval
	}
	return IntervalEnum_Interval1s
}

func (x *DescribePairKLineRequest) GetBeginTimestamp() uint32 {
	if x != nil && x.BeginTimestamp != nil {
		return *x.BeginTimestamp
	}
	return 0
}

func (x *DescribePairKLineRequest) GetEndTimestamp() uint32 {
	if x != nil && x.EndTimestamp != nil {
		return *x.EndTimestamp
	}
	return 0
}

func (x *DescribePairKLineRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type DescribeCoinKLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId        string       `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID         string       `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Currency       string       `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Interval       IntervalEnum `protobuf:"varint,4,opt,name=interval,proto3,enum=api.market.v1.IntervalEnum" json:"interval,omitempty"`
	BeginTimestamp *uint32      `protobuf:"varint,5,opt,name=beginTimestamp,proto3,oneof" json:"beginTimestamp,omitempty"`
	EndTimestamp   *uint32      `protobuf:"varint,6,opt,name=endTimestamp,proto3,oneof" json:"endTimestamp,omitempty"`
	Limit          *int32       `protobuf:"varint,7,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *DescribeCoinKLineRequest) Reset() {
	*x = DescribeCoinKLineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinKLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinKLineRequest) ProtoMessage() {}

func (x *DescribeCoinKLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinKLineRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinKLineRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{19}
}

func (x *DescribeCoinKLineRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinKLineRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinKLineRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeCoinKLineRequest) GetInterval() IntervalEnum {
	if x != nil {
		return x.Interval
	}
	return IntervalEnum_Interval1s
}

func (x *DescribeCoinKLineRequest) GetBeginTimestamp() uint32 {
	if x != nil && x.BeginTimestamp != nil {
		return *x.BeginTimestamp
	}
	return 0
}

func (x *DescribeCoinKLineRequest) GetEndTimestamp() uint32 {
	if x != nil && x.EndTimestamp != nil {
		return *x.EndTimestamp
	}
	return 0
}

func (x *DescribeCoinKLineRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type DescribeCoinKLineReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Klines []*DescribeCoinKLineReply_KLine `protobuf:"bytes,1,rep,name=klines,proto3" json:"klines,omitempty"`
}

func (x *DescribeCoinKLineReply) Reset() {
	*x = DescribeCoinKLineReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinKLineReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinKLineReply) ProtoMessage() {}

func (x *DescribeCoinKLineReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinKLineReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinKLineReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{20}
}

func (x *DescribeCoinKLineReply) GetKlines() []*DescribeCoinKLineReply_KLine {
	if x != nil {
		return x.Klines
	}
	return nil
}

type AddCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string   `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	UserID  string   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	CoinIDs []string `protobuf:"bytes,3,rep,name=coinIDs,proto3" json:"coinIDs,omitempty"`
	Type    int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AddCollectionRequest) Reset() {
	*x = AddCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCollectionRequest) ProtoMessage() {}

func (x *AddCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCollectionRequest.ProtoReflect.Descriptor instead.
func (*AddCollectionRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{21}
}

func (x *AddCollectionRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *AddCollectionRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AddCollectionRequest) GetCoinIDs() []string {
	if x != nil {
		return x.CoinIDs
	}
	return nil
}

func (x *AddCollectionRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type AddCollectionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *AddCollectionReply) Reset() {
	*x = AddCollectionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCollectionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCollectionReply) ProtoMessage() {}

func (x *AddCollectionReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCollectionReply.ProtoReflect.Descriptor instead.
func (*AddCollectionReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{22}
}

func (x *AddCollectionReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AddCollectionReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddCollectionReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type RemoveCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	UserID  string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	CoinID  string `protobuf:"bytes,3,opt,name=coinID,proto3" json:"coinID,omitempty"`
}

func (x *RemoveCollectionRequest) Reset() {
	*x = RemoveCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCollectionRequest) ProtoMessage() {}

func (x *RemoveCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCollectionRequest.ProtoReflect.Descriptor instead.
func (*RemoveCollectionRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{23}
}

func (x *RemoveCollectionRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *RemoveCollectionRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RemoveCollectionRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

type RemoveCollectionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *RemoveCollectionReply) Reset() {
	*x = RemoveCollectionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCollectionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCollectionReply) ProtoMessage() {}

func (x *RemoveCollectionReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCollectionReply.ProtoReflect.Descriptor instead.
func (*RemoveCollectionReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{24}
}

func (x *RemoveCollectionReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RemoveCollectionReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemoveCollectionReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type DescribeCollectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   string                                   `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	UserID    string                                   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Type      int32                                    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Currency  string                                   `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Page      int32                                    `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int32                                    `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	SortField DescribeCollectionsRequest_SortFieldEnum `protobuf:"varint,7,opt,name=sortField,proto3,enum=api.market.v1.DescribeCollectionsRequest_SortFieldEnum" json:"sortField,omitempty"`
	SortType  string                                   `protobuf:"bytes,8,opt,name=sortType,proto3" json:"sortType,omitempty"`
}

func (x *DescribeCollectionsRequest) Reset() {
	*x = DescribeCollectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCollectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCollectionsRequest) ProtoMessage() {}

func (x *DescribeCollectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCollectionsRequest.ProtoReflect.Descriptor instead.
func (*DescribeCollectionsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{25}
}

func (x *DescribeCollectionsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCollectionsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DescribeCollectionsRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DescribeCollectionsRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeCollectionsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeCollectionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribeCollectionsRequest) GetSortField() DescribeCollectionsRequest_SortFieldEnum {
	if x != nil {
		return x.SortField
	}
	return DescribeCollectionsRequest_Price
}

func (x *DescribeCollectionsRequest) GetSortType() string {
	if x != nil {
		return x.SortType
	}
	return ""
}

type DescribeCollectionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32                            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Type  int32                            `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Coins []*DescribeCollectionsReply_Coin `protobuf:"bytes,3,rep,name=coins,proto3" json:"coins,omitempty"`
	Pairs []*DescribeCollectionsReply_Pair `protobuf:"bytes,4,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *DescribeCollectionsReply) Reset() {
	*x = DescribeCollectionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCollectionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCollectionsReply) ProtoMessage() {}

func (x *DescribeCollectionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCollectionsReply.ProtoReflect.Descriptor instead.
func (*DescribeCollectionsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{26}
}

func (x *DescribeCollectionsReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DescribeCollectionsReply) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DescribeCollectionsReply) GetCoins() []*DescribeCollectionsReply_Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

func (x *DescribeCollectionsReply) GetPairs() []*DescribeCollectionsReply_Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type SearchCoinAndPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Keyword  string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	PageSize int32  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *SearchCoinAndPairRequest) Reset() {
	*x = SearchCoinAndPairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCoinAndPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCoinAndPairRequest) ProtoMessage() {}

func (x *SearchCoinAndPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCoinAndPairRequest.ProtoReflect.Descriptor instead.
func (*SearchCoinAndPairRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{27}
}

func (x *SearchCoinAndPairRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *SearchCoinAndPairRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchCoinAndPairRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SearchCoinAndPairReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*CoinAndPair `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *SearchCoinAndPairReply) Reset() {
	*x = SearchCoinAndPairReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCoinAndPairReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCoinAndPairReply) ProtoMessage() {}

func (x *SearchCoinAndPairReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCoinAndPairReply.ProtoReflect.Descriptor instead.
func (*SearchCoinAndPairReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{28}
}

func (x *SearchCoinAndPairReply) GetCoins() []*CoinAndPair {
	if x != nil {
		return x.Coins
	}
	return nil
}

type CoinAndPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID      string             `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Name        string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol      string             `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Image       string             `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Type        int32              `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	ChainIcon   string             `protobuf:"bytes,6,opt,name=chainIcon,proto3" json:"chainIcon,omitempty"`
	DexIcon     string             `protobuf:"bytes,7,opt,name=dexIcon,proto3" json:"dexIcon,omitempty"`
	Price       float32            `protobuf:"fixed32,8,opt,name=price,proto3" json:"price,omitempty"`
	PriceDelta  float32            `protobuf:"fixed32,9,opt,name=priceDelta,proto3" json:"priceDelta,omitempty"`
	Liquidity   float32            `protobuf:"fixed32,10,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Volume      float32            `protobuf:"fixed32,11,opt,name=volume,proto3" json:"volume,omitempty"`
	CreatedAt   int32              `protobuf:"varint,12,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	PairAddress string             `protobuf:"bytes,13,opt,name=pairAddress,proto3" json:"pairAddress,omitempty"`
	BaseToken   *CoinAndPair_Token `protobuf:"bytes,14,opt,name=baseToken,proto3" json:"baseToken,omitempty"`
	QuoteToken  *CoinAndPair_Token `protobuf:"bytes,15,opt,name=quoteToken,proto3" json:"quoteToken,omitempty"`
	Chain       string             `protobuf:"bytes,16,opt,name=chain,proto3" json:"chain,omitempty"`
	DexID       string             `protobuf:"bytes,17,opt,name=dexID,proto3" json:"dexID,omitempty"`
	MarketCap   float32            `protobuf:"fixed32,18,opt,name=marketCap,proto3" json:"marketCap,omitempty"`
}

func (x *CoinAndPair) Reset() {
	*x = CoinAndPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinAndPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinAndPair) ProtoMessage() {}

func (x *CoinAndPair) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinAndPair.ProtoReflect.Descriptor instead.
func (*CoinAndPair) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{29}
}

func (x *CoinAndPair) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *CoinAndPair) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoinAndPair) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CoinAndPair) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CoinAndPair) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CoinAndPair) GetChainIcon() string {
	if x != nil {
		return x.ChainIcon
	}
	return ""
}

func (x *CoinAndPair) GetDexIcon() string {
	if x != nil {
		return x.DexIcon
	}
	return ""
}

func (x *CoinAndPair) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CoinAndPair) GetPriceDelta() float32 {
	if x != nil {
		return x.PriceDelta
	}
	return 0
}

func (x *CoinAndPair) GetLiquidity() float32 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *CoinAndPair) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CoinAndPair) GetCreatedAt() int32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CoinAndPair) GetPairAddress() string {
	if x != nil {
		return x.PairAddress
	}
	return ""
}

func (x *CoinAndPair) GetBaseToken() *CoinAndPair_Token {
	if x != nil {
		return x.BaseToken
	}
	return nil
}

func (x *CoinAndPair) GetQuoteToken() *CoinAndPair_Token {
	if x != nil {
		return x.QuoteToken
	}
	return nil
}

func (x *CoinAndPair) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *CoinAndPair) GetDexID() string {
	if x != nil {
		return x.DexID
	}
	return ""
}

func (x *CoinAndPair) GetMarketCap() float32 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

type DescribeDexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string  `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Chain   *string `protobuf:"bytes,2,opt,name=chain,proto3,oneof" json:"chain,omitempty"`
}

func (x *DescribeDexRequest) Reset() {
	*x = DescribeDexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDexRequest) ProtoMessage() {}

func (x *DescribeDexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDexRequest.ProtoReflect.Descriptor instead.
func (*DescribeDexRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{30}
}

func (x *DescribeDexRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeDexRequest) GetChain() string {
	if x != nil && x.Chain != nil {
		return *x.Chain
	}
	return ""
}

type DescribeDexReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dexes []*DescribeDexReply_Dex `protobuf:"bytes,1,rep,name=dexes,proto3" json:"dexes,omitempty"`
}

func (x *DescribeDexReply) Reset() {
	*x = DescribeDexReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDexReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDexReply) ProtoMessage() {}

func (x *DescribeDexReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDexReply.ProtoReflect.Descriptor instead.
func (*DescribeDexReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{31}
}

func (x *DescribeDexReply) GetDexes() []*DescribeDexReply_Dex {
	if x != nil {
		return x.Dexes
	}
	return nil
}

type DescribeHotCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Limit    int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *DescribeHotCoinsRequest) Reset() {
	*x = DescribeHotCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeHotCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeHotCoinsRequest) ProtoMessage() {}

func (x *DescribeHotCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeHotCoinsRequest.ProtoReflect.Descriptor instead.
func (*DescribeHotCoinsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{32}
}

func (x *DescribeHotCoinsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeHotCoinsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DescribeHotCoinsRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type DescribeHotCoinsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*DescribeHotCoinsReply_HotCoin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *DescribeHotCoinsReply) Reset() {
	*x = DescribeHotCoinsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeHotCoinsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeHotCoinsReply) ProtoMessage() {}

func (x *DescribeHotCoinsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeHotCoinsReply.ProtoReflect.Descriptor instead.
func (*DescribeHotCoinsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{33}
}

func (x *DescribeHotCoinsReply) GetCoins() []*DescribeHotCoinsReply_HotCoin {
	if x != nil {
		return x.Coins
	}
	return nil
}

type DescribeHotCoinsV2Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*DescribeHotCoinsV2Reply_HotCoin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *DescribeHotCoinsV2Reply) Reset() {
	*x = DescribeHotCoinsV2Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeHotCoinsV2Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeHotCoinsV2Reply) ProtoMessage() {}

func (x *DescribeHotCoinsV2Reply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeHotCoinsV2Reply.ProtoReflect.Descriptor instead.
func (*DescribeHotCoinsV2Reply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{34}
}

func (x *DescribeHotCoinsV2Reply) GetCoins() []*DescribeHotCoinsV2Reply_HotCoin {
	if x != nil {
		return x.Coins
	}
	return nil
}

type DescribeChainsSupportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Type    int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DescribeChainsSupportRequest) Reset() {
	*x = DescribeChainsSupportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeChainsSupportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeChainsSupportRequest) ProtoMessage() {}

func (x *DescribeChainsSupportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeChainsSupportRequest.ProtoReflect.Descriptor instead.
func (*DescribeChainsSupportRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{35}
}

func (x *DescribeChainsSupportRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeChainsSupportRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type DescribeChainsSupportReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chains []*DescribeChainsSupportReply_Chain `protobuf:"bytes,1,rep,name=chains,proto3" json:"chains,omitempty"`
}

func (x *DescribeChainsSupportReply) Reset() {
	*x = DescribeChainsSupportReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeChainsSupportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeChainsSupportReply) ProtoMessage() {}

func (x *DescribeChainsSupportReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeChainsSupportReply.ProtoReflect.Descriptor instead.
func (*DescribeChainsSupportReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{36}
}

func (x *DescribeChainsSupportReply) GetChains() []*DescribeChainsSupportReply_Chain {
	if x != nil {
		return x.Chains
	}
	return nil
}

type ModifyAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	AlertID   int32  `protobuf:"varint,2,opt,name=alertID,proto3" json:"alertID,omitempty"`
	AlertType int32  `protobuf:"varint,3,opt,name=alertType,proto3" json:"alertType,omitempty"`
	Currency  string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Value     string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Frequency int32  `protobuf:"varint,6,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (x *ModifyAlertRequest) Reset() {
	*x = ModifyAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyAlertRequest) ProtoMessage() {}

func (x *ModifyAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyAlertRequest.ProtoReflect.Descriptor instead.
func (*ModifyAlertRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{37}
}

func (x *ModifyAlertRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyAlertRequest) GetAlertID() int32 {
	if x != nil {
		return x.AlertID
	}
	return 0
}

func (x *ModifyAlertRequest) GetAlertType() int32 {
	if x != nil {
		return x.AlertType
	}
	return 0
}

func (x *ModifyAlertRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ModifyAlertRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ModifyAlertRequest) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

type ModifyAlertReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *ModifyAlertReply) Reset() {
	*x = ModifyAlertReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyAlertReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyAlertReply) ProtoMessage() {}

func (x *ModifyAlertReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyAlertReply.ProtoReflect.Descriptor instead.
func (*ModifyAlertReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{38}
}

func (x *ModifyAlertReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ModifyAlertReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ModifyAlertReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type DescribeAlertsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	UserID  string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *DescribeAlertsRequest) Reset() {
	*x = DescribeAlertsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAlertsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAlertsRequest) ProtoMessage() {}

func (x *DescribeAlertsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAlertsRequest.ProtoReflect.Descriptor instead.
func (*DescribeAlertsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{39}
}

func (x *DescribeAlertsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeAlertsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type DescribeAlertsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinAlerts []*DescribeAlertsReply_CoinAlerts `protobuf:"bytes,1,rep,name=coinAlerts,proto3" json:"coinAlerts,omitempty"`
}

func (x *DescribeAlertsReply) Reset() {
	*x = DescribeAlertsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAlertsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAlertsReply) ProtoMessage() {}

func (x *DescribeAlertsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAlertsReply.ProtoReflect.Descriptor instead.
func (*DescribeAlertsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{40}
}

func (x *DescribeAlertsReply) GetCoinAlerts() []*DescribeAlertsReply_CoinAlerts {
	if x != nil {
		return x.CoinAlerts
	}
	return nil
}

type CreateAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	AlertID   int32  `protobuf:"varint,2,opt,name=alertID,proto3" json:"alertID,omitempty"`
	UserID    string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	CoinID    string `protobuf:"bytes,4,opt,name=coinID,proto3" json:"coinID,omitempty"`
	AlertType int32  `protobuf:"varint,5,opt,name=alertType,proto3" json:"alertType,omitempty"`
	Currency  string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	Value     string `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	Frequency int32  `protobuf:"varint,8,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Type      int32  `protobuf:"varint,9,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CreateAlertRequest) Reset() {
	*x = CreateAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlertRequest) ProtoMessage() {}

func (x *CreateAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlertRequest.ProtoReflect.Descriptor instead.
func (*CreateAlertRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{41}
}

func (x *CreateAlertRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateAlertRequest) GetAlertID() int32 {
	if x != nil {
		return x.AlertID
	}
	return 0
}

func (x *CreateAlertRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateAlertRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *CreateAlertRequest) GetAlertType() int32 {
	if x != nil {
		return x.AlertType
	}
	return 0
}

func (x *CreateAlertRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CreateAlertRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CreateAlertRequest) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *CreateAlertRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type CreateAlertReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *CreateAlertReply) Reset() {
	*x = CreateAlertReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAlertReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlertReply) ProtoMessage() {}

func (x *CreateAlertReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlertReply.ProtoReflect.Descriptor instead.
func (*CreateAlertReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{42}
}

func (x *CreateAlertReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateAlertReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateAlertReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type RemoveAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	AlertID int32  `protobuf:"varint,2,opt,name=alertID,proto3" json:"alertID,omitempty"`
}

func (x *RemoveAlertRequest) Reset() {
	*x = RemoveAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAlertRequest) ProtoMessage() {}

func (x *RemoveAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAlertRequest.ProtoReflect.Descriptor instead.
func (*RemoveAlertRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{43}
}

func (x *RemoveAlertRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *RemoveAlertRequest) GetAlertID() int32 {
	if x != nil {
		return x.AlertID
	}
	return 0
}

type RemoveAlertReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *RemoveAlertReply) Reset() {
	*x = RemoveAlertReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAlertReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAlertReply) ProtoMessage() {}

func (x *RemoveAlertReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAlertReply.ProtoReflect.Descriptor instead.
func (*RemoveAlertReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{44}
}

func (x *RemoveAlertReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RemoveAlertReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemoveAlertReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type DescribeCollectionGuideListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinType int32  `protobuf:"varint,2,opt,name=coinType,proto3" json:"coinType,omitempty"`
}

func (x *DescribeCollectionGuideListRequest) Reset() {
	*x = DescribeCollectionGuideListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCollectionGuideListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCollectionGuideListRequest) ProtoMessage() {}

func (x *DescribeCollectionGuideListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCollectionGuideListRequest.ProtoReflect.Descriptor instead.
func (*DescribeCollectionGuideListRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{45}
}

func (x *DescribeCollectionGuideListRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCollectionGuideListRequest) GetCoinType() int32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

type DescribeCollectionGuideListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuideList []*DescribeCollectionGuideListReply_Guide `protobuf:"bytes,1,rep,name=guideList,proto3" json:"guideList,omitempty"`
}

func (x *DescribeCollectionGuideListReply) Reset() {
	*x = DescribeCollectionGuideListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCollectionGuideListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCollectionGuideListReply) ProtoMessage() {}

func (x *DescribeCollectionGuideListReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCollectionGuideListReply.ProtoReflect.Descriptor instead.
func (*DescribeCollectionGuideListReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{46}
}

func (x *DescribeCollectionGuideListReply) GetGuideList() []*DescribeCollectionGuideListReply_Guide {
	if x != nil {
		return x.GuideList
	}
	return nil
}

type ModifyColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string            `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	ColumnID int32             `protobuf:"varint,2,opt,name=columnID,proto3" json:"columnID,omitempty"`
	Name     map[string]string `protobuf:"bytes,3,rep,name=name,proto3" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Category []string          `protobuf:"bytes,4,rep,name=category,proto3" json:"category,omitempty"`
	Type     int32             `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Weight   int32             `protobuf:"varint,6,opt,name=weight,proto3" json:"weight,omitempty"`
	Valid    *bool             `protobuf:"varint,7,opt,name=valid,proto3,oneof" json:"valid,omitempty"`
}

func (x *ModifyColumnRequest) Reset() {
	*x = ModifyColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyColumnRequest) ProtoMessage() {}

func (x *ModifyColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyColumnRequest.ProtoReflect.Descriptor instead.
func (*ModifyColumnRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{47}
}

func (x *ModifyColumnRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyColumnRequest) GetColumnID() int32 {
	if x != nil {
		return x.ColumnID
	}
	return 0
}

func (x *ModifyColumnRequest) GetName() map[string]string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ModifyColumnRequest) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ModifyColumnRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ModifyColumnRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ModifyColumnRequest) GetValid() bool {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return false
}

type ModifyColumnReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *ModifyColumnReply) Reset() {
	*x = ModifyColumnReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyColumnReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyColumnReply) ProtoMessage() {}

func (x *ModifyColumnReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyColumnReply.ProtoReflect.Descriptor instead.
func (*ModifyColumnReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{48}
}

func (x *ModifyColumnReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ModifyColumnReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ModifyColumnReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type RemoveColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   string  `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	ColumnIDs []int32 `protobuf:"varint,2,rep,packed,name=columnIDs,proto3" json:"columnIDs,omitempty"`
}

func (x *RemoveColumnRequest) Reset() {
	*x = RemoveColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveColumnRequest) ProtoMessage() {}

func (x *RemoveColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveColumnRequest.ProtoReflect.Descriptor instead.
func (*RemoveColumnRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{49}
}

func (x *RemoveColumnRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *RemoveColumnRequest) GetColumnIDs() []int32 {
	if x != nil {
		return x.ColumnIDs
	}
	return nil
}

type RemoveColumnReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *RemoveColumnReply) Reset() {
	*x = RemoveColumnReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveColumnReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveColumnReply) ProtoMessage() {}

func (x *RemoveColumnReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveColumnReply.ProtoReflect.Descriptor instead.
func (*RemoveColumnReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{50}
}

func (x *RemoveColumnReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RemoveColumnReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemoveColumnReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type CreateColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string            `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Name     map[string]string `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Category []string          `protobuf:"bytes,3,rep,name=category,proto3" json:"category,omitempty"`
	Type     int32             `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Weight   int32             `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	Valid    *bool             `protobuf:"varint,6,opt,name=valid,proto3,oneof" json:"valid,omitempty"`
}

func (x *CreateColumnRequest) Reset() {
	*x = CreateColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateColumnRequest) ProtoMessage() {}

func (x *CreateColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateColumnRequest.ProtoReflect.Descriptor instead.
func (*CreateColumnRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{51}
}

func (x *CreateColumnRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateColumnRequest) GetName() map[string]string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateColumnRequest) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *CreateColumnRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CreateColumnRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *CreateColumnRequest) GetValid() bool {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return false
}

type CreateColumnReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *CreateColumnReply) Reset() {
	*x = CreateColumnReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateColumnReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateColumnReply) ProtoMessage() {}

func (x *CreateColumnReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateColumnReply.ProtoReflect.Descriptor instead.
func (*CreateColumnReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{52}
}

func (x *CreateColumnReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateColumnReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateColumnReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type DescribeColumnListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type     int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Category string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Valid    *bool  `protobuf:"varint,5,opt,name=valid,proto3,oneof" json:"valid,omitempty"`
	Page     int32  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *DescribeColumnListRequest) Reset() {
	*x = DescribeColumnListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeColumnListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeColumnListRequest) ProtoMessage() {}

func (x *DescribeColumnListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeColumnListRequest.ProtoReflect.Descriptor instead.
func (*DescribeColumnListRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{53}
}

func (x *DescribeColumnListRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeColumnListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeColumnListRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DescribeColumnListRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DescribeColumnListRequest) GetValid() bool {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return false
}

func (x *DescribeColumnListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeColumnListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DescribeColumnListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int32                             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Columns []*DescribeColumnListReply_Column `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *DescribeColumnListReply) Reset() {
	*x = DescribeColumnListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeColumnListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeColumnListReply) ProtoMessage() {}

func (x *DescribeColumnListReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeColumnListReply.ProtoReflect.Descriptor instead.
func (*DescribeColumnListReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{54}
}

func (x *DescribeColumnListReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DescribeColumnListReply) GetColumns() []*DescribeColumnListReply_Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type DescribeAllExtraDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
}

func (x *DescribeAllExtraDetailRequest) Reset() {
	*x = DescribeAllExtraDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAllExtraDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAllExtraDetailRequest) ProtoMessage() {}

func (x *DescribeAllExtraDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAllExtraDetailRequest.ProtoReflect.Descriptor instead.
func (*DescribeAllExtraDetailRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{55}
}

func (x *DescribeAllExtraDetailRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeAllExtraDetailRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

type DescribeAllExtraDetailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID         string            `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	HomePage       []string          `protobuf:"bytes,2,rep,name=homePage,proto3" json:"homePage,omitempty"`
	BlockChainSite []string          `protobuf:"bytes,3,rep,name=blockChainSite,proto3" json:"blockChainSite,omitempty"`
	GenesisDate    string            `protobuf:"bytes,4,opt,name=genesisDate,proto3" json:"genesisDate,omitempty"`
	DexCategory    []string          `protobuf:"bytes,5,rep,name=dexCategory,proto3" json:"dexCategory,omitempty"`
	Desc           map[string]string `protobuf:"bytes,6,rep,name=desc,proto3" json:"desc,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DescribeAllExtraDetailReply) Reset() {
	*x = DescribeAllExtraDetailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAllExtraDetailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAllExtraDetailReply) ProtoMessage() {}

func (x *DescribeAllExtraDetailReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAllExtraDetailReply.ProtoReflect.Descriptor instead.
func (*DescribeAllExtraDetailReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{56}
}

func (x *DescribeAllExtraDetailReply) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeAllExtraDetailReply) GetHomePage() []string {
	if x != nil {
		return x.HomePage
	}
	return nil
}

func (x *DescribeAllExtraDetailReply) GetBlockChainSite() []string {
	if x != nil {
		return x.BlockChainSite
	}
	return nil
}

func (x *DescribeAllExtraDetailReply) GetGenesisDate() string {
	if x != nil {
		return x.GenesisDate
	}
	return ""
}

func (x *DescribeAllExtraDetailReply) GetDexCategory() []string {
	if x != nil {
		return x.DexCategory
	}
	return nil
}

func (x *DescribeAllExtraDetailReply) GetDesc() map[string]string {
	if x != nil {
		return x.Desc
	}
	return nil
}

type DescribeCategoryListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *DescribeCategoryListRequest) Reset() {
	*x = DescribeCategoryListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCategoryListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCategoryListRequest) ProtoMessage() {}

func (x *DescribeCategoryListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCategoryListRequest.ProtoReflect.Descriptor instead.
func (*DescribeCategoryListRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{57}
}

func (x *DescribeCategoryListRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type DescribeCategoryListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category []string `protobuf:"bytes,1,rep,name=category,proto3" json:"category,omitempty"`
}

func (x *DescribeCategoryListReply) Reset() {
	*x = DescribeCategoryListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCategoryListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCategoryListReply) ProtoMessage() {}

func (x *DescribeCategoryListReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCategoryListReply.ProtoReflect.Descriptor instead.
func (*DescribeCategoryListReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{58}
}

func (x *DescribeCategoryListReply) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

type ModifyMenuCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string   `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Type     int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Category []string `protobuf:"bytes,3,rep,name=category,proto3" json:"category,omitempty"`
}

func (x *ModifyMenuCategoryRequest) Reset() {
	*x = ModifyMenuCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyMenuCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyMenuCategoryRequest) ProtoMessage() {}

func (x *ModifyMenuCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyMenuCategoryRequest.ProtoReflect.Descriptor instead.
func (*ModifyMenuCategoryRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{59}
}

func (x *ModifyMenuCategoryRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyMenuCategoryRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ModifyMenuCategoryRequest) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

type ModifyMenuCategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *ModifyMenuCategoryReply) Reset() {
	*x = ModifyMenuCategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyMenuCategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyMenuCategoryReply) ProtoMessage() {}

func (x *ModifyMenuCategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyMenuCategoryReply.ProtoReflect.Descriptor instead.
func (*ModifyMenuCategoryReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{60}
}

func (x *ModifyMenuCategoryReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ModifyMenuCategoryReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ModifyMenuCategoryReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type CreateCoinCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *CreateCoinCategoryRequest) Reset() {
	*x = CreateCoinCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinCategoryRequest) ProtoMessage() {}

func (x *CreateCoinCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinCategoryRequest.ProtoReflect.Descriptor instead.
func (*CreateCoinCategoryRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{61}
}

func (x *CreateCoinCategoryRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateCoinCategoryRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type CreateCoinCategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *CreateCoinCategoryReply) Reset() {
	*x = CreateCoinCategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinCategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinCategoryReply) ProtoMessage() {}

func (x *CreateCoinCategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinCategoryReply.ProtoReflect.Descriptor instead.
func (*CreateCoinCategoryReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{62}
}

func (x *CreateCoinCategoryReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateCoinCategoryReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateCoinCategoryReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type ModifyCoinDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string            `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string            `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Desc    map[string]string `protobuf:"bytes,3,rep,name=desc,proto3" json:"desc,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyCoinDescriptionRequest) Reset() {
	*x = ModifyCoinDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCoinDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCoinDescriptionRequest) ProtoMessage() {}

func (x *ModifyCoinDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCoinDescriptionRequest.ProtoReflect.Descriptor instead.
func (*ModifyCoinDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{63}
}

func (x *ModifyCoinDescriptionRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyCoinDescriptionRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *ModifyCoinDescriptionRequest) GetDesc() map[string]string {
	if x != nil {
		return x.Desc
	}
	return nil
}

type ModifyCoinDescriptionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,4,opt,name=coinID,proto3" json:"coinID,omitempty"`
}

func (x *ModifyCoinDescriptionReply) Reset() {
	*x = ModifyCoinDescriptionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCoinDescriptionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCoinDescriptionReply) ProtoMessage() {}

func (x *ModifyCoinDescriptionReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCoinDescriptionReply.ProtoReflect.Descriptor instead.
func (*ModifyCoinDescriptionReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{64}
}

func (x *ModifyCoinDescriptionReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ModifyCoinDescriptionReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ModifyCoinDescriptionReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyCoinDescriptionReply) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

type DescribeCexCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       string                                `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinIDs       []string                              `protobuf:"bytes,2,rep,name=coinIDs,proto3" json:"coinIDs,omitempty"`
	Currency      string                                `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Category      *string                               `protobuf:"bytes,4,opt,name=category,proto3,oneof" json:"category,omitempty"`
	Page          int32                                 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                                 `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	SortField     DescribeCexCoinsRequest_SortFieldEnum `protobuf:"varint,7,opt,name=sortField,proto3,enum=api.market.v1.DescribeCexCoinsRequest_SortFieldEnum" json:"sortField,omitempty"`
	SortType      string                                `protobuf:"bytes,8,opt,name=sortType,proto3" json:"sortType,omitempty"`
	ColumnID      int32                                 `protobuf:"varint,9,opt,name=columnID,proto3" json:"columnID,omitempty"`
	Chain         string                                `protobuf:"bytes,10,opt,name=chain,proto3" json:"chain,omitempty"`
	Range         string                                `protobuf:"bytes,11,opt,name=range,proto3" json:"range,omitempty"`
	RangeWithTime string                                `protobuf:"bytes,12,opt,name=rangeWithTime,proto3" json:"rangeWithTime,omitempty"`
	Sort          []*DescribeCexCoinsRequest_Sort       `protobuf:"bytes,13,rep,name=sort,proto3" json:"sort,omitempty"`
	UserID        string                                `protobuf:"bytes,14,opt,name=userID,proto3" json:"userID,omitempty"`
	ObSwapSupport int32                                 `protobuf:"varint,15,opt,name=obSwapSupport,proto3" json:"obSwapSupport,omitempty"`
}

func (x *DescribeCexCoinsRequest) Reset() {
	*x = DescribeCexCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCexCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCexCoinsRequest) ProtoMessage() {}

func (x *DescribeCexCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCexCoinsRequest.ProtoReflect.Descriptor instead.
func (*DescribeCexCoinsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{65}
}

func (x *DescribeCexCoinsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCexCoinsRequest) GetCoinIDs() []string {
	if x != nil {
		return x.CoinIDs
	}
	return nil
}

func (x *DescribeCexCoinsRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeCexCoinsRequest) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *DescribeCexCoinsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeCexCoinsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribeCexCoinsRequest) GetSortField() DescribeCexCoinsRequest_SortFieldEnum {
	if x != nil {
		return x.SortField
	}
	return DescribeCexCoinsRequest_Price
}

func (x *DescribeCexCoinsRequest) GetSortType() string {
	if x != nil {
		return x.SortType
	}
	return ""
}

func (x *DescribeCexCoinsRequest) GetColumnID() int32 {
	if x != nil {
		return x.ColumnID
	}
	return 0
}

func (x *DescribeCexCoinsRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeCexCoinsRequest) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *DescribeCexCoinsRequest) GetRangeWithTime() string {
	if x != nil {
		return x.RangeWithTime
	}
	return ""
}

func (x *DescribeCexCoinsRequest) GetSort() []*DescribeCexCoinsRequest_Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *DescribeCexCoinsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DescribeCexCoinsRequest) GetObSwapSupport() int32 {
	if x != nil {
		return x.ObSwapSupport
	}
	return 0
}

type DescribeCexCoinsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*DescribeCexCoinsReply_Coin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
	Total int32                         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribeCexCoinsReply) Reset() {
	*x = DescribeCexCoinsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCexCoinsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCexCoinsReply) ProtoMessage() {}

func (x *DescribeCexCoinsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCexCoinsReply.ProtoReflect.Descriptor instead.
func (*DescribeCexCoinsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{66}
}

func (x *DescribeCexCoinsReply) GetCoins() []*DescribeCexCoinsReply_Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

func (x *DescribeCexCoinsReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ModifyCoinCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string   `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID   string   `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Type     int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Category []string `protobuf:"bytes,4,rep,name=category,proto3" json:"category,omitempty"`
}

func (x *ModifyCoinCategoryRequest) Reset() {
	*x = ModifyCoinCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCoinCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCoinCategoryRequest) ProtoMessage() {}

func (x *ModifyCoinCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCoinCategoryRequest.ProtoReflect.Descriptor instead.
func (*ModifyCoinCategoryRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{67}
}

func (x *ModifyCoinCategoryRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyCoinCategoryRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *ModifyCoinCategoryRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ModifyCoinCategoryRequest) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

type ModifyCoinCategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,4,opt,name=coinID,proto3" json:"coinID,omitempty"`
}

func (x *ModifyCoinCategoryReply) Reset() {
	*x = ModifyCoinCategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCoinCategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCoinCategoryReply) ProtoMessage() {}

func (x *ModifyCoinCategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCoinCategoryReply.ProtoReflect.Descriptor instead.
func (*ModifyCoinCategoryReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{68}
}

func (x *ModifyCoinCategoryReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ModifyCoinCategoryReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ModifyCoinCategoryReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyCoinCategoryReply) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

type DescribeMenuCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Type    int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DescribeMenuCategoryRequest) Reset() {
	*x = DescribeMenuCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMenuCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMenuCategoryRequest) ProtoMessage() {}

func (x *DescribeMenuCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMenuCategoryRequest.ProtoReflect.Descriptor instead.
func (*DescribeMenuCategoryRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{69}
}

func (x *DescribeMenuCategoryRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeMenuCategoryRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type DescribeMenuCategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category []string `protobuf:"bytes,1,rep,name=category,proto3" json:"category,omitempty"`
}

func (x *DescribeMenuCategoryReply) Reset() {
	*x = DescribeMenuCategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMenuCategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMenuCategoryReply) ProtoMessage() {}

func (x *DescribeMenuCategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMenuCategoryReply.ProtoReflect.Descriptor instead.
func (*DescribeMenuCategoryReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{70}
}

func (x *DescribeMenuCategoryReply) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

type DescribeMarketExtraDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	CoinID   string `protobuf:"bytes,3,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Lang     string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *DescribeMarketExtraDetailRequest) Reset() {
	*x = DescribeMarketExtraDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMarketExtraDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMarketExtraDetailRequest) ProtoMessage() {}

func (x *DescribeMarketExtraDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMarketExtraDetailRequest.ProtoReflect.Descriptor instead.
func (*DescribeMarketExtraDetailRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{71}
}

func (x *DescribeMarketExtraDetailRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeMarketExtraDetailRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeMarketExtraDetailRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeMarketExtraDetailRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type DescribeMarketExtraDetailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID         string                                         `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	GenesisDate    string                                         `protobuf:"bytes,2,opt,name=genesisDate,proto3" json:"genesisDate,omitempty"`
	Description    string                                         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	HomePage       []string                                       `protobuf:"bytes,4,rep,name=homePage,proto3" json:"homePage,omitempty"`
	BlockChainSite []string                                       `protobuf:"bytes,5,rep,name=blockChainSite,proto3" json:"blockChainSite,omitempty"`
	ChainAddress   []*DescribeMarketExtraDetailReply_ChainAddress `protobuf:"bytes,6,rep,name=chainAddress,proto3" json:"chainAddress,omitempty"`
	SocialLink     *DescribeMarketExtraDetailReply_SocialLink     `protobuf:"bytes,7,opt,name=socialLink,proto3" json:"socialLink,omitempty"`
}

func (x *DescribeMarketExtraDetailReply) Reset() {
	*x = DescribeMarketExtraDetailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMarketExtraDetailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMarketExtraDetailReply) ProtoMessage() {}

func (x *DescribeMarketExtraDetailReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMarketExtraDetailReply.ProtoReflect.Descriptor instead.
func (*DescribeMarketExtraDetailReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{72}
}

func (x *DescribeMarketExtraDetailReply) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeMarketExtraDetailReply) GetGenesisDate() string {
	if x != nil {
		return x.GenesisDate
	}
	return ""
}

func (x *DescribeMarketExtraDetailReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DescribeMarketExtraDetailReply) GetHomePage() []string {
	if x != nil {
		return x.HomePage
	}
	return nil
}

func (x *DescribeMarketExtraDetailReply) GetBlockChainSite() []string {
	if x != nil {
		return x.BlockChainSite
	}
	return nil
}

func (x *DescribeMarketExtraDetailReply) GetChainAddress() []*DescribeMarketExtraDetailReply_ChainAddress {
	if x != nil {
		return x.ChainAddress
	}
	return nil
}

func (x *DescribeMarketExtraDetailReply) GetSocialLink() *DescribeMarketExtraDetailReply_SocialLink {
	if x != nil {
		return x.SocialLink
	}
	return nil
}

type DescribeCoinPriceChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId      string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID       string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	VsCurrency   string `protobuf:"bytes,3,opt,name=vsCurrency,proto3" json:"vsCurrency,omitempty"`
	Days         int32  `protobuf:"varint,4,opt,name=days,proto3" json:"days,omitempty"`
	Chain        string `protobuf:"bytes,5,opt,name=chain,proto3" json:"chain,omitempty"`
	TokenAddress string `protobuf:"bytes,6,opt,name=tokenAddress,proto3" json:"tokenAddress,omitempty"`
}

func (x *DescribeCoinPriceChartRequest) Reset() {
	*x = DescribeCoinPriceChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinPriceChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinPriceChartRequest) ProtoMessage() {}

func (x *DescribeCoinPriceChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinPriceChartRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinPriceChartRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{73}
}

func (x *DescribeCoinPriceChartRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinPriceChartRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinPriceChartRequest) GetVsCurrency() string {
	if x != nil {
		return x.VsCurrency
	}
	return ""
}

func (x *DescribeCoinPriceChartRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *DescribeCoinPriceChartRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeCoinPriceChartRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

type DescribeCoinPriceChartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prices       []*DescribeCoinPriceChartReply_PriceChart  `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices,omitempty"`
	MarketCaps   []*DescribeCoinPriceChartReply_CapChart    `protobuf:"bytes,2,rep,name=market_caps,json=marketCaps,proto3" json:"market_caps,omitempty"`
	TotalVolumes []*DescribeCoinPriceChartReply_VolumeChart `protobuf:"bytes,3,rep,name=total_volumes,json=totalVolumes,proto3" json:"total_volumes,omitempty"`
}

func (x *DescribeCoinPriceChartReply) Reset() {
	*x = DescribeCoinPriceChartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinPriceChartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinPriceChartReply) ProtoMessage() {}

func (x *DescribeCoinPriceChartReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinPriceChartReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinPriceChartReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{74}
}

func (x *DescribeCoinPriceChartReply) GetPrices() []*DescribeCoinPriceChartReply_PriceChart {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *DescribeCoinPriceChartReply) GetMarketCaps() []*DescribeCoinPriceChartReply_CapChart {
	if x != nil {
		return x.MarketCaps
	}
	return nil
}

func (x *DescribeCoinPriceChartReply) GetTotalVolumes() []*DescribeCoinPriceChartReply_VolumeChart {
	if x != nil {
		return x.TotalVolumes
	}
	return nil
}

type DescribeCoinPriceByRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId      string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID       string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Currency     string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	From         uint32 `protobuf:"varint,4,opt,name=from,proto3" json:"from,omitempty"`
	To           uint32 `protobuf:"varint,5,opt,name=to,proto3" json:"to,omitempty"`
	Chain        string `protobuf:"bytes,6,opt,name=chain,proto3" json:"chain,omitempty"`
	TokenAddress string `protobuf:"bytes,7,opt,name=tokenAddress,proto3" json:"tokenAddress,omitempty"`
}

func (x *DescribeCoinPriceByRangeRequest) Reset() {
	*x = DescribeCoinPriceByRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinPriceByRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinPriceByRangeRequest) ProtoMessage() {}

func (x *DescribeCoinPriceByRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinPriceByRangeRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinPriceByRangeRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{75}
}

func (x *DescribeCoinPriceByRangeRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinPriceByRangeRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinPriceByRangeRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeCoinPriceByRangeRequest) GetFrom() uint32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *DescribeCoinPriceByRangeRequest) GetTo() uint32 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *DescribeCoinPriceByRangeRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeCoinPriceByRangeRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

type DescribeCoinPriceByRangeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prices []*DescribeCoinPriceByRangeReply_Price `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices,omitempty"`
}

func (x *DescribeCoinPriceByRangeReply) Reset() {
	*x = DescribeCoinPriceByRangeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinPriceByRangeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinPriceByRangeReply) ProtoMessage() {}

func (x *DescribeCoinPriceByRangeReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinPriceByRangeReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinPriceByRangeReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{76}
}

func (x *DescribeCoinPriceByRangeReply) GetPrices() []*DescribeCoinPriceByRangeReply_Price {
	if x != nil {
		return x.Prices
	}
	return nil
}

type DescribeCoinPriceByTimestampRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId      string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID       string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Timestamp    uint32 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Chain        string `protobuf:"bytes,5,opt,name=chain,proto3" json:"chain,omitempty"`
	TokenAddress string `protobuf:"bytes,6,opt,name=tokenAddress,proto3" json:"tokenAddress,omitempty"`
}

func (x *DescribeCoinPriceByTimestampRequest) Reset() {
	*x = DescribeCoinPriceByTimestampRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinPriceByTimestampRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinPriceByTimestampRequest) ProtoMessage() {}

func (x *DescribeCoinPriceByTimestampRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinPriceByTimestampRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinPriceByTimestampRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{77}
}

func (x *DescribeCoinPriceByTimestampRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinPriceByTimestampRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinPriceByTimestampRequest) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinPriceByTimestampRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeCoinPriceByTimestampRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

type DescribeCoinPriceByTimestampReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price *Currency `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *DescribeCoinPriceByTimestampReply) Reset() {
	*x = DescribeCoinPriceByTimestampReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinPriceByTimestampReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinPriceByTimestampReply) ProtoMessage() {}

func (x *DescribeCoinPriceByTimestampReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinPriceByTimestampReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinPriceByTimestampReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{78}
}

func (x *DescribeCoinPriceByTimestampReply) GetPrice() *Currency {
	if x != nil {
		return x.Price
	}
	return nil
}

type DescribeCoinSwapsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId        string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID         string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Currency       string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	BeginTimestamp uint32 `protobuf:"varint,4,opt,name=beginTimestamp,proto3" json:"beginTimestamp,omitempty"`
	EndTimestamp   uint32 `protobuf:"varint,5,opt,name=endTimestamp,proto3" json:"endTimestamp,omitempty"`
	Page           int32  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int32  `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *DescribeCoinSwapsRequest) Reset() {
	*x = DescribeCoinSwapsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSwapsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSwapsRequest) ProtoMessage() {}

func (x *DescribeCoinSwapsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSwapsRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinSwapsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{79}
}

func (x *DescribeCoinSwapsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinSwapsRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinSwapsRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeCoinSwapsRequest) GetBeginTimestamp() uint32 {
	if x != nil {
		return x.BeginTimestamp
	}
	return 0
}

func (x *DescribeCoinSwapsRequest) GetEndTimestamp() uint32 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *DescribeCoinSwapsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeCoinSwapsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DescribeCoinSwapsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Swaps []*DescribeCoinSwapsReply_CoinSwapsDetail `protobuf:"bytes,1,rep,name=swaps,proto3" json:"swaps,omitempty"`
	Total uint64                                    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribeCoinSwapsReply) Reset() {
	*x = DescribeCoinSwapsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSwapsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSwapsReply) ProtoMessage() {}

func (x *DescribeCoinSwapsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSwapsReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinSwapsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{80}
}

func (x *DescribeCoinSwapsReply) GetSwaps() []*DescribeCoinSwapsReply_CoinSwapsDetail {
	if x != nil {
		return x.Swaps
	}
	return nil
}

func (x *DescribeCoinSwapsReply) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DescribePairSwapsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId        string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Chain          string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Address        string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Currency       string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Page           int32  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int32  `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	BeginTimestamp uint32 `protobuf:"varint,7,opt,name=beginTimestamp,proto3" json:"beginTimestamp,omitempty"`
	EndTimestamp   uint32 `protobuf:"varint,8,opt,name=endTimestamp,proto3" json:"endTimestamp,omitempty"`
}

func (x *DescribePairSwapsRequest) Reset() {
	*x = DescribePairSwapsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairSwapsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairSwapsRequest) ProtoMessage() {}

func (x *DescribePairSwapsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairSwapsRequest.ProtoReflect.Descriptor instead.
func (*DescribePairSwapsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{81}
}

func (x *DescribePairSwapsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribePairSwapsRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribePairSwapsRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribePairSwapsRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribePairSwapsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribePairSwapsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribePairSwapsRequest) GetBeginTimestamp() uint32 {
	if x != nil {
		return x.BeginTimestamp
	}
	return 0
}

func (x *DescribePairSwapsRequest) GetEndTimestamp() uint32 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

type DescribeCoinLiquidityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId        string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID         string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Currency       string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	BeginTimestamp uint32 `protobuf:"varint,4,opt,name=beginTimestamp,proto3" json:"beginTimestamp,omitempty"`
	EndTimestamp   uint32 `protobuf:"varint,5,opt,name=endTimestamp,proto3" json:"endTimestamp,omitempty"`
	Page           int32  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int32  `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *DescribeCoinLiquidityRequest) Reset() {
	*x = DescribeCoinLiquidityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinLiquidityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinLiquidityRequest) ProtoMessage() {}

func (x *DescribeCoinLiquidityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinLiquidityRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinLiquidityRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{82}
}

func (x *DescribeCoinLiquidityRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinLiquidityRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinLiquidityRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeCoinLiquidityRequest) GetBeginTimestamp() uint32 {
	if x != nil {
		return x.BeginTimestamp
	}
	return 0
}

func (x *DescribeCoinLiquidityRequest) GetEndTimestamp() uint32 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *DescribeCoinLiquidityRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeCoinLiquidityRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DescribeCoinLiquidityReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Liquidity []*DescribeCoinLiquidityReply_CoinLiquidityDetail `protobuf:"bytes,1,rep,name=liquidity,proto3" json:"liquidity,omitempty"`
	Total     uint64                                            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribeCoinLiquidityReply) Reset() {
	*x = DescribeCoinLiquidityReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinLiquidityReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinLiquidityReply) ProtoMessage() {}

func (x *DescribeCoinLiquidityReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinLiquidityReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinLiquidityReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{83}
}

func (x *DescribeCoinLiquidityReply) GetLiquidity() []*DescribeCoinLiquidityReply_CoinLiquidityDetail {
	if x != nil {
		return x.Liquidity
	}
	return nil
}

func (x *DescribeCoinLiquidityReply) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DescribeCoinLiquidityChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID   string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Days     int32  `protobuf:"varint,4,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *DescribeCoinLiquidityChartRequest) Reset() {
	*x = DescribeCoinLiquidityChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinLiquidityChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinLiquidityChartRequest) ProtoMessage() {}

func (x *DescribeCoinLiquidityChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinLiquidityChartRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinLiquidityChartRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{84}
}

func (x *DescribeCoinLiquidityChartRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinLiquidityChartRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinLiquidityChartRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeCoinLiquidityChartRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type DescribeCoinLiquidityChartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Liquidity []*DescribeCoinLiquidityChartReply_LiquidityChart `protobuf:"bytes,1,rep,name=liquidity,proto3" json:"liquidity,omitempty"`
}

func (x *DescribeCoinLiquidityChartReply) Reset() {
	*x = DescribeCoinLiquidityChartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinLiquidityChartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinLiquidityChartReply) ProtoMessage() {}

func (x *DescribeCoinLiquidityChartReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinLiquidityChartReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinLiquidityChartReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{85}
}

func (x *DescribeCoinLiquidityChartReply) GetLiquidity() []*DescribeCoinLiquidityChartReply_LiquidityChart {
	if x != nil {
		return x.Liquidity
	}
	return nil
}

type DescribeCoinUserChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Days    int32  `protobuf:"varint,3,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *DescribeCoinUserChartRequest) Reset() {
	*x = DescribeCoinUserChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinUserChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinUserChartRequest) ProtoMessage() {}

func (x *DescribeCoinUserChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinUserChartRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinUserChartRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{86}
}

func (x *DescribeCoinUserChartRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinUserChartRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinUserChartRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type DescribeCoinUserChartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*DescribeCoinUserChartReply_UserChart `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *DescribeCoinUserChartReply) Reset() {
	*x = DescribeCoinUserChartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinUserChartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinUserChartReply) ProtoMessage() {}

func (x *DescribeCoinUserChartReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinUserChartReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinUserChartReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{87}
}

func (x *DescribeCoinUserChartReply) GetUsers() []*DescribeCoinUserChartReply_UserChart {
	if x != nil {
		return x.Users
	}
	return nil
}

type DescribeCoinOrderChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Days    int32  `protobuf:"varint,3,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *DescribeCoinOrderChartRequest) Reset() {
	*x = DescribeCoinOrderChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinOrderChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinOrderChartRequest) ProtoMessage() {}

func (x *DescribeCoinOrderChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinOrderChartRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinOrderChartRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{88}
}

func (x *DescribeCoinOrderChartRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinOrderChartRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinOrderChartRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type DescribeCoinOrderChartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*DescribeCoinOrderChartReply_OrderChart `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *DescribeCoinOrderChartReply) Reset() {
	*x = DescribeCoinOrderChartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinOrderChartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinOrderChartReply) ProtoMessage() {}

func (x *DescribeCoinOrderChartReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinOrderChartReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinOrderChartReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{89}
}

func (x *DescribeCoinOrderChartReply) GetOrders() []*DescribeCoinOrderChartReply_OrderChart {
	if x != nil {
		return x.Orders
	}
	return nil
}

type DescribeCoinVolumeChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID   string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Days     int32  `protobuf:"varint,4,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *DescribeCoinVolumeChartRequest) Reset() {
	*x = DescribeCoinVolumeChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinVolumeChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinVolumeChartRequest) ProtoMessage() {}

func (x *DescribeCoinVolumeChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinVolumeChartRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinVolumeChartRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{90}
}

func (x *DescribeCoinVolumeChartRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinVolumeChartRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinVolumeChartRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeCoinVolumeChartRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type DescribeCoinVolumeChartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volumes []*DescribeCoinVolumeChartReply_VolumeChart `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *DescribeCoinVolumeChartReply) Reset() {
	*x = DescribeCoinVolumeChartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinVolumeChartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinVolumeChartReply) ProtoMessage() {}

func (x *DescribeCoinVolumeChartReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinVolumeChartReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinVolumeChartReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{91}
}

func (x *DescribeCoinVolumeChartReply) GetVolumes() []*DescribeCoinVolumeChartReply_VolumeChart {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type DescribeCoinSwapStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID   string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *DescribeCoinSwapStatsRequest) Reset() {
	*x = DescribeCoinSwapStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSwapStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSwapStatsRequest) ProtoMessage() {}

func (x *DescribeCoinSwapStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSwapStatsRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinSwapStatsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{92}
}

func (x *DescribeCoinSwapStatsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinSwapStatsRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinSwapStatsRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type DescribeCoinSwapStatsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Liquidity float64                                    `protobuf:"fixed64,1,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Volume24H *DescribeCoinSwapStatsReply_SwapStatDouble `protobuf:"bytes,2,opt,name=volume24h,proto3" json:"volume24h,omitempty"`
	Orders24H *DescribeCoinSwapStatsReply_SwapStatInt    `protobuf:"bytes,3,opt,name=orders24h,proto3" json:"orders24h,omitempty"`
	Users24H  *DescribeCoinSwapStatsReply_SwapStatInt    `protobuf:"bytes,4,opt,name=users24h,proto3" json:"users24h,omitempty"`
}

func (x *DescribeCoinSwapStatsReply) Reset() {
	*x = DescribeCoinSwapStatsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSwapStatsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSwapStatsReply) ProtoMessage() {}

func (x *DescribeCoinSwapStatsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSwapStatsReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinSwapStatsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{93}
}

func (x *DescribeCoinSwapStatsReply) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *DescribeCoinSwapStatsReply) GetVolume24H() *DescribeCoinSwapStatsReply_SwapStatDouble {
	if x != nil {
		return x.Volume24H
	}
	return nil
}

func (x *DescribeCoinSwapStatsReply) GetOrders24H() *DescribeCoinSwapStatsReply_SwapStatInt {
	if x != nil {
		return x.Orders24H
	}
	return nil
}

func (x *DescribeCoinSwapStatsReply) GetUsers24H() *DescribeCoinSwapStatsReply_SwapStatInt {
	if x != nil {
		return x.Users24H
	}
	return nil
}

type DescribeDeFiCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       string                                   `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Currency      string                                   `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Page          int32                                    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                                    `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	SortField     DescribeDeFiCoinsRequest_SortFieldDefine `protobuf:"varint,5,opt,name=sortField,proto3,enum=api.market.v1.DescribeDeFiCoinsRequest_SortFieldDefine" json:"sortField,omitempty"`
	SortType      string                                   `protobuf:"bytes,6,opt,name=sortType,proto3" json:"sortType,omitempty"`
	Category      string                                   `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	CoinID        string                                   `protobuf:"bytes,8,opt,name=coinID,proto3" json:"coinID,omitempty"`
	CoinIDs       []string                                 `protobuf:"bytes,9,rep,name=coinIDs,proto3" json:"coinIDs,omitempty"`
	ColumnID      int32                                    `protobuf:"varint,10,opt,name=columnID,proto3" json:"columnID,omitempty"`
	Chain         string                                   `protobuf:"bytes,11,opt,name=chain,proto3" json:"chain,omitempty"`
	Range         string                                   `protobuf:"bytes,12,opt,name=range,proto3" json:"range,omitempty"`
	RangeWithTime string                                   `protobuf:"bytes,13,opt,name=rangeWithTime,proto3" json:"rangeWithTime,omitempty"`
}

func (x *DescribeDeFiCoinsRequest) Reset() {
	*x = DescribeDeFiCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDeFiCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDeFiCoinsRequest) ProtoMessage() {}

func (x *DescribeDeFiCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDeFiCoinsRequest.ProtoReflect.Descriptor instead.
func (*DescribeDeFiCoinsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{94}
}

func (x *DescribeDeFiCoinsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeDeFiCoinsRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeDeFiCoinsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeDeFiCoinsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribeDeFiCoinsRequest) GetSortField() DescribeDeFiCoinsRequest_SortFieldDefine {
	if x != nil {
		return x.SortField
	}
	return DescribeDeFiCoinsRequest_Liquidity
}

func (x *DescribeDeFiCoinsRequest) GetSortType() string {
	if x != nil {
		return x.SortType
	}
	return ""
}

func (x *DescribeDeFiCoinsRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DescribeDeFiCoinsRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeDeFiCoinsRequest) GetCoinIDs() []string {
	if x != nil {
		return x.CoinIDs
	}
	return nil
}

func (x *DescribeDeFiCoinsRequest) GetColumnID() int32 {
	if x != nil {
		return x.ColumnID
	}
	return 0
}

func (x *DescribeDeFiCoinsRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeDeFiCoinsRequest) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *DescribeDeFiCoinsRequest) GetRangeWithTime() string {
	if x != nil {
		return x.RangeWithTime
	}
	return ""
}

type DescribeDeFiCoinsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*DescribeDeFiCoinsReply_DeFiCoin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
	Total int32                              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribeDeFiCoinsReply) Reset() {
	*x = DescribeDeFiCoinsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDeFiCoinsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDeFiCoinsReply) ProtoMessage() {}

func (x *DescribeDeFiCoinsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDeFiCoinsReply.ProtoReflect.Descriptor instead.
func (*DescribeDeFiCoinsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{95}
}

func (x *DescribeDeFiCoinsReply) GetCoins() []*DescribeDeFiCoinsReply_DeFiCoin {
	if x != nil {
		return x.Coins
	}
	return nil
}

func (x *DescribeDeFiCoinsReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DescribeCoinSimplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string   `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinIDs []string `protobuf:"bytes,2,rep,name=coinIDs,proto3" json:"coinIDs,omitempty"`
}

func (x *DescribeCoinSimplesRequest) Reset() {
	*x = DescribeCoinSimplesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSimplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSimplesRequest) ProtoMessage() {}

func (x *DescribeCoinSimplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSimplesRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinSimplesRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{96}
}

func (x *DescribeCoinSimplesRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinSimplesRequest) GetCoinIDs() []string {
	if x != nil {
		return x.CoinIDs
	}
	return nil
}

type DescribeCoinSimplesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*CoinSimple `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *DescribeCoinSimplesReply) Reset() {
	*x = DescribeCoinSimplesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSimplesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSimplesReply) ProtoMessage() {}

func (x *DescribeCoinSimplesReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSimplesReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinSimplesReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{97}
}

func (x *DescribeCoinSimplesReply) GetCoins() []*CoinSimple {
	if x != nil {
		return x.Coins
	}
	return nil
}

type SearchCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Keyword  string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	PageSize int32  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *SearchCoinsRequest) Reset() {
	*x = SearchCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCoinsRequest) ProtoMessage() {}

func (x *SearchCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCoinsRequest.ProtoReflect.Descriptor instead.
func (*SearchCoinsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{98}
}

func (x *SearchCoinsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *SearchCoinsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchCoinsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SearchCoinsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*CoinSimple `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *SearchCoinsReply) Reset() {
	*x = SearchCoinsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCoinsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCoinsReply) ProtoMessage() {}

func (x *SearchCoinsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCoinsReply.ProtoReflect.Descriptor instead.
func (*SearchCoinsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{99}
}

func (x *SearchCoinsReply) GetCoins() []*CoinSimple {
	if x != nil {
		return x.Coins
	}
	return nil
}

type DescribeTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID   string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Symbol   string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Address  string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Chain    string `protobuf:"bytes,5,opt,name=chain,proto3" json:"chain,omitempty"`
	Page     int32  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *DescribeTokensRequest) Reset() {
	*x = DescribeTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTokensRequest) ProtoMessage() {}

func (x *DescribeTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTokensRequest.ProtoReflect.Descriptor instead.
func (*DescribeTokensRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{100}
}

func (x *DescribeTokensRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeTokensRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeTokensRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DescribeTokensRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribeTokensRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeTokensRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeTokensRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DescribeTokensReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  int32                        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Tokens []*DescribeTokensReply_Token `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *DescribeTokensReply) Reset() {
	*x = DescribeTokensReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTokensReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTokensReply) ProtoMessage() {}

func (x *DescribeTokensReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTokensReply.ProtoReflect.Descriptor instead.
func (*DescribeTokensReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{101}
}

func (x *DescribeTokensReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DescribeTokensReply) GetTokens() []*DescribeTokensReply_Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type DescribeGuruChainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *DescribeGuruChainsRequest) Reset() {
	*x = DescribeGuruChainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeGuruChainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeGuruChainsRequest) ProtoMessage() {}

func (x *DescribeGuruChainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeGuruChainsRequest.ProtoReflect.Descriptor instead.
func (*DescribeGuruChainsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{102}
}

func (x *DescribeGuruChainsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type DescribeGuruChainsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chains []*DescribeGuruChainsReply_Chain `protobuf:"bytes,1,rep,name=chains,proto3" json:"chains,omitempty"`
}

func (x *DescribeGuruChainsReply) Reset() {
	*x = DescribeGuruChainsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeGuruChainsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeGuruChainsReply) ProtoMessage() {}

func (x *DescribeGuruChainsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeGuruChainsReply.ProtoReflect.Descriptor instead.
func (*DescribeGuruChainsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{103}
}

func (x *DescribeGuruChainsReply) GetChains() []*DescribeGuruChainsReply_Chain {
	if x != nil {
		return x.Chains
	}
	return nil
}

type DescribeSwapConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Client  int32  `protobuf:"varint,3,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *DescribeSwapConfigRequest) Reset() {
	*x = DescribeSwapConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeSwapConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeSwapConfigRequest) ProtoMessage() {}

func (x *DescribeSwapConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeSwapConfigRequest.ProtoReflect.Descriptor instead.
func (*DescribeSwapConfigRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{104}
}

func (x *DescribeSwapConfigRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeSwapConfigRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeSwapConfigRequest) GetClient() int32 {
	if x != nil {
		return x.Client
	}
	return 0
}

type DescribeSwapConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category int32  `protobuf:"varint,1,opt,name=category,proto3" json:"category,omitempty"`
	Config   string `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *DescribeSwapConfigReply) Reset() {
	*x = DescribeSwapConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeSwapConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeSwapConfigReply) ProtoMessage() {}

func (x *DescribeSwapConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeSwapConfigReply.ProtoReflect.Descriptor instead.
func (*DescribeSwapConfigReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{105}
}

func (x *DescribeSwapConfigReply) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *DescribeSwapConfigReply) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type DescribeCoinsByFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string   `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinIDs []string `protobuf:"bytes,2,rep,name=coinIDs,proto3" json:"coinIDs,omitempty"`
	Fields  []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *DescribeCoinsByFieldsRequest) Reset() {
	*x = DescribeCoinsByFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinsByFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinsByFieldsRequest) ProtoMessage() {}

func (x *DescribeCoinsByFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinsByFieldsRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinsByFieldsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{106}
}

func (x *DescribeCoinsByFieldsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinsByFieldsRequest) GetCoinIDs() []string {
	if x != nil {
		return x.CoinIDs
	}
	return nil
}

func (x *DescribeCoinsByFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type DescribeCoinsByFieldsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*DescribeCoinsByFieldsReply_Coin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *DescribeCoinsByFieldsReply) Reset() {
	*x = DescribeCoinsByFieldsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinsByFieldsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinsByFieldsReply) ProtoMessage() {}

func (x *DescribeCoinsByFieldsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinsByFieldsReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinsByFieldsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{107}
}

func (x *DescribeCoinsByFieldsReply) GetCoins() []*DescribeCoinsByFieldsReply_Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

type DescribeTokensByFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string   `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Address []string `protobuf:"bytes,2,rep,name=address,proto3" json:"address,omitempty"`
	Fields  []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *DescribeTokensByFieldsRequest) Reset() {
	*x = DescribeTokensByFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTokensByFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTokensByFieldsRequest) ProtoMessage() {}

func (x *DescribeTokensByFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTokensByFieldsRequest.ProtoReflect.Descriptor instead.
func (*DescribeTokensByFieldsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{108}
}

func (x *DescribeTokensByFieldsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeTokensByFieldsRequest) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DescribeTokensByFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type DescribeTokensByFieldsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []*DescribeTokensByFieldsReply_Token `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *DescribeTokensByFieldsReply) Reset() {
	*x = DescribeTokensByFieldsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTokensByFieldsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTokensByFieldsReply) ProtoMessage() {}

func (x *DescribeTokensByFieldsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTokensByFieldsReply.ProtoReflect.Descriptor instead.
func (*DescribeTokensByFieldsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{109}
}

func (x *DescribeTokensByFieldsReply) GetTokens() []*DescribeTokensByFieldsReply_Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type DescribePriceByCoinAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string    `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinIDs []string  `protobuf:"bytes,2,rep,name=coinIDs,proto3" json:"coinIDs,omitempty"`
	Tokens  []*Tokens `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *DescribePriceByCoinAddressRequest) Reset() {
	*x = DescribePriceByCoinAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePriceByCoinAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePriceByCoinAddressRequest) ProtoMessage() {}

func (x *DescribePriceByCoinAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePriceByCoinAddressRequest.ProtoReflect.Descriptor instead.
func (*DescribePriceByCoinAddressRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{110}
}

func (x *DescribePriceByCoinAddressRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribePriceByCoinAddressRequest) GetCoinIDs() []string {
	if x != nil {
		return x.CoinIDs
	}
	return nil
}

func (x *DescribePriceByCoinAddressRequest) GetTokens() []*Tokens {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type DescribePriceByCoinAddressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins  []*DescribePriceByCoinAddressReply_CoinCurrency `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
	Tokens []*DescribePriceByCoinAddressReply_Tokens       `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *DescribePriceByCoinAddressReply) Reset() {
	*x = DescribePriceByCoinAddressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePriceByCoinAddressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePriceByCoinAddressReply) ProtoMessage() {}

func (x *DescribePriceByCoinAddressReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePriceByCoinAddressReply.ProtoReflect.Descriptor instead.
func (*DescribePriceByCoinAddressReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{111}
}

func (x *DescribePriceByCoinAddressReply) GetCoins() []*DescribePriceByCoinAddressReply_CoinCurrency {
	if x != nil {
		return x.Coins
	}
	return nil
}

func (x *DescribePriceByCoinAddressReply) GetTokens() []*DescribePriceByCoinAddressReply_Tokens {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type DescribeCoinIDByTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string    `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Tokens  []*Tokens `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *DescribeCoinIDByTokensRequest) Reset() {
	*x = DescribeCoinIDByTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinIDByTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinIDByTokensRequest) ProtoMessage() {}

func (x *DescribeCoinIDByTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinIDByTokensRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinIDByTokensRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{112}
}

func (x *DescribeCoinIDByTokensRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinIDByTokensRequest) GetTokens() []*Tokens {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type DescribeCoinIDByTokensReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*DescribeCoinIDByTokensReply_Coin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *DescribeCoinIDByTokensReply) Reset() {
	*x = DescribeCoinIDByTokensReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinIDByTokensReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinIDByTokensReply) ProtoMessage() {}

func (x *DescribeCoinIDByTokensReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinIDByTokensReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinIDByTokensReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{113}
}

func (x *DescribeCoinIDByTokensReply) GetCoins() []*DescribeCoinIDByTokensReply_Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cny float64 `protobuf:"fixed64,1,opt,name=cny,proto3" json:"cny,omitempty"`
	Usd float64 `protobuf:"fixed64,2,opt,name=usd,proto3" json:"usd,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{114}
}

func (x *Currency) GetCny() float64 {
	if x != nil {
		return x.Cny
	}
	return 0
}

func (x *Currency) GetUsd() float64 {
	if x != nil {
		return x.Usd
	}
	return 0
}

type Tokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain   string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Tokens) Reset() {
	*x = Tokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tokens) ProtoMessage() {}

func (x *Tokens) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tokens.ProtoReflect.Descriptor instead.
func (*Tokens) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{115}
}

func (x *Tokens) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *Tokens) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CreateCoinGuideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Weight  int32  `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *CreateCoinGuideRequest) Reset() {
	*x = CreateCoinGuideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinGuideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinGuideRequest) ProtoMessage() {}

func (x *CreateCoinGuideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinGuideRequest.ProtoReflect.Descriptor instead.
func (*CreateCoinGuideRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{116}
}

func (x *CreateCoinGuideRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateCoinGuideRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *CreateCoinGuideRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type CreateCoinGuideReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateCoinGuideReply) Reset() {
	*x = CreateCoinGuideReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinGuideReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinGuideReply) ProtoMessage() {}

func (x *CreateCoinGuideReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinGuideReply.ProtoReflect.Descriptor instead.
func (*CreateCoinGuideReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{117}
}

func (x *CreateCoinGuideReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ModifyCoinGuideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Weight  int32  `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *ModifyCoinGuideRequest) Reset() {
	*x = ModifyCoinGuideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCoinGuideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCoinGuideRequest) ProtoMessage() {}

func (x *ModifyCoinGuideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCoinGuideRequest.ProtoReflect.Descriptor instead.
func (*ModifyCoinGuideRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{118}
}

func (x *ModifyCoinGuideRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyCoinGuideRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *ModifyCoinGuideRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type ModifyCoinGuideReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModifyCoinGuideReply) Reset() {
	*x = ModifyCoinGuideReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCoinGuideReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCoinGuideReply) ProtoMessage() {}

func (x *ModifyCoinGuideReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCoinGuideReply.ProtoReflect.Descriptor instead.
func (*ModifyCoinGuideReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{119}
}

type DeleteCoinGuideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
}

func (x *DeleteCoinGuideRequest) Reset() {
	*x = DeleteCoinGuideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoinGuideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoinGuideRequest) ProtoMessage() {}

func (x *DeleteCoinGuideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoinGuideRequest.ProtoReflect.Descriptor instead.
func (*DeleteCoinGuideRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{120}
}

func (x *DeleteCoinGuideRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DeleteCoinGuideRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

type DeleteCoinGuideReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCoinGuideReply) Reset() {
	*x = DeleteCoinGuideReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoinGuideReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoinGuideReply) ProtoMessage() {}

func (x *DeleteCoinGuideReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoinGuideReply.ProtoReflect.Descriptor instead.
func (*DeleteCoinGuideReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{121}
}

type DescribeWhiteTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Chain    string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Limit    int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *DescribeWhiteTokensRequest) Reset() {
	*x = DescribeWhiteTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeWhiteTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeWhiteTokensRequest) ProtoMessage() {}

func (x *DescribeWhiteTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeWhiteTokensRequest.ProtoReflect.Descriptor instead.
func (*DescribeWhiteTokensRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{122}
}

func (x *DescribeWhiteTokensRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeWhiteTokensRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeWhiteTokensRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DescribeWhiteTokensRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type DescribeWhiteTokensReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*DescribeWhiteTokensReply_Coin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *DescribeWhiteTokensReply) Reset() {
	*x = DescribeWhiteTokensReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeWhiteTokensReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeWhiteTokensReply) ProtoMessage() {}

func (x *DescribeWhiteTokensReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeWhiteTokensReply.ProtoReflect.Descriptor instead.
func (*DescribeWhiteTokensReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{123}
}

func (x *DescribeWhiteTokensReply) GetCoins() []*DescribeWhiteTokensReply_Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

type CreateChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId          string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Chain            string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Name             string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Weight           int32  `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	Icon             string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	TokenExplorer    string `protobuf:"bytes,6,opt,name=tokenExplorer,proto3" json:"tokenExplorer,omitempty"`
	ContractExplorer string `protobuf:"bytes,7,opt,name=contractExplorer,proto3" json:"contractExplorer,omitempty"`
	TxnExplorer      string `protobuf:"bytes,8,opt,name=txnExplorer,proto3" json:"txnExplorer,omitempty"`
}

func (x *CreateChainRequest) Reset() {
	*x = CreateChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChainRequest) ProtoMessage() {}

func (x *CreateChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChainRequest.ProtoReflect.Descriptor instead.
func (*CreateChainRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{124}
}

func (x *CreateChainRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateChainRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *CreateChainRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateChainRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *CreateChainRequest) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *CreateChainRequest) GetTokenExplorer() string {
	if x != nil {
		return x.TokenExplorer
	}
	return ""
}

func (x *CreateChainRequest) GetContractExplorer() string {
	if x != nil {
		return x.ContractExplorer
	}
	return ""
}

func (x *CreateChainRequest) GetTxnExplorer() string {
	if x != nil {
		return x.TxnExplorer
	}
	return ""
}

type CreateChainReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateChainReply) Reset() {
	*x = CreateChainReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChainReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChainReply) ProtoMessage() {}

func (x *CreateChainReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChainReply.ProtoReflect.Descriptor instead.
func (*CreateChainReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{125}
}

func (x *CreateChainReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ModifyChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId          string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id               int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name             string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Weight           int32  `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	Icon             string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	TokenExplorer    string `protobuf:"bytes,6,opt,name=tokenExplorer,proto3" json:"tokenExplorer,omitempty"`
	ContractExplorer string `protobuf:"bytes,7,opt,name=contractExplorer,proto3" json:"contractExplorer,omitempty"`
	TxnExplorer      string `protobuf:"bytes,8,opt,name=txnExplorer,proto3" json:"txnExplorer,omitempty"`
}

func (x *ModifyChainRequest) Reset() {
	*x = ModifyChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyChainRequest) ProtoMessage() {}

func (x *ModifyChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyChainRequest.ProtoReflect.Descriptor instead.
func (*ModifyChainRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{126}
}

func (x *ModifyChainRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyChainRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModifyChainRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModifyChainRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ModifyChainRequest) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ModifyChainRequest) GetTokenExplorer() string {
	if x != nil {
		return x.TokenExplorer
	}
	return ""
}

func (x *ModifyChainRequest) GetContractExplorer() string {
	if x != nil {
		return x.ContractExplorer
	}
	return ""
}

func (x *ModifyChainRequest) GetTxnExplorer() string {
	if x != nil {
		return x.TxnExplorer
	}
	return ""
}

type DeleteChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteChainRequest) Reset() {
	*x = DeleteChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChainRequest) ProtoMessage() {}

func (x *DeleteChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChainRequest.ProtoReflect.Descriptor instead.
func (*DeleteChainRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{127}
}

func (x *DeleteChainRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DeleteChainRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CreateChainRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Chain    string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	TrdChain string `protobuf:"bytes,3,opt,name=trdChain,proto3" json:"trdChain,omitempty"`
	TrdType  int32  `protobuf:"varint,4,opt,name=trdType,proto3" json:"trdType,omitempty"`
}

func (x *CreateChainRelationRequest) Reset() {
	*x = CreateChainRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChainRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChainRelationRequest) ProtoMessage() {}

func (x *CreateChainRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChainRelationRequest.ProtoReflect.Descriptor instead.
func (*CreateChainRelationRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{128}
}

func (x *CreateChainRelationRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateChainRelationRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *CreateChainRelationRequest) GetTrdChain() string {
	if x != nil {
		return x.TrdChain
	}
	return ""
}

func (x *CreateChainRelationRequest) GetTrdType() int32 {
	if x != nil {
		return x.TrdType
	}
	return 0
}

type DeleteChainRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteChainRelationRequest) Reset() {
	*x = DeleteChainRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChainRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChainRelationRequest) ProtoMessage() {}

func (x *DeleteChainRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChainRelationRequest.ProtoReflect.Descriptor instead.
func (*DeleteChainRelationRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{129}
}

func (x *DeleteChainRelationRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DeleteChainRelationRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DescribeCollectionGuidesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	PageSize int32  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *DescribeCollectionGuidesRequest) Reset() {
	*x = DescribeCollectionGuidesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCollectionGuidesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCollectionGuidesRequest) ProtoMessage() {}

func (x *DescribeCollectionGuidesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCollectionGuidesRequest.ProtoReflect.Descriptor instead.
func (*DescribeCollectionGuidesRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{130}
}

func (x *DescribeCollectionGuidesRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCollectionGuidesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DescribeCollectionGuidesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*CoinSimple `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *DescribeCollectionGuidesReply) Reset() {
	*x = DescribeCollectionGuidesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCollectionGuidesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCollectionGuidesReply) ProtoMessage() {}

func (x *DescribeCollectionGuidesReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCollectionGuidesReply.ProtoReflect.Descriptor instead.
func (*DescribeCollectionGuidesReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{131}
}

func (x *DescribeCollectionGuidesReply) GetCoins() []*CoinSimple {
	if x != nil {
		return x.Coins
	}
	return nil
}

type CheckCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string   `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinIDs []string `protobuf:"bytes,2,rep,name=coinIDs,proto3" json:"coinIDs,omitempty"`
}

func (x *CheckCoinsRequest) Reset() {
	*x = CheckCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCoinsRequest) ProtoMessage() {}

func (x *CheckCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCoinsRequest.ProtoReflect.Descriptor instead.
func (*CheckCoinsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{132}
}

func (x *CheckCoinsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CheckCoinsRequest) GetCoinIDs() []string {
	if x != nil {
		return x.CoinIDs
	}
	return nil
}

type CheckCoinsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*CheckCoinsReply_Coin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *CheckCoinsReply) Reset() {
	*x = CheckCoinsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCoinsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCoinsReply) ProtoMessage() {}

func (x *CheckCoinsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCoinsReply.ProtoReflect.Descriptor instead.
func (*CheckCoinsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{133}
}

func (x *CheckCoinsReply) GetCoins() []*CheckCoinsReply_Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

type CoinSimple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID string `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Image  string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *CoinSimple) Reset() {
	*x = CoinSimple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinSimple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinSimple) ProtoMessage() {}

func (x *CoinSimple) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinSimple.ProtoReflect.Descriptor instead.
func (*CoinSimple) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{134}
}

func (x *CoinSimple) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *CoinSimple) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoinSimple) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CoinSimple) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type PairSimple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain      string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	DexID      string `protobuf:"bytes,3,opt,name=dexID,proto3" json:"dexID,omitempty"`
	DexIcon    string `protobuf:"bytes,4,opt,name=dexIcon,proto3" json:"dexIcon,omitempty"`
	BaseToken  string `protobuf:"bytes,5,opt,name=baseToken,proto3" json:"baseToken,omitempty"`
	QuoteToken string `protobuf:"bytes,6,opt,name=quoteToken,proto3" json:"quoteToken,omitempty"`
}

func (x *PairSimple) Reset() {
	*x = PairSimple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PairSimple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairSimple) ProtoMessage() {}

func (x *PairSimple) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairSimple.ProtoReflect.Descriptor instead.
func (*PairSimple) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{135}
}

func (x *PairSimple) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *PairSimple) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PairSimple) GetDexID() string {
	if x != nil {
		return x.DexID
	}
	return ""
}

func (x *PairSimple) GetDexIcon() string {
	if x != nil {
		return x.DexIcon
	}
	return ""
}

func (x *PairSimple) GetBaseToken() string {
	if x != nil {
		return x.BaseToken
	}
	return ""
}

func (x *PairSimple) GetQuoteToken() string {
	if x != nil {
		return x.QuoteToken
	}
	return ""
}

type NoneReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoneReply) Reset() {
	*x = NoneReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoneReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoneReply) ProtoMessage() {}

func (x *NoneReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoneReply.ProtoReflect.Descriptor instead.
func (*NoneReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{136}
}

type DescribePairsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Chain         string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Address       string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Currency      string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	DexID         string `protobuf:"bytes,5,opt,name=dexID,proto3" json:"dexID,omitempty"`
	UserID        string `protobuf:"bytes,6,opt,name=userID,proto3" json:"userID,omitempty"`
	Page          int32  `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32  `protobuf:"varint,8,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	SortField     string `protobuf:"bytes,9,opt,name=sortField,proto3" json:"sortField,omitempty"`
	SortType      string `protobuf:"bytes,10,opt,name=sortType,proto3" json:"sortType,omitempty"`
	Range         string `protobuf:"bytes,11,opt,name=range,proto3" json:"range,omitempty"`
	RangeWithTime string `protobuf:"bytes,12,opt,name=rangeWithTime,proto3" json:"rangeWithTime,omitempty"`
}

func (x *DescribePairsRequest) Reset() {
	*x = DescribePairsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairsRequest) ProtoMessage() {}

func (x *DescribePairsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairsRequest.ProtoReflect.Descriptor instead.
func (*DescribePairsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{137}
}

func (x *DescribePairsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribePairsRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribePairsRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribePairsRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribePairsRequest) GetDexID() string {
	if x != nil {
		return x.DexID
	}
	return ""
}

func (x *DescribePairsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DescribePairsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribePairsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribePairsRequest) GetSortField() string {
	if x != nil {
		return x.SortField
	}
	return ""
}

func (x *DescribePairsRequest) GetSortType() string {
	if x != nil {
		return x.SortType
	}
	return ""
}

func (x *DescribePairsRequest) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *DescribePairsRequest) GetRangeWithTime() string {
	if x != nil {
		return x.RangeWithTime
	}
	return ""
}

type DescribePairsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs []*Pair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
	Total int32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribePairsReply) Reset() {
	*x = DescribePairsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairsReply) ProtoMessage() {}

func (x *DescribePairsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairsReply.ProtoReflect.Descriptor instead.
func (*DescribePairsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{138}
}

func (x *DescribePairsReply) GetPairs() []*Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *DescribePairsReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DescribePairBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string    `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Currency string    `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Pairs    []*Tokens `protobuf:"bytes,3,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *DescribePairBatchRequest) Reset() {
	*x = DescribePairBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairBatchRequest) ProtoMessage() {}

func (x *DescribePairBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairBatchRequest.ProtoReflect.Descriptor instead.
func (*DescribePairBatchRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{139}
}

func (x *DescribePairBatchRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribePairBatchRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribePairBatchRequest) GetPairs() []*Tokens {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type DescribePairBatchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs []*Pair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *DescribePairBatchReply) Reset() {
	*x = DescribePairBatchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairBatchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairBatchReply) ProtoMessage() {}

func (x *DescribePairBatchReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairBatchReply.ProtoReflect.Descriptor instead.
func (*DescribePairBatchReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{140}
}

func (x *DescribePairBatchReply) GetPairs() []*Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Chain      string  `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	DexID      string  `protobuf:"bytes,3,opt,name=dexID,proto3" json:"dexID,omitempty"`
	DexIcon    string  `protobuf:"bytes,4,opt,name=dexIcon,proto3" json:"dexIcon,omitempty"`
	BaseToken  string  `protobuf:"bytes,5,opt,name=baseToken,proto3" json:"baseToken,omitempty"`
	QuoteToken string  `protobuf:"bytes,6,opt,name=quoteToken,proto3" json:"quoteToken,omitempty"`
	Stat5M     string  `protobuf:"bytes,7,opt,name=stat5m,proto3" json:"stat5m,omitempty"`
	Stat1H     string  `protobuf:"bytes,8,opt,name=stat1h,proto3" json:"stat1h,omitempty"`
	Stat6H     string  `protobuf:"bytes,9,opt,name=stat6h,proto3" json:"stat6h,omitempty"`
	Stat24H    string  `protobuf:"bytes,10,opt,name=stat24h,proto3" json:"stat24h,omitempty"`
	Fdv        float64 `protobuf:"fixed64,11,opt,name=fdv,proto3" json:"fdv,omitempty"`
	Liquidity  float64 `protobuf:"fixed64,12,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Price      float64 `protobuf:"fixed64,13,opt,name=price,proto3" json:"price,omitempty"`
	IsFocus    int32   `protobuf:"varint,14,opt,name=isFocus,proto3" json:"isFocus,omitempty"`
	Reason     string  `protobuf:"bytes,15,opt,name=reason,proto3" json:"reason,omitempty"`
	UpdateAt   int32   `protobuf:"varint,16,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	ChainIcon  string  `protobuf:"bytes,17,opt,name=chainIcon,proto3" json:"chainIcon,omitempty"`
}

func (x *Pair) Reset() {
	*x = Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{141}
}

func (x *Pair) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Pair) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *Pair) GetDexID() string {
	if x != nil {
		return x.DexID
	}
	return ""
}

func (x *Pair) GetDexIcon() string {
	if x != nil {
		return x.DexIcon
	}
	return ""
}

func (x *Pair) GetBaseToken() string {
	if x != nil {
		return x.BaseToken
	}
	return ""
}

func (x *Pair) GetQuoteToken() string {
	if x != nil {
		return x.QuoteToken
	}
	return ""
}

func (x *Pair) GetStat5M() string {
	if x != nil {
		return x.Stat5M
	}
	return ""
}

func (x *Pair) GetStat1H() string {
	if x != nil {
		return x.Stat1H
	}
	return ""
}

func (x *Pair) GetStat6H() string {
	if x != nil {
		return x.Stat6H
	}
	return ""
}

func (x *Pair) GetStat24H() string {
	if x != nil {
		return x.Stat24H
	}
	return ""
}

func (x *Pair) GetFdv() float64 {
	if x != nil {
		return x.Fdv
	}
	return 0
}

func (x *Pair) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *Pair) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Pair) GetIsFocus() int32 {
	if x != nil {
		return x.IsFocus
	}
	return 0
}

func (x *Pair) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Pair) GetUpdateAt() int32 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *Pair) GetChainIcon() string {
	if x != nil {
		return x.ChainIcon
	}
	return ""
}

type DescribePairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Chain    string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Address  string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	UserID   string `protobuf:"bytes,5,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *DescribePairRequest) Reset() {
	*x = DescribePairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairRequest) ProtoMessage() {}

func (x *DescribePairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairRequest.ProtoReflect.Descriptor instead.
func (*DescribePairRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{142}
}

func (x *DescribePairRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribePairRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribePairRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribePairRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribePairRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type DescribePairReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair *DescribePairReply_Pair `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
}

func (x *DescribePairReply) Reset() {
	*x = DescribePairReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairReply) ProtoMessage() {}

func (x *DescribePairReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairReply.ProtoReflect.Descriptor instead.
func (*DescribePairReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{143}
}

func (x *DescribePairReply) GetPair() *DescribePairReply_Pair {
	if x != nil {
		return x.Pair
	}
	return nil
}

type DescribePairTrendsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Limit    int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Type     int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	UserID   string `protobuf:"bytes,5,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *DescribePairTrendsRequest) Reset() {
	*x = DescribePairTrendsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairTrendsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairTrendsRequest) ProtoMessage() {}

func (x *DescribePairTrendsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairTrendsRequest.ProtoReflect.Descriptor instead.
func (*DescribePairTrendsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{144}
}

func (x *DescribePairTrendsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribePairTrendsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DescribePairTrendsRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DescribePairTrendsRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribePairTrendsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type DescribePairTrendsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs []*DescribePairTrendsReply_PairTrend `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *DescribePairTrendsReply) Reset() {
	*x = DescribePairTrendsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairTrendsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairTrendsReply) ProtoMessage() {}

func (x *DescribePairTrendsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairTrendsReply.ProtoReflect.Descriptor instead.
func (*DescribePairTrendsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{145}
}

func (x *DescribePairTrendsReply) GetPairs() []*DescribePairTrendsReply_PairTrend {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type DescribePairTrendsV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Limit    int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	UserID   string `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID,omitempty"`
	Page     int32  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *DescribePairTrendsV2Request) Reset() {
	*x = DescribePairTrendsV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairTrendsV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairTrendsV2Request) ProtoMessage() {}

func (x *DescribePairTrendsV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairTrendsV2Request.ProtoReflect.Descriptor instead.
func (*DescribePairTrendsV2Request) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{146}
}

func (x *DescribePairTrendsV2Request) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribePairTrendsV2Request) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DescribePairTrendsV2Request) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribePairTrendsV2Request) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DescribePairTrendsV2Request) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type DescribePairTrendsV2Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs []*Pair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *DescribePairTrendsV2Reply) Reset() {
	*x = DescribePairTrendsV2Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairTrendsV2Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairTrendsV2Reply) ProtoMessage() {}

func (x *DescribePairTrendsV2Reply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairTrendsV2Reply.ProtoReflect.Descriptor instead.
func (*DescribePairTrendsV2Reply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{147}
}

func (x *DescribePairTrendsV2Reply) GetPairs() []*Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type CreateDexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	DexID   string `protobuf:"bytes,2,opt,name=dexID,proto3" json:"dexID,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Weight  int32  `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	Icon    string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *CreateDexRequest) Reset() {
	*x = CreateDexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDexRequest) ProtoMessage() {}

func (x *CreateDexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDexRequest.ProtoReflect.Descriptor instead.
func (*CreateDexRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{148}
}

func (x *CreateDexRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateDexRequest) GetDexID() string {
	if x != nil {
		return x.DexID
	}
	return ""
}

func (x *CreateDexRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDexRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *CreateDexRequest) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type CreateDexReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateDexReply) Reset() {
	*x = CreateDexReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDexReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDexReply) ProtoMessage() {}

func (x *CreateDexReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDexReply.ProtoReflect.Descriptor instead.
func (*CreateDexReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{149}
}

func (x *CreateDexReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ModifyDexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Weight  int32  `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	Icon    string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *ModifyDexRequest) Reset() {
	*x = ModifyDexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyDexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyDexRequest) ProtoMessage() {}

func (x *ModifyDexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyDexRequest.ProtoReflect.Descriptor instead.
func (*ModifyDexRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{150}
}

func (x *ModifyDexRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyDexRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModifyDexRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModifyDexRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ModifyDexRequest) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type DeleteDexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDexRequest) Reset() {
	*x = DeleteDexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDexRequest) ProtoMessage() {}

func (x *DeleteDexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDexRequest.ProtoReflect.Descriptor instead.
func (*DeleteDexRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{151}
}

func (x *DeleteDexRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DeleteDexRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DescribeRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *DescribeRateRequest) Reset() {
	*x = DescribeRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRateRequest) ProtoMessage() {}

func (x *DescribeRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRateRequest.ProtoReflect.Descriptor instead.
func (*DescribeRateRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{152}
}

func (x *DescribeRateRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeRateRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type DescribeRateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate float64 `protobuf:"fixed64,1,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *DescribeRateReply) Reset() {
	*x = DescribeRateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeRateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRateReply) ProtoMessage() {}

func (x *DescribeRateReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRateReply.ProtoReflect.Descriptor instead.
func (*DescribeRateReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{153}
}

func (x *DescribeRateReply) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type DescribePairGuidesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	PageSize int32  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *DescribePairGuidesRequest) Reset() {
	*x = DescribePairGuidesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairGuidesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairGuidesRequest) ProtoMessage() {}

func (x *DescribePairGuidesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairGuidesRequest.ProtoReflect.Descriptor instead.
func (*DescribePairGuidesRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{154}
}

func (x *DescribePairGuidesRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribePairGuidesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DescribePairGuidesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs []*PairSimple `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *DescribePairGuidesReply) Reset() {
	*x = DescribePairGuidesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairGuidesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairGuidesReply) ProtoMessage() {}

func (x *DescribePairGuidesReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairGuidesReply.ProtoReflect.Descriptor instead.
func (*DescribePairGuidesReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{155}
}

func (x *DescribePairGuidesReply) GetPairs() []*PairSimple {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type CreatePairGuideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Chain   string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Weight  int32  `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *CreatePairGuideRequest) Reset() {
	*x = CreatePairGuideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePairGuideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePairGuideRequest) ProtoMessage() {}

func (x *CreatePairGuideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePairGuideRequest.ProtoReflect.Descriptor instead.
func (*CreatePairGuideRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{156}
}

func (x *CreatePairGuideRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreatePairGuideRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *CreatePairGuideRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreatePairGuideRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type CreatePairGuideReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreatePairGuideReply) Reset() {
	*x = CreatePairGuideReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePairGuideReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePairGuideReply) ProtoMessage() {}

func (x *CreatePairGuideReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePairGuideReply.ProtoReflect.Descriptor instead.
func (*CreatePairGuideReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{157}
}

func (x *CreatePairGuideReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ModifyPairGuideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Weight  int32  `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *ModifyPairGuideRequest) Reset() {
	*x = ModifyPairGuideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPairGuideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPairGuideRequest) ProtoMessage() {}

func (x *ModifyPairGuideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPairGuideRequest.ProtoReflect.Descriptor instead.
func (*ModifyPairGuideRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{158}
}

func (x *ModifyPairGuideRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyPairGuideRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModifyPairGuideRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type DeletePairGuideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeletePairGuideRequest) Reset() {
	*x = DeletePairGuideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePairGuideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePairGuideRequest) ProtoMessage() {}

func (x *DeletePairGuideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePairGuideRequest.ProtoReflect.Descriptor instead.
func (*DeletePairGuideRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{159}
}

func (x *DeletePairGuideRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DeletePairGuideRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DescribeCoinsByChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Chain    string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Page     int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *DescribeCoinsByChainRequest) Reset() {
	*x = DescribeCoinsByChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinsByChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinsByChainRequest) ProtoMessage() {}

func (x *DescribeCoinsByChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinsByChainRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinsByChainRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{160}
}

func (x *DescribeCoinsByChainRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinsByChainRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeCoinsByChainRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeCoinsByChainRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DescribeCoinsByChainReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*DescribeCoinsByChainReply_Coin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *DescribeCoinsByChainReply) Reset() {
	*x = DescribeCoinsByChainReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinsByChainReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinsByChainReply) ProtoMessage() {}

func (x *DescribeCoinsByChainReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinsByChainReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinsByChainReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{161}
}

func (x *DescribeCoinsByChainReply) GetCoins() []*DescribeCoinsByChainReply_Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

type DescribeCoinInfoByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
}

func (x *DescribeCoinInfoByIDRequest) Reset() {
	*x = DescribeCoinInfoByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinInfoByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinInfoByIDRequest) ProtoMessage() {}

func (x *DescribeCoinInfoByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinInfoByIDRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinInfoByIDRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{162}
}

func (x *DescribeCoinInfoByIDRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinInfoByIDRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

type DescribeCoinInfoByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinId                            string  `protobuf:"bytes,1,opt,name=coinId,proto3" json:"coinId,omitempty"`
	Symbol                            string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Name                              string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Image                             string  `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	CdnImage                          string  `protobuf:"bytes,5,opt,name=cdnImage,proto3" json:"cdnImage,omitempty"`
	CurrentPrice                      float64 `protobuf:"fixed64,6,opt,name=currentPrice,proto3" json:"currentPrice,omitempty"`
	PriceChangePercentage24H          float64 `protobuf:"fixed64,7,opt,name=priceChangePercentage24h,proto3" json:"priceChangePercentage24h,omitempty"`
	TotalVolume                       float64 `protobuf:"fixed64,8,opt,name=totalVolume,proto3" json:"totalVolume,omitempty"`
	PriceChangePercentage7DInCurrency float64 `protobuf:"fixed64,9,opt,name=priceChangePercentage7dInCurrency,proto3" json:"priceChangePercentage7dInCurrency,omitempty"`
	PriceChangePercentage30D          float64 `protobuf:"fixed64,10,opt,name=priceChangePercentage30d,proto3" json:"priceChangePercentage30d,omitempty"`
	PriceChangePercentage1Y           float64 `protobuf:"fixed64,11,opt,name=priceChangePercentage1y,proto3" json:"priceChangePercentage1y,omitempty"`
	MarketCap                         float64 `protobuf:"fixed64,12,opt,name=marketCap,proto3" json:"marketCap,omitempty"`
	MarketCapRank                     int32   `protobuf:"varint,13,opt,name=marketCapRank,proto3" json:"marketCapRank,omitempty"`
	Detail                            string  `protobuf:"bytes,14,opt,name=detail,proto3" json:"detail,omitempty"`
	Category                          string  `protobuf:"bytes,15,opt,name=category,proto3" json:"category,omitempty"`
	Sparkline                         string  `protobuf:"bytes,16,opt,name=sparkline,proto3" json:"sparkline,omitempty"`
	Version                           int64   `protobuf:"varint,17,opt,name=version,proto3" json:"version,omitempty"`
	EventId                           string  `protobuf:"bytes,18,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *DescribeCoinInfoByIDReply) Reset() {
	*x = DescribeCoinInfoByIDReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinInfoByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinInfoByIDReply) ProtoMessage() {}

func (x *DescribeCoinInfoByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinInfoByIDReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinInfoByIDReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{163}
}

func (x *DescribeCoinInfoByIDReply) GetCoinId() string {
	if x != nil {
		return x.CoinId
	}
	return ""
}

func (x *DescribeCoinInfoByIDReply) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DescribeCoinInfoByIDReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeCoinInfoByIDReply) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *DescribeCoinInfoByIDReply) GetCdnImage() string {
	if x != nil {
		return x.CdnImage
	}
	return ""
}

func (x *DescribeCoinInfoByIDReply) GetCurrentPrice() float64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *DescribeCoinInfoByIDReply) GetPriceChangePercentage24H() float64 {
	if x != nil {
		return x.PriceChangePercentage24H
	}
	return 0
}

func (x *DescribeCoinInfoByIDReply) GetTotalVolume() float64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *DescribeCoinInfoByIDReply) GetPriceChangePercentage7DInCurrency() float64 {
	if x != nil {
		return x.PriceChangePercentage7DInCurrency
	}
	return 0
}

func (x *DescribeCoinInfoByIDReply) GetPriceChangePercentage30D() float64 {
	if x != nil {
		return x.PriceChangePercentage30D
	}
	return 0
}

func (x *DescribeCoinInfoByIDReply) GetPriceChangePercentage1Y() float64 {
	if x != nil {
		return x.PriceChangePercentage1Y
	}
	return 0
}

func (x *DescribeCoinInfoByIDReply) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *DescribeCoinInfoByIDReply) GetMarketCapRank() int32 {
	if x != nil {
		return x.MarketCapRank
	}
	return 0
}

func (x *DescribeCoinInfoByIDReply) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *DescribeCoinInfoByIDReply) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DescribeCoinInfoByIDReply) GetSparkline() string {
	if x != nil {
		return x.Sparkline
	}
	return ""
}

func (x *DescribeCoinInfoByIDReply) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DescribeCoinInfoByIDReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type DescribeTopTokenListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *DescribeTopTokenListRequest) Reset() {
	*x = DescribeTopTokenListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopTokenListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopTokenListRequest) ProtoMessage() {}

func (x *DescribeTopTokenListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopTokenListRequest.ProtoReflect.Descriptor instead.
func (*DescribeTopTokenListRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{164}
}

func (x *DescribeTopTokenListRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type DescribeTopTokenListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   string                                `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	TopTokens []*DescribeTopTokenListReply_TopToken `protobuf:"bytes,2,rep,name=topTokens,proto3" json:"topTokens,omitempty"`
}

func (x *DescribeTopTokenListReply) Reset() {
	*x = DescribeTopTokenListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopTokenListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopTokenListReply) ProtoMessage() {}

func (x *DescribeTopTokenListReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopTokenListReply.ProtoReflect.Descriptor instead.
func (*DescribeTopTokenListReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{165}
}

func (x *DescribeTopTokenListReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeTopTokenListReply) GetTopTokens() []*DescribeTopTokenListReply_TopToken {
	if x != nil {
		return x.TopTokens
	}
	return nil
}

type CreateTopTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	TokenId  string `protobuf:"bytes,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Position int64  `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CreateTopTokenRequest) Reset() {
	*x = CreateTopTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopTokenRequest) ProtoMessage() {}

func (x *CreateTopTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateTopTokenRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{166}
}

func (x *CreateTopTokenRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateTopTokenRequest) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *CreateTopTokenRequest) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

type CreateTopTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Code    string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateTopTokenReply) Reset() {
	*x = CreateTopTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopTokenReply) ProtoMessage() {}

func (x *CreateTopTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopTokenReply.ProtoReflect.Descriptor instead.
func (*CreateTopTokenReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{167}
}

func (x *CreateTopTokenReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateTopTokenReply) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateTopTokenReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateTopTokenReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ModifyTopTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id       uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	TokenId  string `protobuf:"bytes,3,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Position int64  `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *ModifyTopTokenRequest) Reset() {
	*x = ModifyTopTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyTopTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTopTokenRequest) ProtoMessage() {}

func (x *ModifyTopTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTopTokenRequest.ProtoReflect.Descriptor instead.
func (*ModifyTopTokenRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{168}
}

func (x *ModifyTopTokenRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyTopTokenRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModifyTopTokenRequest) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *ModifyTopTokenRequest) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

type ModifyTopTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Code    string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ModifyTopTokenReply) Reset() {
	*x = ModifyTopTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyTopTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTopTokenReply) ProtoMessage() {}

func (x *ModifyTopTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTopTokenReply.ProtoReflect.Descriptor instead.
func (*ModifyTopTokenReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{169}
}

func (x *ModifyTopTokenReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyTopTokenReply) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModifyTopTokenReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ModifyTopTokenReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteTopTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTopTokenRequest) Reset() {
	*x = DeleteTopTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopTokenRequest) ProtoMessage() {}

func (x *DeleteTopTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopTokenRequest.ProtoReflect.Descriptor instead.
func (*DeleteTopTokenRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{170}
}

func (x *DeleteTopTokenRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DeleteTopTokenRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteTopTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Code    string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteTopTokenReply) Reset() {
	*x = DeleteTopTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopTokenReply) ProtoMessage() {}

func (x *DeleteTopTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopTokenReply.ProtoReflect.Descriptor instead.
func (*DeleteTopTokenReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{171}
}

func (x *DeleteTopTokenReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DeleteTopTokenReply) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteTopTokenReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DeleteTopTokenReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 专用于 RecommandTokenSection 相关接口的数据结构
type RecommandToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId  string `protobuf:"bytes,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Position int64  `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *RecommandToken) Reset() {
	*x = RecommandToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommandToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommandToken) ProtoMessage() {}

func (x *RecommandToken) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommandToken.ProtoReflect.Descriptor instead.
func (*RecommandToken) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{172}
}

func (x *RecommandToken) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *RecommandToken) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

type DescribeRecommandTokenSectionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *DescribeRecommandTokenSectionListRequest) Reset() {
	*x = DescribeRecommandTokenSectionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeRecommandTokenSectionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRecommandTokenSectionListRequest) ProtoMessage() {}

func (x *DescribeRecommandTokenSectionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRecommandTokenSectionListRequest.ProtoReflect.Descriptor instead.
func (*DescribeRecommandTokenSectionListRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{173}
}

func (x *DescribeRecommandTokenSectionListRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type DescribeRecommandTokenSectionListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId                string                                                          `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	RecommandTokenSections []*DescribeRecommandTokenSectionListReply_RecommandTokenSection `protobuf:"bytes,2,rep,name=recommandTokenSections,proto3" json:"recommandTokenSections,omitempty"`
}

func (x *DescribeRecommandTokenSectionListReply) Reset() {
	*x = DescribeRecommandTokenSectionListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeRecommandTokenSectionListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRecommandTokenSectionListReply) ProtoMessage() {}

func (x *DescribeRecommandTokenSectionListReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRecommandTokenSectionListReply.ProtoReflect.Descriptor instead.
func (*DescribeRecommandTokenSectionListReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{174}
}

func (x *DescribeRecommandTokenSectionListReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeRecommandTokenSectionListReply) GetRecommandTokenSections() []*DescribeRecommandTokenSectionListReply_RecommandTokenSection {
	if x != nil {
		return x.RecommandTokenSections
	}
	return nil
}

type CreateRecommandTokenSectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	// it's JSON
	Name            string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Position        int64             `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	RecommandTokens []*RecommandToken `protobuf:"bytes,4,rep,name=recommandTokens,proto3" json:"recommandTokens,omitempty"`
}

func (x *CreateRecommandTokenSectionRequest) Reset() {
	*x = CreateRecommandTokenSectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRecommandTokenSectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecommandTokenSectionRequest) ProtoMessage() {}

func (x *CreateRecommandTokenSectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecommandTokenSectionRequest.ProtoReflect.Descriptor instead.
func (*CreateRecommandTokenSectionRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{175}
}

func (x *CreateRecommandTokenSectionRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateRecommandTokenSectionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRecommandTokenSectionRequest) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *CreateRecommandTokenSectionRequest) GetRecommandTokens() []*RecommandToken {
	if x != nil {
		return x.RecommandTokens
	}
	return nil
}

type CreateRecommandTokenSectionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *CreateRecommandTokenSectionReply) Reset() {
	*x = CreateRecommandTokenSectionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRecommandTokenSectionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecommandTokenSectionReply) ProtoMessage() {}

func (x *CreateRecommandTokenSectionReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecommandTokenSectionReply.ProtoReflect.Descriptor instead.
func (*CreateRecommandTokenSectionReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{176}
}

func (x *CreateRecommandTokenSectionReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type ModifyRecommandTokenSectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId         string            `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id              uint64            `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name            string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Position        int64             `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
	RecommandTokens []*RecommandToken `protobuf:"bytes,5,rep,name=recommandTokens,proto3" json:"recommandTokens,omitempty"`
}

func (x *ModifyRecommandTokenSectionRequest) Reset() {
	*x = ModifyRecommandTokenSectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyRecommandTokenSectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyRecommandTokenSectionRequest) ProtoMessage() {}

func (x *ModifyRecommandTokenSectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyRecommandTokenSectionRequest.ProtoReflect.Descriptor instead.
func (*ModifyRecommandTokenSectionRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{177}
}

func (x *ModifyRecommandTokenSectionRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyRecommandTokenSectionRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModifyRecommandTokenSectionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModifyRecommandTokenSectionRequest) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ModifyRecommandTokenSectionRequest) GetRecommandTokens() []*RecommandToken {
	if x != nil {
		return x.RecommandTokens
	}
	return nil
}

type ModifyRecommandTokenSectionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *ModifyRecommandTokenSectionReply) Reset() {
	*x = ModifyRecommandTokenSectionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyRecommandTokenSectionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyRecommandTokenSectionReply) ProtoMessage() {}

func (x *ModifyRecommandTokenSectionReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyRecommandTokenSectionReply.ProtoReflect.Descriptor instead.
func (*ModifyRecommandTokenSectionReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{178}
}

func (x *ModifyRecommandTokenSectionReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type DeleteRecommandTokenSectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRecommandTokenSectionRequest) Reset() {
	*x = DeleteRecommandTokenSectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecommandTokenSectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecommandTokenSectionRequest) ProtoMessage() {}

func (x *DeleteRecommandTokenSectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecommandTokenSectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteRecommandTokenSectionRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{179}
}

func (x *DeleteRecommandTokenSectionRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DeleteRecommandTokenSectionRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteRecommandTokenSectionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *DeleteRecommandTokenSectionReply) Reset() {
	*x = DeleteRecommandTokenSectionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecommandTokenSectionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecommandTokenSectionReply) ProtoMessage() {}

func (x *DeleteRecommandTokenSectionReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecommandTokenSectionReply.ProtoReflect.Descriptor instead.
func (*DeleteRecommandTokenSectionReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{180}
}

func (x *DeleteRecommandTokenSectionReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type DescribePriceDeltaMsgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	UserID     string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	DeviceType int32  `protobuf:"varint,3,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	PageSize   int32  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *DescribePriceDeltaMsgRequest) Reset() {
	*x = DescribePriceDeltaMsgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePriceDeltaMsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePriceDeltaMsgRequest) ProtoMessage() {}

func (x *DescribePriceDeltaMsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePriceDeltaMsgRequest.ProtoReflect.Descriptor instead.
func (*DescribePriceDeltaMsgRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{181}
}

func (x *DescribePriceDeltaMsgRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribePriceDeltaMsgRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DescribePriceDeltaMsgRequest) GetDeviceType() int32 {
	if x != nil {
		return x.DeviceType
	}
	return 0
}

func (x *DescribePriceDeltaMsgRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DescribePriceDeltaMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgList []string `protobuf:"bytes,1,rep,name=msgList,proto3" json:"msgList,omitempty"`
}

func (x *DescribePriceDeltaMsgReply) Reset() {
	*x = DescribePriceDeltaMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePriceDeltaMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePriceDeltaMsgReply) ProtoMessage() {}

func (x *DescribePriceDeltaMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePriceDeltaMsgReply.ProtoReflect.Descriptor instead.
func (*DescribePriceDeltaMsgReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{182}
}

func (x *DescribePriceDeltaMsgReply) GetMsgList() []string {
	if x != nil {
		return x.MsgList
	}
	return nil
}

type DescribePairByCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId     string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Chain       string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	BaseCoinID  string `protobuf:"bytes,3,opt,name=baseCoinID,proto3" json:"baseCoinID,omitempty"`
	QuoteCoinID string `protobuf:"bytes,4,opt,name=quoteCoinID,proto3" json:"quoteCoinID,omitempty"`
}

func (x *DescribePairByCoinsRequest) Reset() {
	*x = DescribePairByCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairByCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairByCoinsRequest) ProtoMessage() {}

func (x *DescribePairByCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairByCoinsRequest.ProtoReflect.Descriptor instead.
func (*DescribePairByCoinsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{183}
}

func (x *DescribePairByCoinsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribePairByCoinsRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribePairByCoinsRequest) GetBaseCoinID() string {
	if x != nil {
		return x.BaseCoinID
	}
	return ""
}

func (x *DescribePairByCoinsRequest) GetQuoteCoinID() string {
	if x != nil {
		return x.QuoteCoinID
	}
	return ""
}

type DescribePairByCoinsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair *Pair `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
}

func (x *DescribePairByCoinsReply) Reset() {
	*x = DescribePairByCoinsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairByCoinsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairByCoinsReply) ProtoMessage() {}

func (x *DescribePairByCoinsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairByCoinsReply.ProtoReflect.Descriptor instead.
func (*DescribePairByCoinsReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{184}
}

func (x *DescribePairByCoinsReply) GetPair() *Pair {
	if x != nil {
		return x.Pair
	}
	return nil
}

type CreateTerminalPairOHLCVRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Chain   string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CreateTerminalPairOHLCVRequest) Reset() {
	*x = CreateTerminalPairOHLCVRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTerminalPairOHLCVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTerminalPairOHLCVRequest) ProtoMessage() {}

func (x *CreateTerminalPairOHLCVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTerminalPairOHLCVRequest.ProtoReflect.Descriptor instead.
func (*CreateTerminalPairOHLCVRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{185}
}

func (x *CreateTerminalPairOHLCVRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateTerminalPairOHLCVRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *CreateTerminalPairOHLCVRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type DeleteTerminalPairOHLCVRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Id      int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTerminalPairOHLCVRequest) Reset() {
	*x = DeleteTerminalPairOHLCVRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTerminalPairOHLCVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTerminalPairOHLCVRequest) ProtoMessage() {}

func (x *DeleteTerminalPairOHLCVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTerminalPairOHLCVRequest.ProtoReflect.Descriptor instead.
func (*DeleteTerminalPairOHLCVRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{186}
}

func (x *DeleteTerminalPairOHLCVRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DeleteTerminalPairOHLCVRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DescribeCollectionCombinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	UserID   string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Page     int32  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *DescribeCollectionCombinesRequest) Reset() {
	*x = DescribeCollectionCombinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCollectionCombinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCollectionCombinesRequest) ProtoMessage() {}

func (x *DescribeCollectionCombinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCollectionCombinesRequest.ProtoReflect.Descriptor instead.
func (*DescribeCollectionCombinesRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{187}
}

func (x *DescribeCollectionCombinesRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCollectionCombinesRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DescribeCollectionCombinesRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeCollectionCombinesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeCollectionCombinesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DescribeCollectionCombinesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collections []*DescribeCollectionCombinesReply_Collection `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
	Total       int32                                         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribeCollectionCombinesReply) Reset() {
	*x = DescribeCollectionCombinesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCollectionCombinesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCollectionCombinesReply) ProtoMessage() {}

func (x *DescribeCollectionCombinesReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCollectionCombinesReply.ProtoReflect.Descriptor instead.
func (*DescribeCollectionCombinesReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{188}
}

func (x *DescribeCollectionCombinesReply) GetCollections() []*DescribeCollectionCombinesReply_Collection {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *DescribeCollectionCombinesReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DescribeTopPairByCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID   string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *DescribeTopPairByCoinRequest) Reset() {
	*x = DescribeTopPairByCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopPairByCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopPairByCoinRequest) ProtoMessage() {}

func (x *DescribeTopPairByCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopPairByCoinRequest.ProtoReflect.Descriptor instead.
func (*DescribeTopPairByCoinRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{189}
}

func (x *DescribeTopPairByCoinRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeTopPairByCoinRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeTopPairByCoinRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type DescribeTopPairByCoinReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs []*DescribeTopPairByCoinReply_Pair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *DescribeTopPairByCoinReply) Reset() {
	*x = DescribeTopPairByCoinReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopPairByCoinReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopPairByCoinReply) ProtoMessage() {}

func (x *DescribeTopPairByCoinReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopPairByCoinReply.ProtoReflect.Descriptor instead.
func (*DescribeTopPairByCoinReply) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{190}
}

func (x *DescribeTopPairByCoinReply) GetPairs() []*DescribeTopPairByCoinReply_Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type DescribeTBirdNewsReply_TBirdNews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message     string                                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp   float64                                `protobuf:"fixed64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IconUrl     string                                 `protobuf:"bytes,4,opt,name=iconUrl,proto3" json:"iconUrl,omitempty"`
	CategoryTag string                                 `protobuf:"bytes,5,opt,name=categoryTag,proto3" json:"categoryTag,omitempty"`
	Info        *DescribeTBirdNewsReply_TBirdNews_Info `protobuf:"bytes,6,opt,name=info,proto3" json:"info,omitempty"`
	EiID        int32                                  `protobuf:"varint,7,opt,name=eiID,proto3" json:"eiID,omitempty"`
	EiName      string                                 `protobuf:"bytes,8,opt,name=eiName,proto3" json:"eiName,omitempty"`
	EiNameLans  map[string]string                      `protobuf:"bytes,9,rep,name=eiNameLans,proto3" json:"eiNameLans,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DescribeTBirdNewsReply_TBirdNews) Reset() {
	*x = DescribeTBirdNewsReply_TBirdNews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTBirdNewsReply_TBirdNews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTBirdNewsReply_TBirdNews) ProtoMessage() {}

func (x *DescribeTBirdNewsReply_TBirdNews) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTBirdNewsReply_TBirdNews.ProtoReflect.Descriptor instead.
func (*DescribeTBirdNewsReply_TBirdNews) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{3, 0}
}

func (x *DescribeTBirdNewsReply_TBirdNews) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DescribeTBirdNewsReply_TBirdNews) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DescribeTBirdNewsReply_TBirdNews) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeTBirdNewsReply_TBirdNews) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *DescribeTBirdNewsReply_TBirdNews) GetCategoryTag() string {
	if x != nil {
		return x.CategoryTag
	}
	return ""
}

func (x *DescribeTBirdNewsReply_TBirdNews) GetInfo() *DescribeTBirdNewsReply_TBirdNews_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *DescribeTBirdNewsReply_TBirdNews) GetEiID() int32 {
	if x != nil {
		return x.EiID
	}
	return 0
}

func (x *DescribeTBirdNewsReply_TBirdNews) GetEiName() string {
	if x != nil {
		return x.EiName
	}
	return ""
}

func (x *DescribeTBirdNewsReply_TBirdNews) GetEiNameLans() map[string]string {
	if x != nil {
		return x.EiNameLans
	}
	return nil
}

type DescribeTBirdNewsReply_TBirdNews_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link    string   `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Images  []string `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
	Name    string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Title   string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content string   `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *DescribeTBirdNewsReply_TBirdNews_Info) Reset() {
	*x = DescribeTBirdNewsReply_TBirdNews_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTBirdNewsReply_TBirdNews_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTBirdNewsReply_TBirdNews_Info) ProtoMessage() {}

func (x *DescribeTBirdNewsReply_TBirdNews_Info) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTBirdNewsReply_TBirdNews_Info.ProtoReflect.Descriptor instead.
func (*DescribeTBirdNewsReply_TBirdNews_Info) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *DescribeTBirdNewsReply_TBirdNews_Info) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *DescribeTBirdNewsReply_TBirdNews_Info) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *DescribeTBirdNewsReply_TBirdNews_Info) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeTBirdNewsReply_TBirdNews_Info) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DescribeTBirdNewsReply_TBirdNews_Info) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type DescribePairScanSiteReply_ScanSite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Url    string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DescribePairScanSiteReply_ScanSite) Reset() {
	*x = DescribePairScanSiteReply_ScanSite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairScanSiteReply_ScanSite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairScanSiteReply_ScanSite) ProtoMessage() {}

func (x *DescribePairScanSiteReply_ScanSite) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairScanSiteReply_ScanSite.ProtoReflect.Descriptor instead.
func (*DescribePairScanSiteReply_ScanSite) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{17, 0}
}

func (x *DescribePairScanSiteReply_ScanSite) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DescribePairScanSiteReply_ScanSite) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type DescribeCoinKLineReply_KLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Open      float64 `protobuf:"fixed64,2,opt,name=open,proto3" json:"open,omitempty"`
	Close     float64 `protobuf:"fixed64,3,opt,name=close,proto3" json:"close,omitempty"`
	High      float64 `protobuf:"fixed64,4,opt,name=high,proto3" json:"high,omitempty"`
	Low       float64 `protobuf:"fixed64,5,opt,name=low,proto3" json:"low,omitempty"`
	Volume    float64 `protobuf:"fixed64,6,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *DescribeCoinKLineReply_KLine) Reset() {
	*x = DescribeCoinKLineReply_KLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinKLineReply_KLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinKLineReply_KLine) ProtoMessage() {}

func (x *DescribeCoinKLineReply_KLine) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinKLineReply_KLine.ProtoReflect.Descriptor instead.
func (*DescribeCoinKLineReply_KLine) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{20, 0}
}

func (x *DescribeCoinKLineReply_KLine) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinKLineReply_KLine) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *DescribeCoinKLineReply_KLine) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *DescribeCoinKLineReply_KLine) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *DescribeCoinKLineReply_KLine) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *DescribeCoinKLineReply_KLine) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type DescribeCollectionsReply_Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                  int32    `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	CoinID                string   `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Price                 float64  `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	Delta1H               float64  `protobuf:"fixed64,7,opt,name=delta1h,proto3" json:"delta1h,omitempty"`
	Delta24H              float64  `protobuf:"fixed64,8,opt,name=delta24h,proto3" json:"delta24h,omitempty"`
	Delta7D               float64  `protobuf:"fixed64,9,opt,name=delta7d,proto3" json:"delta7d,omitempty"`
	Delta30D              float64  `protobuf:"fixed64,10,opt,name=delta30d,proto3" json:"delta30d,omitempty"`
	Delta1Y               float64  `protobuf:"fixed64,11,opt,name=delta1y,proto3" json:"delta1y,omitempty"`
	Volume24H             float64  `protobuf:"fixed64,12,opt,name=volume24h,proto3" json:"volume24h,omitempty"`
	MarketCap             float64  `protobuf:"fixed64,13,opt,name=marketCap,proto3" json:"marketCap,omitempty"`
	FullyDilutedValuation float64  `protobuf:"fixed64,14,opt,name=fullyDilutedValuation,proto3" json:"fullyDilutedValuation,omitempty"`
	TotalSupply           float64  `protobuf:"fixed64,15,opt,name=totalSupply,proto3" json:"totalSupply,omitempty"`
	MaxSupply             float64  `protobuf:"fixed64,16,opt,name=maxSupply,proto3" json:"maxSupply,omitempty"`
	CirculatingSupply     float64  `protobuf:"fixed64,17,opt,name=circulatingSupply,proto3" json:"circulatingSupply,omitempty"`
	High24                float64  `protobuf:"fixed64,18,opt,name=high24,proto3" json:"high24,omitempty"`
	Low24                 float64  `protobuf:"fixed64,19,opt,name=low24,proto3" json:"low24,omitempty"`
	Sparkline7D           string   `protobuf:"bytes,20,opt,name=sparkline7d,proto3" json:"sparkline7d,omitempty"`
	Category              []string `protobuf:"bytes,21,rep,name=category,proto3" json:"category,omitempty"`
	UpdatedAt             string   `protobuf:"bytes,22,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Image                 string   `protobuf:"bytes,23,opt,name=image,proto3" json:"image,omitempty"`
	Name                  string   `protobuf:"bytes,24,opt,name=name,proto3" json:"name,omitempty"`
	Symbol                string   `protobuf:"bytes,25,opt,name=symbol,proto3" json:"symbol,omitempty"`
	IsFocus               int32    `protobuf:"varint,26,opt,name=isFocus,proto3" json:"isFocus,omitempty"`
}

func (x *DescribeCollectionsReply_Coin) Reset() {
	*x = DescribeCollectionsReply_Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCollectionsReply_Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCollectionsReply_Coin) ProtoMessage() {}

func (x *DescribeCollectionsReply_Coin) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCollectionsReply_Coin.ProtoReflect.Descriptor instead.
func (*DescribeCollectionsReply_Coin) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{26, 0}
}

func (x *DescribeCollectionsReply_Coin) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *DescribeCollectionsReply_Coin) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCollectionsReply_Coin) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DescribeCollectionsReply_Coin) GetDelta1H() float64 {
	if x != nil {
		return x.Delta1H
	}
	return 0
}

func (x *DescribeCollectionsReply_Coin) GetDelta24H() float64 {
	if x != nil {
		return x.Delta24H
	}
	return 0
}

func (x *DescribeCollectionsReply_Coin) GetDelta7D() float64 {
	if x != nil {
		return x.Delta7D
	}
	return 0
}

func (x *DescribeCollectionsReply_Coin) GetDelta30D() float64 {
	if x != nil {
		return x.Delta30D
	}
	return 0
}

func (x *DescribeCollectionsReply_Coin) GetDelta1Y() float64 {
	if x != nil {
		return x.Delta1Y
	}
	return 0
}

func (x *DescribeCollectionsReply_Coin) GetVolume24H() float64 {
	if x != nil {
		return x.Volume24H
	}
	return 0
}

func (x *DescribeCollectionsReply_Coin) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *DescribeCollectionsReply_Coin) GetFullyDilutedValuation() float64 {
	if x != nil {
		return x.FullyDilutedValuation
	}
	return 0
}

func (x *DescribeCollectionsReply_Coin) GetTotalSupply() float64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

func (x *DescribeCollectionsReply_Coin) GetMaxSupply() float64 {
	if x != nil {
		return x.MaxSupply
	}
	return 0
}

func (x *DescribeCollectionsReply_Coin) GetCirculatingSupply() float64 {
	if x != nil {
		return x.CirculatingSupply
	}
	return 0
}

func (x *DescribeCollectionsReply_Coin) GetHigh24() float64 {
	if x != nil {
		return x.High24
	}
	return 0
}

func (x *DescribeCollectionsReply_Coin) GetLow24() float64 {
	if x != nil {
		return x.Low24
	}
	return 0
}

func (x *DescribeCollectionsReply_Coin) GetSparkline7D() string {
	if x != nil {
		return x.Sparkline7D
	}
	return ""
}

func (x *DescribeCollectionsReply_Coin) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *DescribeCollectionsReply_Coin) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *DescribeCollectionsReply_Coin) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *DescribeCollectionsReply_Coin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeCollectionsReply_Coin) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DescribeCollectionsReply_Coin) GetIsFocus() int32 {
	if x != nil {
		return x.IsFocus
	}
	return 0
}

type DescribeCollectionsReply_Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Chain      string  `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	DexID      string  `protobuf:"bytes,3,opt,name=dexID,proto3" json:"dexID,omitempty"`
	DexIcon    string  `protobuf:"bytes,4,opt,name=dexIcon,proto3" json:"dexIcon,omitempty"`
	BaseToken  string  `protobuf:"bytes,5,opt,name=baseToken,proto3" json:"baseToken,omitempty"`
	QuoteToken string  `protobuf:"bytes,6,opt,name=quoteToken,proto3" json:"quoteToken,omitempty"`
	Stat5M     string  `protobuf:"bytes,7,opt,name=stat5m,proto3" json:"stat5m,omitempty"`
	Stat1H     string  `protobuf:"bytes,8,opt,name=stat1h,proto3" json:"stat1h,omitempty"`
	Stat6H     string  `protobuf:"bytes,9,opt,name=stat6h,proto3" json:"stat6h,omitempty"`
	Stat24H    string  `protobuf:"bytes,10,opt,name=stat24h,proto3" json:"stat24h,omitempty"`
	Fdv        float64 `protobuf:"fixed64,11,opt,name=fdv,proto3" json:"fdv,omitempty"`
	Liquidity  float64 `protobuf:"fixed64,12,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Price      float64 `protobuf:"fixed64,13,opt,name=price,proto3" json:"price,omitempty"`
	IsFocus    int32   `protobuf:"varint,14,opt,name=isFocus,proto3" json:"isFocus,omitempty"`
	CreatedAt  uint32  `protobuf:"varint,15,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *DescribeCollectionsReply_Pair) Reset() {
	*x = DescribeCollectionsReply_Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCollectionsReply_Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCollectionsReply_Pair) ProtoMessage() {}

func (x *DescribeCollectionsReply_Pair) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCollectionsReply_Pair.ProtoReflect.Descriptor instead.
func (*DescribeCollectionsReply_Pair) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{26, 1}
}

func (x *DescribeCollectionsReply_Pair) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribeCollectionsReply_Pair) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeCollectionsReply_Pair) GetDexID() string {
	if x != nil {
		return x.DexID
	}
	return ""
}

func (x *DescribeCollectionsReply_Pair) GetDexIcon() string {
	if x != nil {
		return x.DexIcon
	}
	return ""
}

func (x *DescribeCollectionsReply_Pair) GetBaseToken() string {
	if x != nil {
		return x.BaseToken
	}
	return ""
}

func (x *DescribeCollectionsReply_Pair) GetQuoteToken() string {
	if x != nil {
		return x.QuoteToken
	}
	return ""
}

func (x *DescribeCollectionsReply_Pair) GetStat5M() string {
	if x != nil {
		return x.Stat5M
	}
	return ""
}

func (x *DescribeCollectionsReply_Pair) GetStat1H() string {
	if x != nil {
		return x.Stat1H
	}
	return ""
}

func (x *DescribeCollectionsReply_Pair) GetStat6H() string {
	if x != nil {
		return x.Stat6H
	}
	return ""
}

func (x *DescribeCollectionsReply_Pair) GetStat24H() string {
	if x != nil {
		return x.Stat24H
	}
	return ""
}

func (x *DescribeCollectionsReply_Pair) GetFdv() float64 {
	if x != nil {
		return x.Fdv
	}
	return 0
}

func (x *DescribeCollectionsReply_Pair) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *DescribeCollectionsReply_Pair) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DescribeCollectionsReply_Pair) GetIsFocus() int32 {
	if x != nil {
		return x.IsFocus
	}
	return 0
}

func (x *DescribeCollectionsReply_Pair) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type CoinAndPair_Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Symbol  string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CoinAndPair_Token) Reset() {
	*x = CoinAndPair_Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinAndPair_Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinAndPair_Token) ProtoMessage() {}

func (x *CoinAndPair_Token) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinAndPair_Token.ProtoReflect.Descriptor instead.
func (*CoinAndPair_Token) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{29, 0}
}

func (x *CoinAndPair_Token) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoinAndPair_Token) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CoinAndPair_Token) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type DescribeDexReply_Dex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DexID  string `protobuf:"bytes,1,opt,name=dexID,proto3" json:"dexID,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Weight int64  `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Image  string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *DescribeDexReply_Dex) Reset() {
	*x = DescribeDexReply_Dex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDexReply_Dex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDexReply_Dex) ProtoMessage() {}

func (x *DescribeDexReply_Dex) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDexReply_Dex.ProtoReflect.Descriptor instead.
func (*DescribeDexReply_Dex) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{31, 0}
}

func (x *DescribeDexReply_Dex) GetDexID() string {
	if x != nil {
		return x.DexID
	}
	return ""
}

func (x *DescribeDexReply_Dex) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeDexReply_Dex) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *DescribeDexReply_Dex) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type DescribeHotCoinsReply_HotCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID     string  `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Name       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol     string  `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Image      string  `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	PriceDelta float32 `protobuf:"fixed32,5,opt,name=priceDelta,proto3" json:"priceDelta,omitempty"`
	Price      float32 `protobuf:"fixed32,6,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *DescribeHotCoinsReply_HotCoin) Reset() {
	*x = DescribeHotCoinsReply_HotCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeHotCoinsReply_HotCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeHotCoinsReply_HotCoin) ProtoMessage() {}

func (x *DescribeHotCoinsReply_HotCoin) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeHotCoinsReply_HotCoin.ProtoReflect.Descriptor instead.
func (*DescribeHotCoinsReply_HotCoin) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{33, 0}
}

func (x *DescribeHotCoinsReply_HotCoin) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeHotCoinsReply_HotCoin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeHotCoinsReply_HotCoin) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DescribeHotCoinsReply_HotCoin) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *DescribeHotCoinsReply_HotCoin) GetPriceDelta() float32 {
	if x != nil {
		return x.PriceDelta
	}
	return 0
}

func (x *DescribeHotCoinsReply_HotCoin) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type DescribeHotCoinsV2Reply_HotCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID      string  `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol      string  `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Image       string  `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Delta24H    float64 `protobuf:"fixed64,5,opt,name=delta24h,proto3" json:"delta24h,omitempty"`
	Price       float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	Volume24H   float64 `protobuf:"fixed64,7,opt,name=volume24h,proto3" json:"volume24h,omitempty"`
	MarketCap   float64 `protobuf:"fixed64,8,opt,name=marketCap,proto3" json:"marketCap,omitempty"`
	Sparkline7D string  `protobuf:"bytes,9,opt,name=sparkline7d,proto3" json:"sparkline7d,omitempty"`
}

func (x *DescribeHotCoinsV2Reply_HotCoin) Reset() {
	*x = DescribeHotCoinsV2Reply_HotCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeHotCoinsV2Reply_HotCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeHotCoinsV2Reply_HotCoin) ProtoMessage() {}

func (x *DescribeHotCoinsV2Reply_HotCoin) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeHotCoinsV2Reply_HotCoin.ProtoReflect.Descriptor instead.
func (*DescribeHotCoinsV2Reply_HotCoin) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{34, 0}
}

func (x *DescribeHotCoinsV2Reply_HotCoin) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeHotCoinsV2Reply_HotCoin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeHotCoinsV2Reply_HotCoin) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DescribeHotCoinsV2Reply_HotCoin) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *DescribeHotCoinsV2Reply_HotCoin) GetDelta24H() float64 {
	if x != nil {
		return x.Delta24H
	}
	return 0
}

func (x *DescribeHotCoinsV2Reply_HotCoin) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DescribeHotCoinsV2Reply_HotCoin) GetVolume24H() float64 {
	if x != nil {
		return x.Volume24H
	}
	return 0
}

func (x *DescribeHotCoinsV2Reply_HotCoin) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *DescribeHotCoinsV2Reply_HotCoin) GetSparkline7D() string {
	if x != nil {
		return x.Sparkline7D
	}
	return ""
}

type DescribeChainsSupportReply_Chain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon  string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *DescribeChainsSupportReply_Chain) Reset() {
	*x = DescribeChainsSupportReply_Chain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeChainsSupportReply_Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeChainsSupportReply_Chain) ProtoMessage() {}

func (x *DescribeChainsSupportReply_Chain) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeChainsSupportReply_Chain.ProtoReflect.Descriptor instead.
func (*DescribeChainsSupportReply_Chain) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{36, 0}
}

func (x *DescribeChainsSupportReply_Chain) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeChainsSupportReply_Chain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeChainsSupportReply_Chain) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type DescribeAlertsReply_CoinAlerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID string                                   `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Alerts []*DescribeAlertsReply_CoinAlerts_Alerts `protobuf:"bytes,2,rep,name=alerts,proto3" json:"alerts,omitempty"`
	Type   int32                                    `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *DescribeAlertsReply_CoinAlerts) Reset() {
	*x = DescribeAlertsReply_CoinAlerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAlertsReply_CoinAlerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAlertsReply_CoinAlerts) ProtoMessage() {}

func (x *DescribeAlertsReply_CoinAlerts) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAlertsReply_CoinAlerts.ProtoReflect.Descriptor instead.
func (*DescribeAlertsReply_CoinAlerts) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{40, 0}
}

func (x *DescribeAlertsReply_CoinAlerts) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeAlertsReply_CoinAlerts) GetAlerts() []*DescribeAlertsReply_CoinAlerts_Alerts {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *DescribeAlertsReply_CoinAlerts) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type DescribeAlertsReply_CoinAlerts_Alerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertID   int32  `protobuf:"varint,1,opt,name=alertID,proto3" json:"alertID,omitempty"`
	AlertType int32  `protobuf:"varint,2,opt,name=alertType,proto3" json:"alertType,omitempty"`
	Value     string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Frequency int32  `protobuf:"varint,4,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Currency  string `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	Type      int32  `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DescribeAlertsReply_CoinAlerts_Alerts) Reset() {
	*x = DescribeAlertsReply_CoinAlerts_Alerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAlertsReply_CoinAlerts_Alerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAlertsReply_CoinAlerts_Alerts) ProtoMessage() {}

func (x *DescribeAlertsReply_CoinAlerts_Alerts) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAlertsReply_CoinAlerts_Alerts.ProtoReflect.Descriptor instead.
func (*DescribeAlertsReply_CoinAlerts_Alerts) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{40, 0, 0}
}

func (x *DescribeAlertsReply_CoinAlerts_Alerts) GetAlertID() int32 {
	if x != nil {
		return x.AlertID
	}
	return 0
}

func (x *DescribeAlertsReply_CoinAlerts_Alerts) GetAlertType() int32 {
	if x != nil {
		return x.AlertType
	}
	return 0
}

func (x *DescribeAlertsReply_CoinAlerts_Alerts) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DescribeAlertsReply_CoinAlerts_Alerts) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *DescribeAlertsReply_CoinAlerts_Alerts) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeAlertsReply_CoinAlerts_Alerts) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type DescribeCollectionGuideListReply_Guide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID string `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Weight int32  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *DescribeCollectionGuideListReply_Guide) Reset() {
	*x = DescribeCollectionGuideListReply_Guide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCollectionGuideListReply_Guide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCollectionGuideListReply_Guide) ProtoMessage() {}

func (x *DescribeCollectionGuideListReply_Guide) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCollectionGuideListReply_Guide.ProtoReflect.Descriptor instead.
func (*DescribeCollectionGuideListReply_Guide) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{46, 0}
}

func (x *DescribeCollectionGuideListReply_Guide) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCollectionGuideListReply_Guide) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type DescribeColumnListReply_Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnID int32             `protobuf:"varint,1,opt,name=columnID,proto3" json:"columnID,omitempty"`
	Name     map[string]string `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Type     int32             `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Category []string          `protobuf:"bytes,7,rep,name=category,proto3" json:"category,omitempty"`
	Weight   int32             `protobuf:"varint,8,opt,name=weight,proto3" json:"weight,omitempty"`
	Valid    bool              `protobuf:"varint,9,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *DescribeColumnListReply_Column) Reset() {
	*x = DescribeColumnListReply_Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeColumnListReply_Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeColumnListReply_Column) ProtoMessage() {}

func (x *DescribeColumnListReply_Column) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeColumnListReply_Column.ProtoReflect.Descriptor instead.
func (*DescribeColumnListReply_Column) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{54, 0}
}

func (x *DescribeColumnListReply_Column) GetColumnID() int32 {
	if x != nil {
		return x.ColumnID
	}
	return 0
}

func (x *DescribeColumnListReply_Column) GetName() map[string]string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *DescribeColumnListReply_Column) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DescribeColumnListReply_Column) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *DescribeColumnListReply_Column) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *DescribeColumnListReply_Column) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type DescribeCexCoinsRequest_Sort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortField DescribeCexCoinsRequest_SortFieldEnum `protobuf:"varint,1,opt,name=sortField,proto3,enum=api.market.v1.DescribeCexCoinsRequest_SortFieldEnum" json:"sortField,omitempty"`
	SortType  string                                `protobuf:"bytes,2,opt,name=sortType,proto3" json:"sortType,omitempty"`
}

func (x *DescribeCexCoinsRequest_Sort) Reset() {
	*x = DescribeCexCoinsRequest_Sort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCexCoinsRequest_Sort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCexCoinsRequest_Sort) ProtoMessage() {}

func (x *DescribeCexCoinsRequest_Sort) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCexCoinsRequest_Sort.ProtoReflect.Descriptor instead.
func (*DescribeCexCoinsRequest_Sort) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{65, 0}
}

func (x *DescribeCexCoinsRequest_Sort) GetSortField() DescribeCexCoinsRequest_SortFieldEnum {
	if x != nil {
		return x.SortField
	}
	return DescribeCexCoinsRequest_Price
}

func (x *DescribeCexCoinsRequest_Sort) GetSortType() string {
	if x != nil {
		return x.SortType
	}
	return ""
}

type DescribeCexCoinsReply_Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                  int32    `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	CoinID                string   `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Price                 float64  `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	Delta1H               float64  `protobuf:"fixed64,7,opt,name=delta1h,proto3" json:"delta1h,omitempty"`
	Delta24H              float64  `protobuf:"fixed64,8,opt,name=delta24h,proto3" json:"delta24h,omitempty"`
	Delta7D               float64  `protobuf:"fixed64,9,opt,name=delta7d,proto3" json:"delta7d,omitempty"`
	Delta30D              float64  `protobuf:"fixed64,10,opt,name=delta30d,proto3" json:"delta30d,omitempty"`
	Delta1Y               float64  `protobuf:"fixed64,11,opt,name=delta1y,proto3" json:"delta1y,omitempty"`
	Volume24H             float64  `protobuf:"fixed64,12,opt,name=volume24h,proto3" json:"volume24h,omitempty"`
	MarketCap             float64  `protobuf:"fixed64,13,opt,name=marketCap,proto3" json:"marketCap,omitempty"`
	FullyDilutedValuation float64  `protobuf:"fixed64,14,opt,name=fullyDilutedValuation,proto3" json:"fullyDilutedValuation,omitempty"`
	TotalSupply           float64  `protobuf:"fixed64,15,opt,name=totalSupply,proto3" json:"totalSupply,omitempty"`
	MaxSupply             float64  `protobuf:"fixed64,16,opt,name=maxSupply,proto3" json:"maxSupply,omitempty"`
	CirculatingSupply     float64  `protobuf:"fixed64,17,opt,name=circulatingSupply,proto3" json:"circulatingSupply,omitempty"`
	High24                float64  `protobuf:"fixed64,18,opt,name=high24,proto3" json:"high24,omitempty"`
	Low24                 float64  `protobuf:"fixed64,19,opt,name=low24,proto3" json:"low24,omitempty"`
	Sparkline7D           string   `protobuf:"bytes,20,opt,name=sparkline7d,proto3" json:"sparkline7d,omitempty"`
	Category              []string `protobuf:"bytes,21,rep,name=category,proto3" json:"category,omitempty"`
	UpdatedAt             string   `protobuf:"bytes,22,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Image                 string   `protobuf:"bytes,23,opt,name=image,proto3" json:"image,omitempty"`
	Name                  string   `protobuf:"bytes,24,opt,name=name,proto3" json:"name,omitempty"`
	Symbol                string   `protobuf:"bytes,25,opt,name=symbol,proto3" json:"symbol,omitempty"`
	IsFocus               int32    `protobuf:"varint,26,opt,name=isFocus,proto3" json:"isFocus,omitempty"`
	Delta15M              float64  `protobuf:"fixed64,27,opt,name=delta15m,proto3" json:"delta15m,omitempty"`
}

func (x *DescribeCexCoinsReply_Coin) Reset() {
	*x = DescribeCexCoinsReply_Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCexCoinsReply_Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCexCoinsReply_Coin) ProtoMessage() {}

func (x *DescribeCexCoinsReply_Coin) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCexCoinsReply_Coin.ProtoReflect.Descriptor instead.
func (*DescribeCexCoinsReply_Coin) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{66, 0}
}

func (x *DescribeCexCoinsReply_Coin) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCexCoinsReply_Coin) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetDelta1H() float64 {
	if x != nil {
		return x.Delta1H
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetDelta24H() float64 {
	if x != nil {
		return x.Delta24H
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetDelta7D() float64 {
	if x != nil {
		return x.Delta7D
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetDelta30D() float64 {
	if x != nil {
		return x.Delta30D
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetDelta1Y() float64 {
	if x != nil {
		return x.Delta1Y
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetVolume24H() float64 {
	if x != nil {
		return x.Volume24H
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetFullyDilutedValuation() float64 {
	if x != nil {
		return x.FullyDilutedValuation
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetTotalSupply() float64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetMaxSupply() float64 {
	if x != nil {
		return x.MaxSupply
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetCirculatingSupply() float64 {
	if x != nil {
		return x.CirculatingSupply
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetHigh24() float64 {
	if x != nil {
		return x.High24
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetLow24() float64 {
	if x != nil {
		return x.Low24
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetSparkline7D() string {
	if x != nil {
		return x.Sparkline7D
	}
	return ""
}

func (x *DescribeCexCoinsReply_Coin) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *DescribeCexCoinsReply_Coin) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *DescribeCexCoinsReply_Coin) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *DescribeCexCoinsReply_Coin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeCexCoinsReply_Coin) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DescribeCexCoinsReply_Coin) GetIsFocus() int32 {
	if x != nil {
		return x.IsFocus
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetDelta15M() float64 {
	if x != nil {
		return x.Delta15M
	}
	return 0
}

type DescribeMarketExtraDetailReply_ChainAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain   string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Icon    string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *DescribeMarketExtraDetailReply_ChainAddress) Reset() {
	*x = DescribeMarketExtraDetailReply_ChainAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMarketExtraDetailReply_ChainAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMarketExtraDetailReply_ChainAddress) ProtoMessage() {}

func (x *DescribeMarketExtraDetailReply_ChainAddress) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMarketExtraDetailReply_ChainAddress.ProtoReflect.Descriptor instead.
func (*DescribeMarketExtraDetailReply_ChainAddress) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{72, 0}
}

func (x *DescribeMarketExtraDetailReply_ChainAddress) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeMarketExtraDetailReply_ChainAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribeMarketExtraDetailReply_ChainAddress) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type DescribeMarketExtraDetailReply_SocialLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Twitter  string `protobuf:"bytes,1,opt,name=twitter,proto3" json:"twitter,omitempty"`
	Facebook string `protobuf:"bytes,2,opt,name=facebook,proto3" json:"facebook,omitempty"`
	Reddit   string `protobuf:"bytes,3,opt,name=reddit,proto3" json:"reddit,omitempty"`
	Telegram string `protobuf:"bytes,4,opt,name=telegram,proto3" json:"telegram,omitempty"`
}

func (x *DescribeMarketExtraDetailReply_SocialLink) Reset() {
	*x = DescribeMarketExtraDetailReply_SocialLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMarketExtraDetailReply_SocialLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMarketExtraDetailReply_SocialLink) ProtoMessage() {}

func (x *DescribeMarketExtraDetailReply_SocialLink) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMarketExtraDetailReply_SocialLink.ProtoReflect.Descriptor instead.
func (*DescribeMarketExtraDetailReply_SocialLink) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{72, 1}
}

func (x *DescribeMarketExtraDetailReply_SocialLink) GetTwitter() string {
	if x != nil {
		return x.Twitter
	}
	return ""
}

func (x *DescribeMarketExtraDetailReply_SocialLink) GetFacebook() string {
	if x != nil {
		return x.Facebook
	}
	return ""
}

func (x *DescribeMarketExtraDetailReply_SocialLink) GetReddit() string {
	if x != nil {
		return x.Reddit
	}
	return ""
}

func (x *DescribeMarketExtraDetailReply_SocialLink) GetTelegram() string {
	if x != nil {
		return x.Telegram
	}
	return ""
}

type DescribeCoinPriceChartReply_PriceChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Price     float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *DescribeCoinPriceChartReply_PriceChart) Reset() {
	*x = DescribeCoinPriceChartReply_PriceChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinPriceChartReply_PriceChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinPriceChartReply_PriceChart) ProtoMessage() {}

func (x *DescribeCoinPriceChartReply_PriceChart) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinPriceChartReply_PriceChart.ProtoReflect.Descriptor instead.
func (*DescribeCoinPriceChartReply_PriceChart) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{74, 0}
}

func (x *DescribeCoinPriceChartReply_PriceChart) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinPriceChartReply_PriceChart) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type DescribeCoinPriceChartReply_CapChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Cap       float64 `protobuf:"fixed64,2,opt,name=cap,proto3" json:"cap,omitempty"`
}

func (x *DescribeCoinPriceChartReply_CapChart) Reset() {
	*x = DescribeCoinPriceChartReply_CapChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinPriceChartReply_CapChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinPriceChartReply_CapChart) ProtoMessage() {}

func (x *DescribeCoinPriceChartReply_CapChart) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinPriceChartReply_CapChart.ProtoReflect.Descriptor instead.
func (*DescribeCoinPriceChartReply_CapChart) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{74, 1}
}

func (x *DescribeCoinPriceChartReply_CapChart) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinPriceChartReply_CapChart) GetCap() float64 {
	if x != nil {
		return x.Cap
	}
	return 0
}

type DescribeCoinPriceChartReply_VolumeChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Volume    float64 `protobuf:"fixed64,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *DescribeCoinPriceChartReply_VolumeChart) Reset() {
	*x = DescribeCoinPriceChartReply_VolumeChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinPriceChartReply_VolumeChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinPriceChartReply_VolumeChart) ProtoMessage() {}

func (x *DescribeCoinPriceChartReply_VolumeChart) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinPriceChartReply_VolumeChart.ProtoReflect.Descriptor instead.
func (*DescribeCoinPriceChartReply_VolumeChart) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{74, 2}
}

func (x *DescribeCoinPriceChartReply_VolumeChart) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinPriceChartReply_VolumeChart) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type DescribeCoinPriceByRangeReply_Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Price     float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *DescribeCoinPriceByRangeReply_Price) Reset() {
	*x = DescribeCoinPriceByRangeReply_Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinPriceByRangeReply_Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinPriceByRangeReply_Price) ProtoMessage() {}

func (x *DescribeCoinPriceByRangeReply_Price) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinPriceByRangeReply_Price.ProtoReflect.Descriptor instead.
func (*DescribeCoinPriceByRangeReply_Price) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{76, 0}
}

func (x *DescribeCoinPriceByRangeReply_Price) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinPriceByRangeReply_Price) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type DescribeCoinSwapsReply_CoinSwapsDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID            string  `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Timestamp       uint32  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Amm             string  `protobuf:"bytes,3,opt,name=amm,proto3" json:"amm,omitempty"`
	Chain           string  `protobuf:"bytes,4,opt,name=chain,proto3" json:"chain,omitempty"`
	Price           float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	SenderCoinID    string  `protobuf:"bytes,6,opt,name=senderCoinID,proto3" json:"senderCoinID,omitempty"`
	ReceiverCoinID  string  `protobuf:"bytes,7,opt,name=receiverCoinID,proto3" json:"receiverCoinID,omitempty"`
	SenderAddress   string  `protobuf:"bytes,8,opt,name=senderAddress,proto3" json:"senderAddress,omitempty"`
	ReceiverAddress string  `protobuf:"bytes,9,opt,name=receiverAddress,proto3" json:"receiverAddress,omitempty"`
	TokenIn         string  `protobuf:"bytes,10,opt,name=tokenIn,proto3" json:"tokenIn,omitempty"`
	TokenOut        string  `protobuf:"bytes,11,opt,name=tokenOut,proto3" json:"tokenOut,omitempty"`
	PairAddress     string  `protobuf:"bytes,12,opt,name=pairAddress,proto3" json:"pairAddress,omitempty"`
	WalletAddress   string  `protobuf:"bytes,13,opt,name=walletAddress,proto3" json:"walletAddress,omitempty"`
	BlockNumber     uint32  `protobuf:"varint,14,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	WalletCategory  string  `protobuf:"bytes,15,opt,name=walletCategory,proto3" json:"walletCategory,omitempty"`
	TransType       string  `protobuf:"bytes,16,opt,name=transType,proto3" json:"transType,omitempty"`
	TransAddress    string  `protobuf:"bytes,17,opt,name=transAddress,proto3" json:"transAddress,omitempty"`
	BrowserLink     string  `protobuf:"bytes,18,opt,name=browserLink,proto3" json:"browserLink,omitempty"`
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) Reset() {
	*x = DescribeCoinSwapsReply_CoinSwapsDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSwapsReply_CoinSwapsDetail) ProtoMessage() {}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSwapsReply_CoinSwapsDetail.ProtoReflect.Descriptor instead.
func (*DescribeCoinSwapsReply_CoinSwapsDetail) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{80, 0}
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetAmm() string {
	if x != nil {
		return x.Amm
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetSenderCoinID() string {
	if x != nil {
		return x.SenderCoinID
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetReceiverCoinID() string {
	if x != nil {
		return x.ReceiverCoinID
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetTokenIn() string {
	if x != nil {
		return x.TokenIn
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetTokenOut() string {
	if x != nil {
		return x.TokenOut
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetPairAddress() string {
	if x != nil {
		return x.PairAddress
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetWalletCategory() string {
	if x != nil {
		return x.WalletCategory
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetTransType() string {
	if x != nil {
		return x.TransType
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetTransAddress() string {
	if x != nil {
		return x.TransAddress
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetBrowserLink() string {
	if x != nil {
		return x.BrowserLink
	}
	return ""
}

type DescribeCoinLiquidityReply_CoinLiquidityDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID          string  `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Timestamp     uint32  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Amm           string  `protobuf:"bytes,3,opt,name=amm,proto3" json:"amm,omitempty"`
	Chain         string  `protobuf:"bytes,4,opt,name=chain,proto3" json:"chain,omitempty"`
	Price         float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	Token1CoinID  string  `protobuf:"bytes,6,opt,name=token1CoinID,proto3" json:"token1CoinID,omitempty"`
	Token2CoinID  string  `protobuf:"bytes,7,opt,name=token2CoinID,proto3" json:"token2CoinID,omitempty"`
	Token1Address string  `protobuf:"bytes,8,opt,name=token1Address,proto3" json:"token1Address,omitempty"`
	Token2Address string  `protobuf:"bytes,9,opt,name=token2Address,proto3" json:"token2Address,omitempty"`
	Token1        string  `protobuf:"bytes,10,opt,name=token1,proto3" json:"token1,omitempty"`
	Token2        string  `protobuf:"bytes,11,opt,name=token2,proto3" json:"token2,omitempty"`
	PairAddress   string  `protobuf:"bytes,12,opt,name=pairAddress,proto3" json:"pairAddress,omitempty"`
	WalletAddress string  `protobuf:"bytes,13,opt,name=walletAddress,proto3" json:"walletAddress,omitempty"`
	BlockNumber   uint32  `protobuf:"varint,14,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TransType     string  `protobuf:"bytes,15,opt,name=transType,proto3" json:"transType,omitempty"`
	TransAddress  string  `protobuf:"bytes,16,opt,name=transAddress,proto3" json:"transAddress,omitempty"`
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) Reset() {
	*x = DescribeCoinLiquidityReply_CoinLiquidityDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinLiquidityReply_CoinLiquidityDetail) ProtoMessage() {}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinLiquidityReply_CoinLiquidityDetail.ProtoReflect.Descriptor instead.
func (*DescribeCoinLiquidityReply_CoinLiquidityDetail) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{83, 0}
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetAmm() string {
	if x != nil {
		return x.Amm
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetToken1CoinID() string {
	if x != nil {
		return x.Token1CoinID
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetToken2CoinID() string {
	if x != nil {
		return x.Token2CoinID
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetToken1Address() string {
	if x != nil {
		return x.Token1Address
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetToken2Address() string {
	if x != nil {
		return x.Token2Address
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetToken1() string {
	if x != nil {
		return x.Token1
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetToken2() string {
	if x != nil {
		return x.Token2
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetPairAddress() string {
	if x != nil {
		return x.PairAddress
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetTransType() string {
	if x != nil {
		return x.TransType
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetTransAddress() string {
	if x != nil {
		return x.TransAddress
	}
	return ""
}

type DescribeCoinLiquidityChartReply_LiquidityChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Price     float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *DescribeCoinLiquidityChartReply_LiquidityChart) Reset() {
	*x = DescribeCoinLiquidityChartReply_LiquidityChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinLiquidityChartReply_LiquidityChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinLiquidityChartReply_LiquidityChart) ProtoMessage() {}

func (x *DescribeCoinLiquidityChartReply_LiquidityChart) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinLiquidityChartReply_LiquidityChart.ProtoReflect.Descriptor instead.
func (*DescribeCoinLiquidityChartReply_LiquidityChart) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{85, 0}
}

func (x *DescribeCoinLiquidityChartReply_LiquidityChart) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinLiquidityChartReply_LiquidityChart) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type DescribeCoinUserChartReply_UserChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Buy       int32  `protobuf:"varint,2,opt,name=buy,proto3" json:"buy,omitempty"`
	Sell      int32  `protobuf:"varint,3,opt,name=sell,proto3" json:"sell,omitempty"`
	Total     int32  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribeCoinUserChartReply_UserChart) Reset() {
	*x = DescribeCoinUserChartReply_UserChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinUserChartReply_UserChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinUserChartReply_UserChart) ProtoMessage() {}

func (x *DescribeCoinUserChartReply_UserChart) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinUserChartReply_UserChart.ProtoReflect.Descriptor instead.
func (*DescribeCoinUserChartReply_UserChart) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{87, 0}
}

func (x *DescribeCoinUserChartReply_UserChart) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinUserChartReply_UserChart) GetBuy() int32 {
	if x != nil {
		return x.Buy
	}
	return 0
}

func (x *DescribeCoinUserChartReply_UserChart) GetSell() int32 {
	if x != nil {
		return x.Sell
	}
	return 0
}

func (x *DescribeCoinUserChartReply_UserChart) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DescribeCoinOrderChartReply_OrderChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Buy       int32  `protobuf:"varint,2,opt,name=buy,proto3" json:"buy,omitempty"`
	Sell      int32  `protobuf:"varint,3,opt,name=sell,proto3" json:"sell,omitempty"`
	Total     int32  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribeCoinOrderChartReply_OrderChart) Reset() {
	*x = DescribeCoinOrderChartReply_OrderChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinOrderChartReply_OrderChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinOrderChartReply_OrderChart) ProtoMessage() {}

func (x *DescribeCoinOrderChartReply_OrderChart) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinOrderChartReply_OrderChart.ProtoReflect.Descriptor instead.
func (*DescribeCoinOrderChartReply_OrderChart) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{89, 0}
}

func (x *DescribeCoinOrderChartReply_OrderChart) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinOrderChartReply_OrderChart) GetBuy() int32 {
	if x != nil {
		return x.Buy
	}
	return 0
}

func (x *DescribeCoinOrderChartReply_OrderChart) GetSell() int32 {
	if x != nil {
		return x.Sell
	}
	return 0
}

func (x *DescribeCoinOrderChartReply_OrderChart) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DescribeCoinVolumeChartReply_VolumeChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Buy       float64 `protobuf:"fixed64,2,opt,name=buy,proto3" json:"buy,omitempty"`
	Sell      float64 `protobuf:"fixed64,3,opt,name=sell,proto3" json:"sell,omitempty"`
	Total     float64 `protobuf:"fixed64,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribeCoinVolumeChartReply_VolumeChart) Reset() {
	*x = DescribeCoinVolumeChartReply_VolumeChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinVolumeChartReply_VolumeChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinVolumeChartReply_VolumeChart) ProtoMessage() {}

func (x *DescribeCoinVolumeChartReply_VolumeChart) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinVolumeChartReply_VolumeChart.ProtoReflect.Descriptor instead.
func (*DescribeCoinVolumeChartReply_VolumeChart) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{91, 0}
}

func (x *DescribeCoinVolumeChartReply_VolumeChart) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinVolumeChartReply_VolumeChart) GetBuy() float64 {
	if x != nil {
		return x.Buy
	}
	return 0
}

func (x *DescribeCoinVolumeChartReply_VolumeChart) GetSell() float64 {
	if x != nil {
		return x.Sell
	}
	return 0
}

func (x *DescribeCoinVolumeChartReply_VolumeChart) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DescribeCoinSwapStatsReply_SwapStatInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Buy   int32 `protobuf:"varint,2,opt,name=buy,proto3" json:"buy,omitempty"`
	Sell  int32 `protobuf:"varint,3,opt,name=sell,proto3" json:"sell,omitempty"`
}

func (x *DescribeCoinSwapStatsReply_SwapStatInt) Reset() {
	*x = DescribeCoinSwapStatsReply_SwapStatInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSwapStatsReply_SwapStatInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSwapStatsReply_SwapStatInt) ProtoMessage() {}

func (x *DescribeCoinSwapStatsReply_SwapStatInt) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSwapStatsReply_SwapStatInt.ProtoReflect.Descriptor instead.
func (*DescribeCoinSwapStatsReply_SwapStatInt) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{93, 0}
}

func (x *DescribeCoinSwapStatsReply_SwapStatInt) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DescribeCoinSwapStatsReply_SwapStatInt) GetBuy() int32 {
	if x != nil {
		return x.Buy
	}
	return 0
}

func (x *DescribeCoinSwapStatsReply_SwapStatInt) GetSell() int32 {
	if x != nil {
		return x.Sell
	}
	return 0
}

type DescribeCoinSwapStatsReply_SwapStatDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total float64 `protobuf:"fixed64,1,opt,name=total,proto3" json:"total,omitempty"`
	Buy   float64 `protobuf:"fixed64,2,opt,name=buy,proto3" json:"buy,omitempty"`
	Sell  float64 `protobuf:"fixed64,3,opt,name=sell,proto3" json:"sell,omitempty"`
}

func (x *DescribeCoinSwapStatsReply_SwapStatDouble) Reset() {
	*x = DescribeCoinSwapStatsReply_SwapStatDouble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSwapStatsReply_SwapStatDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSwapStatsReply_SwapStatDouble) ProtoMessage() {}

func (x *DescribeCoinSwapStatsReply_SwapStatDouble) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSwapStatsReply_SwapStatDouble.ProtoReflect.Descriptor instead.
func (*DescribeCoinSwapStatsReply_SwapStatDouble) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{93, 1}
}

func (x *DescribeCoinSwapStatsReply_SwapStatDouble) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DescribeCoinSwapStatsReply_SwapStatDouble) GetBuy() float64 {
	if x != nil {
		return x.Buy
	}
	return 0
}

func (x *DescribeCoinSwapStatsReply_SwapStatDouble) GetSell() float64 {
	if x != nil {
		return x.Sell
	}
	return 0
}

type DescribeDeFiCoinsReply_DeFiCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID        string   `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Price         float64  `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	PriceDelta24H float64  `protobuf:"fixed64,3,opt,name=priceDelta24h,proto3" json:"priceDelta24h,omitempty"`
	Liquidity     float64  `protobuf:"fixed64,4,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Volume24H     float64  `protobuf:"fixed64,5,opt,name=volume24h,proto3" json:"volume24h,omitempty"`
	Orders24H     int32    `protobuf:"varint,6,opt,name=orders24h,proto3" json:"orders24h,omitempty"`
	Users24H      int32    `protobuf:"varint,7,opt,name=users24h,proto3" json:"users24h,omitempty"`
	Category      []string `protobuf:"bytes,8,rep,name=category,proto3" json:"category,omitempty"`
	Rank          int32    `protobuf:"varint,9,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) Reset() {
	*x = DescribeDeFiCoinsReply_DeFiCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDeFiCoinsReply_DeFiCoin) ProtoMessage() {}

func (x *DescribeDeFiCoinsReply_DeFiCoin) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDeFiCoinsReply_DeFiCoin.ProtoReflect.Descriptor instead.
func (*DescribeDeFiCoinsReply_DeFiCoin) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{95, 0}
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetPriceDelta24H() float64 {
	if x != nil {
		return x.PriceDelta24H
	}
	return 0
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetVolume24H() float64 {
	if x != nil {
		return x.Volume24H
	}
	return 0
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetOrders24H() int32 {
	if x != nil {
		return x.Orders24H
	}
	return 0
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetUsers24H() int32 {
	if x != nil {
		return x.Users24H
	}
	return 0
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type DescribeTokensReply_Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Name      string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol    string  `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	CoinID    string  `protobuf:"bytes,4,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Address   string  `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Liquidity float64 `protobuf:"fixed64,6,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Chain     string  `protobuf:"bytes,7,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *DescribeTokensReply_Token) Reset() {
	*x = DescribeTokensReply_Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTokensReply_Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTokensReply_Token) ProtoMessage() {}

func (x *DescribeTokensReply_Token) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTokensReply_Token.ProtoReflect.Descriptor instead.
func (*DescribeTokensReply_Token) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{101, 0}
}

func (x *DescribeTokensReply_Token) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeTokensReply_Token) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeTokensReply_Token) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DescribeTokensReply_Token) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeTokensReply_Token) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribeTokensReply_Token) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *DescribeTokensReply_Token) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

type DescribeGuruChainsReply_Chain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain       string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *DescribeGuruChainsReply_Chain) Reset() {
	*x = DescribeGuruChainsReply_Chain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeGuruChainsReply_Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeGuruChainsReply_Chain) ProtoMessage() {}

func (x *DescribeGuruChainsReply_Chain) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeGuruChainsReply_Chain.ProtoReflect.Descriptor instead.
func (*DescribeGuruChainsReply_Chain) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{103, 0}
}

func (x *DescribeGuruChainsReply_Chain) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeGuruChainsReply_Chain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeGuruChainsReply_Chain) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type DescribeCoinsByFieldsReply_Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID string    `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Price  *Currency `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	Icon   string    `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *DescribeCoinsByFieldsReply_Coin) Reset() {
	*x = DescribeCoinsByFieldsReply_Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinsByFieldsReply_Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinsByFieldsReply_Coin) ProtoMessage() {}

func (x *DescribeCoinsByFieldsReply_Coin) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinsByFieldsReply_Coin.ProtoReflect.Descriptor instead.
func (*DescribeCoinsByFieldsReply_Coin) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{107, 0}
}

func (x *DescribeCoinsByFieldsReply_Coin) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinsByFieldsReply_Coin) GetPrice() *Currency {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *DescribeCoinsByFieldsReply_Coin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type DescribeTokensByFieldsReply_Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID  string    `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Address string    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Price   *Currency `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Icon    string    `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *DescribeTokensByFieldsReply_Token) Reset() {
	*x = DescribeTokensByFieldsReply_Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTokensByFieldsReply_Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTokensByFieldsReply_Token) ProtoMessage() {}

func (x *DescribeTokensByFieldsReply_Token) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTokensByFieldsReply_Token.ProtoReflect.Descriptor instead.
func (*DescribeTokensByFieldsReply_Token) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{109, 0}
}

func (x *DescribeTokensByFieldsReply_Token) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeTokensByFieldsReply_Token) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribeTokensByFieldsReply_Token) GetPrice() *Currency {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *DescribeTokensByFieldsReply_Token) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type DescribePriceByCoinAddressReply_Tokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price        *Currency `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	Chain        string    `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Address      string    `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Icon         string    `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	CoinID       string    `protobuf:"bytes,5,opt,name=coinID,proto3" json:"coinID,omitempty"`
	DecimalPlace int32     `protobuf:"varint,6,opt,name=decimalPlace,proto3" json:"decimalPlace,omitempty"`
	Delta24H     float64   `protobuf:"fixed64,7,opt,name=delta24h,proto3" json:"delta24h,omitempty"`
}

func (x *DescribePriceByCoinAddressReply_Tokens) Reset() {
	*x = DescribePriceByCoinAddressReply_Tokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePriceByCoinAddressReply_Tokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePriceByCoinAddressReply_Tokens) ProtoMessage() {}

func (x *DescribePriceByCoinAddressReply_Tokens) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePriceByCoinAddressReply_Tokens.ProtoReflect.Descriptor instead.
func (*DescribePriceByCoinAddressReply_Tokens) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{111, 0}
}

func (x *DescribePriceByCoinAddressReply_Tokens) GetPrice() *Currency {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *DescribePriceByCoinAddressReply_Tokens) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribePriceByCoinAddressReply_Tokens) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribePriceByCoinAddressReply_Tokens) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *DescribePriceByCoinAddressReply_Tokens) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribePriceByCoinAddressReply_Tokens) GetDecimalPlace() int32 {
	if x != nil {
		return x.DecimalPlace
	}
	return 0
}

func (x *DescribePriceByCoinAddressReply_Tokens) GetDelta24H() float64 {
	if x != nil {
		return x.Delta24H
	}
	return 0
}

type DescribePriceByCoinAddressReply_CoinCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price    *Currency `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	Icon     string    `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	CoinID   string    `protobuf:"bytes,3,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Delta24H float64   `protobuf:"fixed64,4,opt,name=delta24h,proto3" json:"delta24h,omitempty"`
}

func (x *DescribePriceByCoinAddressReply_CoinCurrency) Reset() {
	*x = DescribePriceByCoinAddressReply_CoinCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePriceByCoinAddressReply_CoinCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePriceByCoinAddressReply_CoinCurrency) ProtoMessage() {}

func (x *DescribePriceByCoinAddressReply_CoinCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePriceByCoinAddressReply_CoinCurrency.ProtoReflect.Descriptor instead.
func (*DescribePriceByCoinAddressReply_CoinCurrency) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{111, 1}
}

func (x *DescribePriceByCoinAddressReply_CoinCurrency) GetPrice() *Currency {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *DescribePriceByCoinAddressReply_CoinCurrency) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *DescribePriceByCoinAddressReply_CoinCurrency) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribePriceByCoinAddressReply_CoinCurrency) GetDelta24H() float64 {
	if x != nil {
		return x.Delta24H
	}
	return 0
}

type DescribeCoinIDByTokensReply_Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID  string `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Chain   string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *DescribeCoinIDByTokensReply_Coin) Reset() {
	*x = DescribeCoinIDByTokensReply_Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinIDByTokensReply_Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinIDByTokensReply_Coin) ProtoMessage() {}

func (x *DescribeCoinIDByTokensReply_Coin) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinIDByTokensReply_Coin.ProtoReflect.Descriptor instead.
func (*DescribeCoinIDByTokensReply_Coin) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{113, 0}
}

func (x *DescribeCoinIDByTokensReply_Coin) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinIDByTokensReply_Coin) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeCoinIDByTokensReply_Coin) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type DescribeWhiteTokensReply_Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID  string  `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Address string  `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Symbol  string  `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Icon    string  `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Price   float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *DescribeWhiteTokensReply_Coin) Reset() {
	*x = DescribeWhiteTokensReply_Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeWhiteTokensReply_Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeWhiteTokensReply_Coin) ProtoMessage() {}

func (x *DescribeWhiteTokensReply_Coin) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeWhiteTokensReply_Coin.ProtoReflect.Descriptor instead.
func (*DescribeWhiteTokensReply_Coin) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{123, 0}
}

func (x *DescribeWhiteTokensReply_Coin) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeWhiteTokensReply_Coin) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribeWhiteTokensReply_Coin) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DescribeWhiteTokensReply_Coin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *DescribeWhiteTokensReply_Coin) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type CheckCoinsReply_Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID string `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	IsCex  int32  `protobuf:"varint,2,opt,name=isCex,proto3" json:"isCex,omitempty"`
	IsDex  int32  `protobuf:"varint,3,opt,name=isDex,proto3" json:"isDex,omitempty"`
}

func (x *CheckCoinsReply_Coin) Reset() {
	*x = CheckCoinsReply_Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCoinsReply_Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCoinsReply_Coin) ProtoMessage() {}

func (x *CheckCoinsReply_Coin) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCoinsReply_Coin.ProtoReflect.Descriptor instead.
func (*CheckCoinsReply_Coin) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{133, 0}
}

func (x *CheckCoinsReply_Coin) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *CheckCoinsReply_Coin) GetIsCex() int32 {
	if x != nil {
		return x.IsCex
	}
	return 0
}

func (x *CheckCoinsReply_Coin) GetIsDex() int32 {
	if x != nil {
		return x.IsDex
	}
	return 0
}

type DescribePairReply_Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address            string  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Chain              string  `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	DexID              string  `protobuf:"bytes,3,opt,name=dexID,proto3" json:"dexID,omitempty"`
	DexIcon            string  `protobuf:"bytes,4,opt,name=dexIcon,proto3" json:"dexIcon,omitempty"`
	BaseToken          string  `protobuf:"bytes,5,opt,name=baseToken,proto3" json:"baseToken,omitempty"`
	QuoteToken         string  `protobuf:"bytes,6,opt,name=quoteToken,proto3" json:"quoteToken,omitempty"`
	Stat5M             string  `protobuf:"bytes,7,opt,name=stat5m,proto3" json:"stat5m,omitempty"`
	Stat1H             string  `protobuf:"bytes,8,opt,name=stat1h,proto3" json:"stat1h,omitempty"`
	Stat6H             string  `protobuf:"bytes,9,opt,name=stat6h,proto3" json:"stat6h,omitempty"`
	Stat24H            string  `protobuf:"bytes,10,opt,name=stat24h,proto3" json:"stat24h,omitempty"`
	Fdv                float64 `protobuf:"fixed64,11,opt,name=fdv,proto3" json:"fdv,omitempty"`
	Liquidity          float64 `protobuf:"fixed64,12,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Price              float64 `protobuf:"fixed64,13,opt,name=price,proto3" json:"price,omitempty"`
	IsFocus            int32   `protobuf:"varint,14,opt,name=isFocus,proto3" json:"isFocus,omitempty"`
	DexScreenerChain   string  `protobuf:"bytes,15,opt,name=dexScreenerChain,proto3" json:"dexScreenerChain,omitempty"`
	CreatedAt          uint32  `protobuf:"varint,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	PairExplorer       string  `protobuf:"bytes,17,opt,name=pairExplorer,proto3" json:"pairExplorer,omitempty"`
	BaseTokenExplorer  string  `protobuf:"bytes,18,opt,name=baseTokenExplorer,proto3" json:"baseTokenExplorer,omitempty"`
	QuoteTokenExplorer string  `protobuf:"bytes,19,opt,name=quoteTokenExplorer,proto3" json:"quoteTokenExplorer,omitempty"`
	PriceUSD           float64 `protobuf:"fixed64,20,opt,name=priceUSD,proto3" json:"priceUSD,omitempty"`
	PriceNative        float64 `protobuf:"fixed64,21,opt,name=priceNative,proto3" json:"priceNative,omitempty"`
	LiquidityDetail    string  `protobuf:"bytes,22,opt,name=liquidityDetail,proto3" json:"liquidityDetail,omitempty"`
	ChainIcon          string  `protobuf:"bytes,23,opt,name=chainIcon,proto3" json:"chainIcon,omitempty"`
}

func (x *DescribePairReply_Pair) Reset() {
	*x = DescribePairReply_Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairReply_Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairReply_Pair) ProtoMessage() {}

func (x *DescribePairReply_Pair) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairReply_Pair.ProtoReflect.Descriptor instead.
func (*DescribePairReply_Pair) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{143, 0}
}

func (x *DescribePairReply_Pair) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribePairReply_Pair) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribePairReply_Pair) GetDexID() string {
	if x != nil {
		return x.DexID
	}
	return ""
}

func (x *DescribePairReply_Pair) GetDexIcon() string {
	if x != nil {
		return x.DexIcon
	}
	return ""
}

func (x *DescribePairReply_Pair) GetBaseToken() string {
	if x != nil {
		return x.BaseToken
	}
	return ""
}

func (x *DescribePairReply_Pair) GetQuoteToken() string {
	if x != nil {
		return x.QuoteToken
	}
	return ""
}

func (x *DescribePairReply_Pair) GetStat5M() string {
	if x != nil {
		return x.Stat5M
	}
	return ""
}

func (x *DescribePairReply_Pair) GetStat1H() string {
	if x != nil {
		return x.Stat1H
	}
	return ""
}

func (x *DescribePairReply_Pair) GetStat6H() string {
	if x != nil {
		return x.Stat6H
	}
	return ""
}

func (x *DescribePairReply_Pair) GetStat24H() string {
	if x != nil {
		return x.Stat24H
	}
	return ""
}

func (x *DescribePairReply_Pair) GetFdv() float64 {
	if x != nil {
		return x.Fdv
	}
	return 0
}

func (x *DescribePairReply_Pair) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *DescribePairReply_Pair) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DescribePairReply_Pair) GetIsFocus() int32 {
	if x != nil {
		return x.IsFocus
	}
	return 0
}

func (x *DescribePairReply_Pair) GetDexScreenerChain() string {
	if x != nil {
		return x.DexScreenerChain
	}
	return ""
}

func (x *DescribePairReply_Pair) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DescribePairReply_Pair) GetPairExplorer() string {
	if x != nil {
		return x.PairExplorer
	}
	return ""
}

func (x *DescribePairReply_Pair) GetBaseTokenExplorer() string {
	if x != nil {
		return x.BaseTokenExplorer
	}
	return ""
}

func (x *DescribePairReply_Pair) GetQuoteTokenExplorer() string {
	if x != nil {
		return x.QuoteTokenExplorer
	}
	return ""
}

func (x *DescribePairReply_Pair) GetPriceUSD() float64 {
	if x != nil {
		return x.PriceUSD
	}
	return 0
}

func (x *DescribePairReply_Pair) GetPriceNative() float64 {
	if x != nil {
		return x.PriceNative
	}
	return 0
}

func (x *DescribePairReply_Pair) GetLiquidityDetail() string {
	if x != nil {
		return x.LiquidityDetail
	}
	return ""
}

func (x *DescribePairReply_Pair) GetChainIcon() string {
	if x != nil {
		return x.ChainIcon
	}
	return ""
}

type DescribePairTrendsReply_PairTrend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Chain      string  `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	DexIcon    string  `protobuf:"bytes,3,opt,name=dexIcon,proto3" json:"dexIcon,omitempty"`
	BaseToken  string  `protobuf:"bytes,4,opt,name=baseToken,proto3" json:"baseToken,omitempty"`
	QuoteToken string  `protobuf:"bytes,5,opt,name=quoteToken,proto3" json:"quoteToken,omitempty"`
	Price      float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	PriceDelta float64 `protobuf:"fixed64,7,opt,name=priceDelta,proto3" json:"priceDelta,omitempty"`
	DexID      string  `protobuf:"bytes,8,opt,name=dexID,proto3" json:"dexID,omitempty"`
	IsFocus    int32   `protobuf:"varint,9,opt,name=isFocus,proto3" json:"isFocus,omitempty"`
}

func (x *DescribePairTrendsReply_PairTrend) Reset() {
	*x = DescribePairTrendsReply_PairTrend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePairTrendsReply_PairTrend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePairTrendsReply_PairTrend) ProtoMessage() {}

func (x *DescribePairTrendsReply_PairTrend) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePairTrendsReply_PairTrend.ProtoReflect.Descriptor instead.
func (*DescribePairTrendsReply_PairTrend) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{145, 0}
}

func (x *DescribePairTrendsReply_PairTrend) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribePairTrendsReply_PairTrend) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribePairTrendsReply_PairTrend) GetDexIcon() string {
	if x != nil {
		return x.DexIcon
	}
	return ""
}

func (x *DescribePairTrendsReply_PairTrend) GetBaseToken() string {
	if x != nil {
		return x.BaseToken
	}
	return ""
}

func (x *DescribePairTrendsReply_PairTrend) GetQuoteToken() string {
	if x != nil {
		return x.QuoteToken
	}
	return ""
}

func (x *DescribePairTrendsReply_PairTrend) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DescribePairTrendsReply_PairTrend) GetPriceDelta() float64 {
	if x != nil {
		return x.PriceDelta
	}
	return 0
}

func (x *DescribePairTrendsReply_PairTrend) GetDexID() string {
	if x != nil {
		return x.DexID
	}
	return ""
}

func (x *DescribePairTrendsReply_PairTrend) GetIsFocus() int32 {
	if x != nil {
		return x.IsFocus
	}
	return 0
}

type DescribeCoinsByChainReply_Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID       string   `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Address      string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Symbol       string   `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Icon         string   `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Description  string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Homepage     []string `protobuf:"bytes,6,rep,name=homepage,proto3" json:"homepage,omitempty"`
	DecimalPlace int32    `protobuf:"varint,7,opt,name=decimalPlace,proto3" json:"decimalPlace,omitempty"`
	Name         string   `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DescribeCoinsByChainReply_Coin) Reset() {
	*x = DescribeCoinsByChainReply_Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinsByChainReply_Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinsByChainReply_Coin) ProtoMessage() {}

func (x *DescribeCoinsByChainReply_Coin) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinsByChainReply_Coin.ProtoReflect.Descriptor instead.
func (*DescribeCoinsByChainReply_Coin) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{161, 0}
}

func (x *DescribeCoinsByChainReply_Coin) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinsByChainReply_Coin) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribeCoinsByChainReply_Coin) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DescribeCoinsByChainReply_Coin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *DescribeCoinsByChainReply_Coin) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DescribeCoinsByChainReply_Coin) GetHomepage() []string {
	if x != nil {
		return x.Homepage
	}
	return nil
}

func (x *DescribeCoinsByChainReply_Coin) GetDecimalPlace() int32 {
	if x != nil {
		return x.DecimalPlace
	}
	return 0
}

func (x *DescribeCoinsByChainReply_Coin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DescribeTopTokenListReply_TopToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// tokenID is synonymous with coinID
	TokenId string `protobuf:"bytes,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	// position indicates orders of tokens when they are displayed
	Position int64 `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *DescribeTopTokenListReply_TopToken) Reset() {
	*x = DescribeTopTokenListReply_TopToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopTokenListReply_TopToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopTokenListReply_TopToken) ProtoMessage() {}

func (x *DescribeTopTokenListReply_TopToken) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopTokenListReply_TopToken.ProtoReflect.Descriptor instead.
func (*DescribeTopTokenListReply_TopToken) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{165, 0}
}

func (x *DescribeTopTokenListReply_TopToken) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DescribeTopTokenListReply_TopToken) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *DescribeTopTokenListReply_TopToken) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

type DescribeRecommandTokenSectionListReply_RecommandTokenSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// JSON string
	// HTTP Accept-Language 请求头所支持的语言代码到对应名称的映射
	// example: {"en-us": "English", "zh-Hans": "简体中文"}
	Name            string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Position        int64             `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	RecommandTokens []*RecommandToken `protobuf:"bytes,4,rep,name=recommandTokens,proto3" json:"recommandTokens,omitempty"`
}

func (x *DescribeRecommandTokenSectionListReply_RecommandTokenSection) Reset() {
	*x = DescribeRecommandTokenSectionListReply_RecommandTokenSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeRecommandTokenSectionListReply_RecommandTokenSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRecommandTokenSectionListReply_RecommandTokenSection) ProtoMessage() {}

func (x *DescribeRecommandTokenSectionListReply_RecommandTokenSection) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRecommandTokenSectionListReply_RecommandTokenSection.ProtoReflect.Descriptor instead.
func (*DescribeRecommandTokenSectionListReply_RecommandTokenSection) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{174, 0}
}

func (x *DescribeRecommandTokenSectionListReply_RecommandTokenSection) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DescribeRecommandTokenSectionListReply_RecommandTokenSection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeRecommandTokenSectionListReply_RecommandTokenSection) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *DescribeRecommandTokenSectionListReply_RecommandTokenSection) GetRecommandTokens() []*RecommandToken {
	if x != nil {
		return x.RecommandTokens
	}
	return nil
}

type DescribeCollectionCombinesReply_Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Detail string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *DescribeCollectionCombinesReply_Collection) Reset() {
	*x = DescribeCollectionCombinesReply_Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCollectionCombinesReply_Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCollectionCombinesReply_Collection) ProtoMessage() {}

func (x *DescribeCollectionCombinesReply_Collection) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCollectionCombinesReply_Collection.ProtoReflect.Descriptor instead.
func (*DescribeCollectionCombinesReply_Collection) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{188, 0}
}

func (x *DescribeCollectionCombinesReply_Collection) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DescribeCollectionCombinesReply_Collection) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type DescribeTopPairByCoinReply_Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Chain      string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	BaseToken  string `protobuf:"bytes,3,opt,name=baseToken,proto3" json:"baseToken,omitempty"`
	QuoteToken string `protobuf:"bytes,4,opt,name=quoteToken,proto3" json:"quoteToken,omitempty"`
	Stat24H    string `protobuf:"bytes,5,opt,name=stat24h,proto3" json:"stat24h,omitempty"`
}

func (x *DescribeTopPairByCoinReply_Pair) Reset() {
	*x = DescribeTopPairByCoinReply_Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v1_market_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopPairByCoinReply_Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopPairByCoinReply_Pair) ProtoMessage() {}

func (x *DescribeTopPairByCoinReply_Pair) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v1_market_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopPairByCoinReply_Pair.ProtoReflect.Descriptor instead.
func (*DescribeTopPairByCoinReply_Pair) Descriptor() ([]byte, []int) {
	return file_transaction_v1_market_proto_rawDescGZIP(), []int{190, 0}
}

func (x *DescribeTopPairByCoinReply_Pair) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribeTopPairByCoinReply_Pair) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeTopPairByCoinReply_Pair) GetBaseToken() string {
	if x != nil {
		return x.BaseToken
	}
	return ""
}

func (x *DescribeTopPairByCoinReply_Pair) GetQuoteToken() string {
	if x != nil {
		return x.QuoteToken
	}
	return ""
}

func (x *DescribeTopPairByCoinReply_Pair) GetStat24H() string {
	if x != nil {
		return x.Stat24H
	}
	return ""
}

var File_transaction_v1_market_proto protoreflect.FileDescriptor

var file_transaction_v1_market_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x73, 0x0a, 0x19, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x32, 0x34, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x32, 0x34, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x32, 0x34, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x78, 0x6e, 0x32, 0x34, 0x68, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xcd,
	0x01, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x42, 0x69, 0x72, 0x64,
	0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x1e, 0x20, 0x00, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x54, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x54, 0x53, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6e, 0x64, 0x54,
	0x53, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xfd,
	0x04, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x42, 0x69, 0x72, 0x64,
	0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x65, 0x77,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x42, 0x69, 0x72, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54,
	0x42, 0x69, 0x72, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x1a, 0x9d,
	0x04, 0x0a, 0x09, 0x54, 0x42, 0x69, 0x72, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67,
	0x12, 0x48, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x42, 0x69, 0x72, 0x64, 0x4e, 0x65, 0x77, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x42, 0x69, 0x72, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x69,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x65, 0x69, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x65, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x4c, 0x61, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x42, 0x69, 0x72, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x54, 0x42, 0x69, 0x72, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x2e, 0x45, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x73, 0x1a, 0x76, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a,
	0x3d, 0x0a, 0x0f, 0x45, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x5e, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x70, 0x69, 0x6e, 0x22, 0x5e, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x5c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x82,
	0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x70, 0x69, 0x6e, 0x22, 0x5c, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x60, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x1b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x4f, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x53, 0x63, 0x61, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x63,
	0x61, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x69, 0x74, 0x65,
	0x73, 0x1a, 0x34, 0x0a, 0x08, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xe9, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x72, 0x0a, 0x52, 0x03, 0x63, 0x6e, 0x79, 0x52, 0x03, 0x75, 0x73,
	0x64, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0xd2, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x37, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x0e, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0c,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x06, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4b, 0x4c, 0x69, 0x6e, 0x65,
	0x52, 0x06, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0x8d, 0x01, 0x0a, 0x05, 0x4b, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x07,
	0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73,
	0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x5c, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x75, 0x0a,
	0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x22, 0x5f, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf4, 0x04, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e,
	0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x12, 0xfa, 0x42, 0x0f, 0x72, 0x0d, 0x52, 0x00, 0x52, 0x03, 0x61, 0x73, 0x63, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8b,
	0x02, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x32, 0x34, 0x68, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x37, 0x64, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x61, 0x69, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x35, 0x6d, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x61, 0x69, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x31, 0x68, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x61,
	0x69, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x36, 0x68, 0x10, 0x07,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x61, 0x69, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x32, 0x34, 0x68, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61, 0x69, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61,
	0x69, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x32, 0x34, 0x68, 0x10, 0x0a, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x61, 0x69, 0x72, 0x46, 0x64, 0x76, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61,
	0x69, 0x72, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x10, 0x0c, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x61, 0x69, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x0d, 0x22, 0xf5, 0x09, 0x0a,
	0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42,
	0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69,
	0x6e, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x1a, 0x94, 0x05, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x31, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x31, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x32, 0x34, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x32, 0x34, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x37, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x37,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x33, 0x30, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x33, 0x30, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x31, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x31, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x32, 0x34, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x32, 0x34, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x61, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x44, 0x69, 0x6c, 0x75,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x67, 0x68, 0x32,
	0x34, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x68, 0x69, 0x67, 0x68, 0x32, 0x34, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x32, 0x34, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x6c, 0x6f, 0x77, 0x32, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x6c, 0x69,
	0x6e, 0x65, 0x37, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x37, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x1a, 0x84, 0x03,
	0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x78, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x65, 0x78, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x35, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x35, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x31, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x31, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x36, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x36, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x74, 0x32, 0x34, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x74, 0x32, 0x34, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x64, 0x76, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x64, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69,
	0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x7e, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x69, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x69, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73,
	0x22, 0xfa, 0x04, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x78, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x65, 0x78, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x69,
	0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x61,
	0x69, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65,
	0x78, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x78, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x1a, 0x4d,
	0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x53, 0x0a,
	0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44,
	0x65, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44,
	0x65, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x65, 0x78, 0x52, 0x05, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x1a, 0x5d, 0x0a, 0x03, 0x44, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x78,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x22, 0x6e, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x6f, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0xf7, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x6f,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x63,
	0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x1a,
	0x99, 0x01, 0x0a, 0x07, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69,
	0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x17,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x56, 0x32, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48,
	0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x56, 0x32, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x48,
	0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x1a, 0xf3, 0x01,
	0x0a, 0x07, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x32, 0x34, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x32, 0x34, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32,
	0x34, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x32, 0x34, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61,
	0x70, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x37, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x6c, 0x69, 0x6e,
	0x65, 0x37, 0x64, 0x22, 0x57, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xac, 0x01, 0x0a,
	0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x1a, 0x45, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xd7, 0x01, 0x0a, 0x12,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06,
	0x30, 0x01, 0x30, 0x02, 0x30, 0x03, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x09,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x5a, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x52, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xc0, 0x03, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a,
	0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x1a, 0xd9, 0x02, 0x0a,
	0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69,
	0x6e, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xd0, 0x01, 0x0a, 0x06, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x09, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa,
	0x42, 0x08, 0x1a, 0x06, 0x30, 0x01, 0x30, 0x02, 0x30, 0x03, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01,
	0x30, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb8, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63,
	0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x30,
	0x01, 0x30, 0x02, 0x30, 0x03, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x48, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x44, 0x22, 0x5a, 0x0a, 0x10, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x22, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01,
	0x30, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb0, 0x01, 0x0a,
	0x20, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x53, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x09, 0x67, 0x75, 0x69,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x37, 0x0a, 0x05, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0xbe, 0x02, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x12, 0x40, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04,
	0x30, 0x01, 0x30, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x37, 0x0a,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x22, 0x5b, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4d, 0x0a,
	0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x73, 0x22, 0x5b, 0x0a, 0x11,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x97, 0x02, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xe2, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x83, 0x03, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x1a, 0x88, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x22, 0xc0, 0x02, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53,
	0x69, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x78, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x78, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c,
	0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x1b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x70, 0x0a, 0x19,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x61,
	0x0a, 0x17, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x5a, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x61, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xdd, 0x01, 0x0a, 0x1c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63,
	0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x65, 0x73, 0x63, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x7c, 0x0a, 0x1a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x22, 0xd2,
	0x06, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x65, 0x78, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x23,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20, 0x00, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x65, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3f, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x65, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x53,
	0x77, 0x61, 0x70, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6f, 0x62, 0x53, 0x77, 0x61, 0x70, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x1a,
	0x80, 0x01, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x5c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x65, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x32, 0x34, 0x68,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x37, 0x64,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x35, 0x6d, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x31, 0x68, 0x10, 0x0f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0xa1, 0x06, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x65, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a,
	0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x65, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xb0, 0x05, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x31, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x31, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x32, 0x34, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x32, 0x34, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x37, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x37, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x33, 0x30, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x33, 0x30, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x31, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x31, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32,
	0x34, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x32, 0x34, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61,
	0x70, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x67, 0x68, 0x32, 0x34, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x68, 0x69, 0x67, 0x68, 0x32, 0x34, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x6f, 0x77, 0x32, 0x34, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x6f,
	0x77, 0x32, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x6c, 0x69, 0x6e, 0x65,
	0x37, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x6c,
	0x69, 0x6e, 0x65, 0x37, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x31, 0x35, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x31, 0x35, 0x6d, 0x22, 0x91, 0x01, 0x0a, 0x19, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x79, 0x0a, 0x17, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x37,
	0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x9f, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x63,
	0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0xc6, 0x04, 0x0a, 0x1e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x0a,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x52, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x1a, 0x76, 0x0a, 0x0a, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x77, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x22, 0xd4, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0a, 0x76, 0x73, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0a, 0x76, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1e, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x1a, 0x05, 0x18, 0xa6, 0x59, 0x20, 0x00, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe2, 0x03, 0x0a, 0x1b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x06, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x61, 0x70, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x73, 0x12, 0x5b,
	0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0x40, 0x0a, 0x0a, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x3a, 0x0a,
	0x08, 0x43, 0x61, 0x70, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x61, 0x70, 0x1a, 0x43, 0x0a, 0x0b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xd6,
	0x01, 0x0a, 0x1f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x06, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x3b, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x52, 0x0a, 0x21, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x23, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x26,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xf4, 0x03, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc7, 0x05, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x77, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61,
	0x70, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x73, 0x77, 0x61, 0x70, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xc9, 0x04, 0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61,
	0x70, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6d,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6d, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61,
	0x69, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x61, 0x69, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b,
	0x22, 0xb4, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42, 0x0c,
	0x72, 0x0a, 0x52, 0x03, 0x63, 0x6e, 0x79, 0x52, 0x03, 0x75, 0x73, 0x64, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xf4, 0x03, 0x20,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x8f, 0x02, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69,
	0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x26, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xf4, 0x03, 0x20, 0x00, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x87, 0x05, 0x0a, 0x1a, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xf5, 0x03, 0x0a, 0x13,
	0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6d, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x6d, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x31, 0x43, 0x6f, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x31, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x32, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x31, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x31, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x31, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x69, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xa6,
	0x59, 0x20, 0x00, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x1f, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5b, 0x0a,
	0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x1a, 0x44, 0x0a, 0x0e, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x22, 0x79, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x04, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05,
	0x18, 0xa6, 0x59, 0x20, 0x00, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x1a,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x65, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x62,
	0x75, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7a, 0x0a, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xa6, 0x59,
	0x20, 0x00, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x66, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x62, 0x75, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0xa0, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06,
	0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xa6, 0x59, 0x20, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x07, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0x67, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x62, 0x75, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x7e, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53,
	0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0xd3, 0x03, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x09,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x32, 0x34, 0x68, 0x12, 0x53, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x32, 0x34,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x32, 0x34, 0x68, 0x12, 0x51, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x32, 0x34, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x49,
	0x6e, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x73, 0x32, 0x34, 0x68, 0x1a, 0x49, 0x0a, 0x0b,
	0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x62, 0x75, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x1a, 0x4c, 0x0a, 0x0e, 0x53, 0x77, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x62, 0x75,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x73, 0x65, 0x6c, 0x6c, 0x22, 0xcc, 0x04, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x74,
	0x0a, 0x0f, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x32, 0x34, 0x68, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x73, 0x32, 0x34, 0x68, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x32, 0x34, 0x68, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x10, 0x06, 0x22, 0xfb, 0x02, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x44, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05,
	0x63, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x84, 0x02, 0x0a, 0x08,
	0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x32, 0x34, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x32, 0x34, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x32, 0x34, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x32, 0x34, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x73, 0x32,
	0x34, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x73, 0x32,
	0x34, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x22, 0x5a, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73, 0x22, 0x4b,
	0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x63, 0x6f,
	0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x78, 0x0a, 0x12, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x25,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x43, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x63, 0x6f, 0x69,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x15, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1b,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x40, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x1a, 0xb7, 0x01, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x35, 0x0a, 0x19,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x47, 0x75, 0x72, 0x75, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x47, 0x75, 0x72, 0x75, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x44, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x47, 0x75, 0x72, 0x75, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x1a, 0x53, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x19, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x12, 0x21, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x06, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x64, 0x52, 0x07, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x1a, 0x61, 0x0a, 0x04,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22,
	0x81, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x64, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x1a, 0x7c, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x21,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x43,
	0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x63,
	0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42,
	0x08, 0x92, 0x01, 0x05, 0x08, 0x00, 0x10, 0xe8, 0x07, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49,
	0x44, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01,
	0x05, 0x08, 0x00, 0x10, 0xe8, 0x07, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xa1,
	0x04, 0x0a, 0x1f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x79, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05,
	0x63, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x06, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x1a, 0xd3, 0x01, 0x0a, 0x06, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12,
	0x2d, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x32, 0x34, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x32, 0x34, 0x68, 0x1a, 0x85, 0x01, 0x0a, 0x0c, 0x43,
	0x6f, 0x69, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x32,
	0x34, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x32,
	0x34, 0x68, 0x22, 0x75, 0x0a, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0xe8,
	0x07, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x1b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x42, 0x79, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x63, 0x6f, 0x69,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73,
	0x1a, 0x4e, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x2e, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x6e, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x73, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x75, 0x73, 0x64,
	0x22, 0x4a, 0x0a, 0x06, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x05, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x74, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49,
	0x44, 0x12, 0x1f, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x26, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x16, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12,
	0x1f, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x16, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x53, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06,
	0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x16, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0xda, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42,
	0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69,
	0x6e, 0x73, 0x1a, 0x7a, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x93,
	0x02, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x6e, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x72, 0x22, 0x22, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8d, 0x02, 0x0a, 0x12, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x6e, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x6e,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x22, 0x3e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x23, 0x0a, 0x08, 0x74, 0x72, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x74, 0x72, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x74, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1f, 0xfa, 0x42, 0x1c, 0x1a, 0x1a, 0x30, 0x01, 0x30,
	0x02, 0x30, 0x03, 0x30, 0x04, 0x30, 0x05, 0x30, 0x06, 0x30, 0x07, 0x30, 0x08, 0x30, 0x09, 0x30,
	0x0a, 0x30, 0x0b, 0x30, 0x0c, 0x30, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x4f, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x62, 0x0a, 0x1f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x32, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x50, 0x0a, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73, 0x22, 0x98, 0x01, 0x0a,
	0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x39, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x1a, 0x4a, 0x0a, 0x04, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x73, 0x43, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x43, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x73, 0x44, 0x65, 0x78, 0x22, 0x66, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22,
	0xaa, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x69, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x65, 0x78, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x78, 0x49, 0x63, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x78, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x0b, 0x0a, 0x09,
	0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x83, 0x04, 0x0a, 0x14, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xfa, 0x42, 0x0c, 0x72, 0x0a, 0x52, 0x03, 0x75, 0x73, 0x64, 0x52, 0x03, 0x63, 0x6e, 0x79, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x78,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x77, 0xfa, 0x42, 0x74, 0x72, 0x72, 0x52, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x35, 0x6d, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x31, 0x68, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x36, 0x68, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x32, 0x34, 0x68, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x32, 0x34, 0x68, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x32, 0x34,
	0x68, 0x52, 0x03, 0x66, 0x64, 0x76, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xfa, 0x42, 0x0f, 0x72, 0x0d, 0x52, 0x00, 0x52, 0x03,
	0x61, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x55, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x9b, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xfa, 0x42, 0x0c, 0x72, 0x0a, 0x52, 0x03, 0x75, 0x73, 0x64, 0x52, 0x03, 0x63, 0x6e, 0x79,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61,
	0x69, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0xf4, 0x03, 0x52, 0x05, 0x70,
	0x61, 0x69, 0x72, 0x73, 0x22, 0x43, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0xb8, 0x03, 0x0a, 0x04, 0x50, 0x61,
	0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x78, 0x49,
	0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x78, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x35, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x35, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x31, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x31, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x36, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x36, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74,
	0x32, 0x34, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x32,
	0x34, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x64, 0x76, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x66, 0x64, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x46, 0x6f,
	0x63, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x63, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x63, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x72,
	0x0a, 0x52, 0x03, 0x75, 0x73, 0x64, 0x52, 0x03, 0x63, 0x6e, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x89, 0x06,
	0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x1a, 0xb8,
	0x05, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x78, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x78, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x78, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x35, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x35, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x31, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x31, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x36, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x36, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x74, 0x32, 0x34, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x74, 0x32, 0x34, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x64, 0x76, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x64, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x69, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x78, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x65, 0x78, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x69, 0x72, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x69, 0x72, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x55, 0x53, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x55, 0x53, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x19, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x72, 0x0a, 0x52, 0x03, 0x75, 0x73, 0x64, 0x52,
	0x03, 0x63, 0x6e, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xdd, 0x02, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x1a, 0xf9, 0x01, 0x0a, 0x09, 0x50,
	0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x78, 0x49,
	0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x78, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69,
	0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x56, 0x32, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x72, 0x0a, 0x52, 0x03, 0x75, 0x73, 0x64, 0x52,
	0x03, 0x63, 0x6e, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x56, 0x32, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x29, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x64, 0x65,
	0x78, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x97, 0x01,
	0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x72, 0x0a, 0x52,
	0x03, 0x63, 0x6e, 0x79, 0x52, 0x03, 0x75, 0x73, 0x64, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0x27, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0x5c, 0x0a, 0x19,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x32, 0x20, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x17, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x26,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x42, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xf4,
	0x03, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xbd, 0x02,
	0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42,
	0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x63,
	0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73,
	0x1a, 0xda, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d,
	0x65, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d,
	0x65, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a,
	0x1b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x22, 0xa1, 0x05, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x64, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x64, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x3a, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x32, 0x34, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x18, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x32, 0x34, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x21, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x37, 0x64, 0x49, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x21, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x37,
	0x64, 0x49, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x33, 0x30, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x33, 0x30, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x31, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x31,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x52, 0x61, 0x6e, 0x6b,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61,
	0x70, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x1b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x09,
	0x74, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x1a, 0x50, 0x0a,
	0x08, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x70, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x6d, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x80, 0x01, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x70, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x28,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xeb, 0x02, 0x0a, 0x26, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xa0, 0x01,
	0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x22, 0xb7, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x20, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x22, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x20, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x4e, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x3c, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa2,
	0x01, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x32, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x36, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x1a,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x42, 0x79, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0b,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x43, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x22, 0x7c, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61,
	0x69, 0x72, 0x4f, 0x48, 0x4c, 0x43, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4a, 0x0a, 0x1e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x72,
	0x4f, 0x48, 0x4c, 0x43, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x72, 0x0a,
	0x52, 0x03, 0x63, 0x6e, 0x79, 0x52, 0x03, 0x75, 0x73, 0x64, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20, 0x00, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x0b,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a,
	0x38, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x86, 0x01, 0x0a, 0x1c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x50, 0x61, 0x69, 0x72, 0x42, 0x79, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63,
	0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x72, 0x0a, 0x52, 0x03,
	0x63, 0x6e, 0x79, 0x52, 0x03, 0x75, 0x73, 0x64, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x22, 0xf3, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x6f, 0x70, 0x50, 0x61, 0x69, 0x72, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x50, 0x61, 0x69, 0x72,
	0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x1a, 0x8e, 0x01, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x32, 0x34, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x74, 0x32, 0x34, 0x68, 0x2a, 0xb1, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x31, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x31, 0x6d, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x35, 0x6d, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x31, 0x35, 0x6d, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x33, 0x30, 0x6d, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x31, 0x68, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x34, 0x68, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x31, 0x64, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x31, 0x77, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x31, 0x4d, 0x6f, 0x10, 0x09, 0x32, 0xa8, 0x4e, 0x0a,
	0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x60, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x6f, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x64, 0x0a, 0x12, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x56, 0x32, 0x12,
	0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x56, 0x32, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x57, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x57, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x57, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x54,
	0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x0f, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5a, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0b, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x81, 0x01,
	0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x78, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x11, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x73,
	0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x63, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x53, 0x77, 0x61, 0x70, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x2b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x72, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x78, 0x0a, 0x18, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x84, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x60, 0x0a, 0x10,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x65, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x65, 0x78, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x65, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x72,
	0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41,
	0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x7b, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x6c, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6e, 0x75,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a,
	0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6c, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f,
	0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x12,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x0c, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x54, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f,
	0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x72, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x75, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x2d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x7e, 0x0a, 0x1a, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x11, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x69, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0b, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5a, 0x0a,
	0x0e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x12, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x47, 0x75, 0x72, 0x75, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12,
	0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x47, 0x75, 0x72, 0x75, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x47, 0x75, 0x72, 0x75, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x66, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x77, 0x61,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x53, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x15, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x72, 0x0a, 0x16, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x7e,
	0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x79, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f,
	0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x72,
	0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x49, 0x44, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x5d, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x5d, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x43, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x69, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a, 0x0a,
	0x0b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5a, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x5a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a,
	0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x65, 0x78, 0x12, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x57, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x73, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x11, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x54,
	0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6c, 0x0a, 0x14,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x73, 0x56, 0x32, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x73, 0x56, 0x32, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x11, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x69, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x57, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x60, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x69, 0x0a, 0x13, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x78, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x78, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x46, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x65, 0x78, 0x12,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x78, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x54, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x12, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x63, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4b, 0x4c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6c, 0x0a, 0x14, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x69,
	0x74, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x53,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x0f, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x6c, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x42, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x42, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x69, 0x0a,
	0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x42, 0x79, 0x43,
	0x6f, 0x69, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x69, 0x72, 0x42, 0x79, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6c, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6c, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x5a, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x5a, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5a, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x93, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x81,
	0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x81, 0x01, 0x0a, 0x1b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x81, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x15, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x4d, 0x73, 0x67, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x11, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x42, 0x69, 0x72, 0x64, 0x4e, 0x65, 0x77, 0x73,
	0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x42, 0x69, 0x72, 0x64, 0x4e, 0x65,
	0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x42, 0x69, 0x72, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x6c, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x62,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x61, 0x69, 0x72, 0x4f, 0x48, 0x4c, 0x43, 0x56, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x4f, 0x48, 0x4c, 0x43,
	0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x62, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x4f, 0x48, 0x4c, 0x43, 0x56, 0x12, 0x2d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x72,
	0x4f, 0x48, 0x4c, 0x43, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x7e, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x6f, 0x70, 0x50, 0x61, 0x69, 0x72, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x50, 0x61, 0x69, 0x72, 0x42,
	0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x50, 0x61, 0x69, 0x72, 0x42, 0x79, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x2e, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x1b, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transaction_v1_market_proto_rawDescOnce sync.Once
	file_transaction_v1_market_proto_rawDescData = file_transaction_v1_market_proto_rawDesc
)

func file_transaction_v1_market_proto_rawDescGZIP() []byte {
	file_transaction_v1_market_proto_rawDescOnce.Do(func() {
		file_transaction_v1_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_v1_market_proto_rawDescData)
	})
	return file_transaction_v1_market_proto_rawDescData
}

var file_transaction_v1_market_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_transaction_v1_market_proto_msgTypes = make([]protoimpl.MessageInfo, 245)
var file_transaction_v1_market_proto_goTypes = []interface{}{
	(IntervalEnum)(0), // 0: api.market.v1.IntervalEnum
	(DescribeCollectionsRequest_SortFieldEnum)(0),    // 1: api.market.v1.DescribeCollectionsRequest.SortFieldEnum
	(DescribeCexCoinsRequest_SortFieldEnum)(0),       // 2: api.market.v1.DescribeCexCoinsRequest.SortFieldEnum
	(DescribeDeFiCoinsRequest_SortFieldDefine)(0),    // 3: api.market.v1.DescribeDeFiCoinsRequest.SortFieldDefine
	(*DescribeChainSummaryRequest)(nil),              // 4: api.market.v1.DescribeChainSummaryRequest
	(*DescribeChainSummaryReply)(nil),                // 5: api.market.v1.DescribeChainSummaryReply
	(*DescribeTBirdNewsRequest)(nil),                 // 6: api.market.v1.DescribeTBirdNewsRequest
	(*DescribeTBirdNewsReply)(nil),                   // 7: api.market.v1.DescribeTBirdNewsReply
	(*DeletePairTrendRequest)(nil),                   // 8: api.market.v1.DeletePairTrendRequest
	(*DeletePairTrendReply)(nil),                     // 9: api.market.v1.DeletePairTrendReply
	(*ModifyPairTrendRequest)(nil),                   // 10: api.market.v1.ModifyPairTrendRequest
	(*ModifyPairTrendReply)(nil),                     // 11: api.market.v1.ModifyPairTrendReply
	(*CreatePairTrendRequest)(nil),                   // 12: api.market.v1.CreatePairTrendRequest
	(*CreatePairTrendReply)(nil),                     // 13: api.market.v1.CreatePairTrendReply
	(*DeleteHotCoinRequest)(nil),                     // 14: api.market.v1.DeleteHotCoinRequest
	(*DeleteHotCoinReply)(nil),                       // 15: api.market.v1.DeleteHotCoinReply
	(*ModifyHotCoinRequest)(nil),                     // 16: api.market.v1.ModifyHotCoinRequest
	(*ModifyHotCoinReply)(nil),                       // 17: api.market.v1.ModifyHotCoinReply
	(*CreateHotCoinRequest)(nil),                     // 18: api.market.v1.CreateHotCoinRequest
	(*CreateHotCoinReply)(nil),                       // 19: api.market.v1.CreateHotCoinReply
	(*DescribePairScanSiteRequest)(nil),              // 20: api.market.v1.DescribePairScanSiteRequest
	(*DescribePairScanSiteReply)(nil),                // 21: api.market.v1.DescribePairScanSiteReply
	(*DescribePairKLineRequest)(nil),                 // 22: api.market.v1.DescribePairKLineRequest
	(*DescribeCoinKLineRequest)(nil),                 // 23: api.market.v1.DescribeCoinKLineRequest
	(*DescribeCoinKLineReply)(nil),                   // 24: api.market.v1.DescribeCoinKLineReply
	(*AddCollectionRequest)(nil),                     // 25: api.market.v1.AddCollectionRequest
	(*AddCollectionReply)(nil),                       // 26: api.market.v1.AddCollectionReply
	(*RemoveCollectionRequest)(nil),                  // 27: api.market.v1.RemoveCollectionRequest
	(*RemoveCollectionReply)(nil),                    // 28: api.market.v1.RemoveCollectionReply
	(*DescribeCollectionsRequest)(nil),               // 29: api.market.v1.DescribeCollectionsRequest
	(*DescribeCollectionsReply)(nil),                 // 30: api.market.v1.DescribeCollectionsReply
	(*SearchCoinAndPairRequest)(nil),                 // 31: api.market.v1.SearchCoinAndPairRequest
	(*SearchCoinAndPairReply)(nil),                   // 32: api.market.v1.SearchCoinAndPairReply
	(*CoinAndPair)(nil),                              // 33: api.market.v1.CoinAndPair
	(*DescribeDexRequest)(nil),                       // 34: api.market.v1.DescribeDexRequest
	(*DescribeDexReply)(nil),                         // 35: api.market.v1.DescribeDexReply
	(*DescribeHotCoinsRequest)(nil),                  // 36: api.market.v1.DescribeHotCoinsRequest
	(*DescribeHotCoinsReply)(nil),                    // 37: api.market.v1.DescribeHotCoinsReply
	(*DescribeHotCoinsV2Reply)(nil),                  // 38: api.market.v1.DescribeHotCoinsV2Reply
	(*DescribeChainsSupportRequest)(nil),             // 39: api.market.v1.DescribeChainsSupportRequest
	(*DescribeChainsSupportReply)(nil),               // 40: api.market.v1.DescribeChainsSupportReply
	(*ModifyAlertRequest)(nil),                       // 41: api.market.v1.ModifyAlertRequest
	(*ModifyAlertReply)(nil),                         // 42: api.market.v1.ModifyAlertReply
	(*DescribeAlertsRequest)(nil),                    // 43: api.market.v1.DescribeAlertsRequest
	(*DescribeAlertsReply)(nil),                      // 44: api.market.v1.DescribeAlertsReply
	(*CreateAlertRequest)(nil),                       // 45: api.market.v1.CreateAlertRequest
	(*CreateAlertReply)(nil),                         // 46: api.market.v1.CreateAlertReply
	(*RemoveAlertRequest)(nil),                       // 47: api.market.v1.RemoveAlertRequest
	(*RemoveAlertReply)(nil),                         // 48: api.market.v1.RemoveAlertReply
	(*DescribeCollectionGuideListRequest)(nil),       // 49: api.market.v1.DescribeCollectionGuideListRequest
	(*DescribeCollectionGuideListReply)(nil),         // 50: api.market.v1.DescribeCollectionGuideListReply
	(*ModifyColumnRequest)(nil),                      // 51: api.market.v1.ModifyColumnRequest
	(*ModifyColumnReply)(nil),                        // 52: api.market.v1.ModifyColumnReply
	(*RemoveColumnRequest)(nil),                      // 53: api.market.v1.RemoveColumnRequest
	(*RemoveColumnReply)(nil),                        // 54: api.market.v1.RemoveColumnReply
	(*CreateColumnRequest)(nil),                      // 55: api.market.v1.CreateColumnRequest
	(*CreateColumnReply)(nil),                        // 56: api.market.v1.CreateColumnReply
	(*DescribeColumnListRequest)(nil),                // 57: api.market.v1.DescribeColumnListRequest
	(*DescribeColumnListReply)(nil),                  // 58: api.market.v1.DescribeColumnListReply
	(*DescribeAllExtraDetailRequest)(nil),            // 59: api.market.v1.DescribeAllExtraDetailRequest
	(*DescribeAllExtraDetailReply)(nil),              // 60: api.market.v1.DescribeAllExtraDetailReply
	(*DescribeCategoryListRequest)(nil),              // 61: api.market.v1.DescribeCategoryListRequest
	(*DescribeCategoryListReply)(nil),                // 62: api.market.v1.DescribeCategoryListReply
	(*ModifyMenuCategoryRequest)(nil),                // 63: api.market.v1.ModifyMenuCategoryRequest
	(*ModifyMenuCategoryReply)(nil),                  // 64: api.market.v1.ModifyMenuCategoryReply
	(*CreateCoinCategoryRequest)(nil),                // 65: api.market.v1.CreateCoinCategoryRequest
	(*CreateCoinCategoryReply)(nil),                  // 66: api.market.v1.CreateCoinCategoryReply
	(*ModifyCoinDescriptionRequest)(nil),             // 67: api.market.v1.ModifyCoinDescriptionRequest
	(*ModifyCoinDescriptionReply)(nil),               // 68: api.market.v1.ModifyCoinDescriptionReply
	(*DescribeCexCoinsRequest)(nil),                  // 69: api.market.v1.DescribeCexCoinsRequest
	(*DescribeCexCoinsReply)(nil),                    // 70: api.market.v1.DescribeCexCoinsReply
	(*ModifyCoinCategoryRequest)(nil),                // 71: api.market.v1.ModifyCoinCategoryRequest
	(*ModifyCoinCategoryReply)(nil),                  // 72: api.market.v1.ModifyCoinCategoryReply
	(*DescribeMenuCategoryRequest)(nil),              // 73: api.market.v1.DescribeMenuCategoryRequest
	(*DescribeMenuCategoryReply)(nil),                // 74: api.market.v1.DescribeMenuCategoryReply
	(*DescribeMarketExtraDetailRequest)(nil),         // 75: api.market.v1.DescribeMarketExtraDetailRequest
	(*DescribeMarketExtraDetailReply)(nil),           // 76: api.market.v1.DescribeMarketExtraDetailReply
	(*DescribeCoinPriceChartRequest)(nil),            // 77: api.market.v1.DescribeCoinPriceChartRequest
	(*DescribeCoinPriceChartReply)(nil),              // 78: api.market.v1.DescribeCoinPriceChartReply
	(*DescribeCoinPriceByRangeRequest)(nil),          // 79: api.market.v1.DescribeCoinPriceByRangeRequest
	(*DescribeCoinPriceByRangeReply)(nil),            // 80: api.market.v1.DescribeCoinPriceByRangeReply
	(*DescribeCoinPriceByTimestampRequest)(nil),      // 81: api.market.v1.DescribeCoinPriceByTimestampRequest
	(*DescribeCoinPriceByTimestampReply)(nil),        // 82: api.market.v1.DescribeCoinPriceByTimestampReply
	(*DescribeCoinSwapsRequest)(nil),                 // 83: api.market.v1.DescribeCoinSwapsRequest
	(*DescribeCoinSwapsReply)(nil),                   // 84: api.market.v1.DescribeCoinSwapsReply
	(*DescribePairSwapsRequest)(nil),                 // 85: api.market.v1.DescribePairSwapsRequest
	(*DescribeCoinLiquidityRequest)(nil),             // 86: api.market.v1.DescribeCoinLiquidityRequest
	(*DescribeCoinLiquidityReply)(nil),               // 87: api.market.v1.DescribeCoinLiquidityReply
	(*DescribeCoinLiquidityChartRequest)(nil),        // 88: api.market.v1.DescribeCoinLiquidityChartRequest
	(*DescribeCoinLiquidityChartReply)(nil),          // 89: api.market.v1.DescribeCoinLiquidityChartReply
	(*DescribeCoinUserChartRequest)(nil),             // 90: api.market.v1.DescribeCoinUserChartRequest
	(*DescribeCoinUserChartReply)(nil),               // 91: api.market.v1.DescribeCoinUserChartReply
	(*DescribeCoinOrderChartRequest)(nil),            // 92: api.market.v1.DescribeCoinOrderChartRequest
	(*DescribeCoinOrderChartReply)(nil),              // 93: api.market.v1.DescribeCoinOrderChartReply
	(*DescribeCoinVolumeChartRequest)(nil),           // 94: api.market.v1.DescribeCoinVolumeChartRequest
	(*DescribeCoinVolumeChartReply)(nil),             // 95: api.market.v1.DescribeCoinVolumeChartReply
	(*DescribeCoinSwapStatsRequest)(nil),             // 96: api.market.v1.DescribeCoinSwapStatsRequest
	(*DescribeCoinSwapStatsReply)(nil),               // 97: api.market.v1.DescribeCoinSwapStatsReply
	(*DescribeDeFiCoinsRequest)(nil),                 // 98: api.market.v1.DescribeDeFiCoinsRequest
	(*DescribeDeFiCoinsReply)(nil),                   // 99: api.market.v1.DescribeDeFiCoinsReply
	(*DescribeCoinSimplesRequest)(nil),               // 100: api.market.v1.DescribeCoinSimplesRequest
	(*DescribeCoinSimplesReply)(nil),                 // 101: api.market.v1.DescribeCoinSimplesReply
	(*SearchCoinsRequest)(nil),                       // 102: api.market.v1.SearchCoinsRequest
	(*SearchCoinsReply)(nil),                         // 103: api.market.v1.SearchCoinsReply
	(*DescribeTokensRequest)(nil),                    // 104: api.market.v1.DescribeTokensRequest
	(*DescribeTokensReply)(nil),                      // 105: api.market.v1.DescribeTokensReply
	(*DescribeGuruChainsRequest)(nil),                // 106: api.market.v1.DescribeGuruChainsRequest
	(*DescribeGuruChainsReply)(nil),                  // 107: api.market.v1.DescribeGuruChainsReply
	(*DescribeSwapConfigRequest)(nil),                // 108: api.market.v1.DescribeSwapConfigRequest
	(*DescribeSwapConfigReply)(nil),                  // 109: api.market.v1.DescribeSwapConfigReply
	(*DescribeCoinsByFieldsRequest)(nil),             // 110: api.market.v1.DescribeCoinsByFieldsRequest
	(*DescribeCoinsByFieldsReply)(nil),               // 111: api.market.v1.DescribeCoinsByFieldsReply
	(*DescribeTokensByFieldsRequest)(nil),            // 112: api.market.v1.DescribeTokensByFieldsRequest
	(*DescribeTokensByFieldsReply)(nil),              // 113: api.market.v1.DescribeTokensByFieldsReply
	(*DescribePriceByCoinAddressRequest)(nil),        // 114: api.market.v1.DescribePriceByCoinAddressRequest
	(*DescribePriceByCoinAddressReply)(nil),          // 115: api.market.v1.DescribePriceByCoinAddressReply
	(*DescribeCoinIDByTokensRequest)(nil),            // 116: api.market.v1.DescribeCoinIDByTokensRequest
	(*DescribeCoinIDByTokensReply)(nil),              // 117: api.market.v1.DescribeCoinIDByTokensReply
	(*Currency)(nil),                                 // 118: api.market.v1.Currency
	(*Tokens)(nil),                                   // 119: api.market.v1.Tokens
	(*CreateCoinGuideRequest)(nil),                   // 120: api.market.v1.CreateCoinGuideRequest
	(*CreateCoinGuideReply)(nil),                     // 121: api.market.v1.CreateCoinGuideReply
	(*ModifyCoinGuideRequest)(nil),                   // 122: api.market.v1.ModifyCoinGuideRequest
	(*ModifyCoinGuideReply)(nil),                     // 123: api.market.v1.ModifyCoinGuideReply
	(*DeleteCoinGuideRequest)(nil),                   // 124: api.market.v1.DeleteCoinGuideRequest
	(*DeleteCoinGuideReply)(nil),                     // 125: api.market.v1.DeleteCoinGuideReply
	(*DescribeWhiteTokensRequest)(nil),               // 126: api.market.v1.DescribeWhiteTokensRequest
	(*DescribeWhiteTokensReply)(nil),                 // 127: api.market.v1.DescribeWhiteTokensReply
	(*CreateChainRequest)(nil),                       // 128: api.market.v1.CreateChainRequest
	(*CreateChainReply)(nil),                         // 129: api.market.v1.CreateChainReply
	(*ModifyChainRequest)(nil),                       // 130: api.market.v1.ModifyChainRequest
	(*DeleteChainRequest)(nil),                       // 131: api.market.v1.DeleteChainRequest
	(*CreateChainRelationRequest)(nil),               // 132: api.market.v1.CreateChainRelationRequest
	(*DeleteChainRelationRequest)(nil),               // 133: api.market.v1.DeleteChainRelationRequest
	(*DescribeCollectionGuidesRequest)(nil),          // 134: api.market.v1.DescribeCollectionGuidesRequest
	(*DescribeCollectionGuidesReply)(nil),            // 135: api.market.v1.DescribeCollectionGuidesReply
	(*CheckCoinsRequest)(nil),                        // 136: api.market.v1.CheckCoinsRequest
	(*CheckCoinsReply)(nil),                          // 137: api.market.v1.CheckCoinsReply
	(*CoinSimple)(nil),                               // 138: api.market.v1.CoinSimple
	(*PairSimple)(nil),                               // 139: api.market.v1.PairSimple
	(*NoneReply)(nil),                                // 140: api.market.v1.NoneReply
	(*DescribePairsRequest)(nil),                     // 141: api.market.v1.DescribePairsRequest
	(*DescribePairsReply)(nil),                       // 142: api.market.v1.DescribePairsReply
	(*DescribePairBatchRequest)(nil),                 // 143: api.market.v1.DescribePairBatchRequest
	(*DescribePairBatchReply)(nil),                   // 144: api.market.v1.DescribePairBatchReply
	(*Pair)(nil),                                     // 145: api.market.v1.Pair
	(*DescribePairRequest)(nil),                      // 146: api.market.v1.DescribePairRequest
	(*DescribePairReply)(nil),                        // 147: api.market.v1.DescribePairReply
	(*DescribePairTrendsRequest)(nil),                // 148: api.market.v1.DescribePairTrendsRequest
	(*DescribePairTrendsReply)(nil),                  // 149: api.market.v1.DescribePairTrendsReply
	(*DescribePairTrendsV2Request)(nil),              // 150: api.market.v1.DescribePairTrendsV2Request
	(*DescribePairTrendsV2Reply)(nil),                // 151: api.market.v1.DescribePairTrendsV2Reply
	(*CreateDexRequest)(nil),                         // 152: api.market.v1.CreateDexRequest
	(*CreateDexReply)(nil),                           // 153: api.market.v1.CreateDexReply
	(*ModifyDexRequest)(nil),                         // 154: api.market.v1.ModifyDexRequest
	(*DeleteDexRequest)(nil),                         // 155: api.market.v1.DeleteDexRequest
	(*DescribeRateRequest)(nil),                      // 156: api.market.v1.DescribeRateRequest
	(*DescribeRateReply)(nil),                        // 157: api.market.v1.DescribeRateReply
	(*DescribePairGuidesRequest)(nil),                // 158: api.market.v1.DescribePairGuidesRequest
	(*DescribePairGuidesReply)(nil),                  // 159: api.market.v1.DescribePairGuidesReply
	(*CreatePairGuideRequest)(nil),                   // 160: api.market.v1.CreatePairGuideRequest
	(*CreatePairGuideReply)(nil),                     // 161: api.market.v1.CreatePairGuideReply
	(*ModifyPairGuideRequest)(nil),                   // 162: api.market.v1.ModifyPairGuideRequest
	(*DeletePairGuideRequest)(nil),                   // 163: api.market.v1.DeletePairGuideRequest
	(*DescribeCoinsByChainRequest)(nil),              // 164: api.market.v1.DescribeCoinsByChainRequest
	(*DescribeCoinsByChainReply)(nil),                // 165: api.market.v1.DescribeCoinsByChainReply
	(*DescribeCoinInfoByIDRequest)(nil),              // 166: api.market.v1.DescribeCoinInfoByIDRequest
	(*DescribeCoinInfoByIDReply)(nil),                // 167: api.market.v1.DescribeCoinInfoByIDReply
	(*DescribeTopTokenListRequest)(nil),              // 168: api.market.v1.DescribeTopTokenListRequest
	(*DescribeTopTokenListReply)(nil),                // 169: api.market.v1.DescribeTopTokenListReply
	(*CreateTopTokenRequest)(nil),                    // 170: api.market.v1.CreateTopTokenRequest
	(*CreateTopTokenReply)(nil),                      // 171: api.market.v1.CreateTopTokenReply
	(*ModifyTopTokenRequest)(nil),                    // 172: api.market.v1.ModifyTopTokenRequest
	(*ModifyTopTokenReply)(nil),                      // 173: api.market.v1.ModifyTopTokenReply
	(*DeleteTopTokenRequest)(nil),                    // 174: api.market.v1.DeleteTopTokenRequest
	(*DeleteTopTokenReply)(nil),                      // 175: api.market.v1.DeleteTopTokenReply
	(*RecommandToken)(nil),                           // 176: api.market.v1.RecommandToken
	(*DescribeRecommandTokenSectionListRequest)(nil), // 177: api.market.v1.DescribeRecommandTokenSectionListRequest
	(*DescribeRecommandTokenSectionListReply)(nil),   // 178: api.market.v1.DescribeRecommandTokenSectionListReply
	(*CreateRecommandTokenSectionRequest)(nil),       // 179: api.market.v1.CreateRecommandTokenSectionRequest
	(*CreateRecommandTokenSectionReply)(nil),         // 180: api.market.v1.CreateRecommandTokenSectionReply
	(*ModifyRecommandTokenSectionRequest)(nil),       // 181: api.market.v1.ModifyRecommandTokenSectionRequest
	(*ModifyRecommandTokenSectionReply)(nil),         // 182: api.market.v1.ModifyRecommandTokenSectionReply
	(*DeleteRecommandTokenSectionRequest)(nil),       // 183: api.market.v1.DeleteRecommandTokenSectionRequest
	(*DeleteRecommandTokenSectionReply)(nil),         // 184: api.market.v1.DeleteRecommandTokenSectionReply
	(*DescribePriceDeltaMsgRequest)(nil),             // 185: api.market.v1.DescribePriceDeltaMsgRequest
	(*DescribePriceDeltaMsgReply)(nil),               // 186: api.market.v1.DescribePriceDeltaMsgReply
	(*DescribePairByCoinsRequest)(nil),               // 187: api.market.v1.DescribePairByCoinsRequest
	(*DescribePairByCoinsReply)(nil),                 // 188: api.market.v1.DescribePairByCoinsReply
	(*CreateTerminalPairOHLCVRequest)(nil),           // 189: api.market.v1.CreateTerminalPairOHLCVRequest
	(*DeleteTerminalPairOHLCVRequest)(nil),           // 190: api.market.v1.DeleteTerminalPairOHLCVRequest
	(*DescribeCollectionCombinesRequest)(nil),        // 191: api.market.v1.DescribeCollectionCombinesRequest
	(*DescribeCollectionCombinesReply)(nil),          // 192: api.market.v1.DescribeCollectionCombinesReply
	(*DescribeTopPairByCoinRequest)(nil),             // 193: api.market.v1.DescribeTopPairByCoinRequest
	(*DescribeTopPairByCoinReply)(nil),               // 194: api.market.v1.DescribeTopPairByCoinReply
	(*DescribeTBirdNewsReply_TBirdNews)(nil),         // 195: api.market.v1.DescribeTBirdNewsReply.TBirdNews
	(*DescribeTBirdNewsReply_TBirdNews_Info)(nil),    // 196: api.market.v1.DescribeTBirdNewsReply.TBirdNews.Info
	nil, // 197: api.market.v1.DescribeTBirdNewsReply.TBirdNews.EiNameLansEntry
	(*DescribePairScanSiteReply_ScanSite)(nil),     // 198: api.market.v1.DescribePairScanSiteReply.ScanSite
	(*DescribeCoinKLineReply_KLine)(nil),           // 199: api.market.v1.DescribeCoinKLineReply.KLine
	(*DescribeCollectionsReply_Coin)(nil),          // 200: api.market.v1.DescribeCollectionsReply.Coin
	(*DescribeCollectionsReply_Pair)(nil),          // 201: api.market.v1.DescribeCollectionsReply.Pair
	(*CoinAndPair_Token)(nil),                      // 202: api.market.v1.CoinAndPair.Token
	(*DescribeDexReply_Dex)(nil),                   // 203: api.market.v1.DescribeDexReply.Dex
	(*DescribeHotCoinsReply_HotCoin)(nil),          // 204: api.market.v1.DescribeHotCoinsReply.HotCoin
	(*DescribeHotCoinsV2Reply_HotCoin)(nil),        // 205: api.market.v1.DescribeHotCoinsV2Reply.HotCoin
	(*DescribeChainsSupportReply_Chain)(nil),       // 206: api.market.v1.DescribeChainsSupportReply.Chain
	(*DescribeAlertsReply_CoinAlerts)(nil),         // 207: api.market.v1.DescribeAlertsReply.CoinAlerts
	(*DescribeAlertsReply_CoinAlerts_Alerts)(nil),  // 208: api.market.v1.DescribeAlertsReply.CoinAlerts.Alerts
	(*DescribeCollectionGuideListReply_Guide)(nil), // 209: api.market.v1.DescribeCollectionGuideListReply.Guide
	nil,                                    // 210: api.market.v1.ModifyColumnRequest.NameEntry
	nil,                                    // 211: api.market.v1.CreateColumnRequest.NameEntry
	(*DescribeColumnListReply_Column)(nil), // 212: api.market.v1.DescribeColumnListReply.Column
	nil,                                    // 213: api.market.v1.DescribeColumnListReply.Column.NameEntry
	nil,                                    // 214: api.market.v1.DescribeAllExtraDetailReply.DescEntry
	nil,                                    // 215: api.market.v1.ModifyCoinDescriptionRequest.DescEntry
	(*DescribeCexCoinsRequest_Sort)(nil),   // 216: api.market.v1.DescribeCexCoinsRequest.Sort
	(*DescribeCexCoinsReply_Coin)(nil),     // 217: api.market.v1.DescribeCexCoinsReply.Coin
	(*DescribeMarketExtraDetailReply_ChainAddress)(nil),                  // 218: api.market.v1.DescribeMarketExtraDetailReply.ChainAddress
	(*DescribeMarketExtraDetailReply_SocialLink)(nil),                    // 219: api.market.v1.DescribeMarketExtraDetailReply.SocialLink
	(*DescribeCoinPriceChartReply_PriceChart)(nil),                       // 220: api.market.v1.DescribeCoinPriceChartReply.PriceChart
	(*DescribeCoinPriceChartReply_CapChart)(nil),                         // 221: api.market.v1.DescribeCoinPriceChartReply.CapChart
	(*DescribeCoinPriceChartReply_VolumeChart)(nil),                      // 222: api.market.v1.DescribeCoinPriceChartReply.VolumeChart
	(*DescribeCoinPriceByRangeReply_Price)(nil),                          // 223: api.market.v1.DescribeCoinPriceByRangeReply.Price
	(*DescribeCoinSwapsReply_CoinSwapsDetail)(nil),                       // 224: api.market.v1.DescribeCoinSwapsReply.CoinSwapsDetail
	(*DescribeCoinLiquidityReply_CoinLiquidityDetail)(nil),               // 225: api.market.v1.DescribeCoinLiquidityReply.CoinLiquidityDetail
	(*DescribeCoinLiquidityChartReply_LiquidityChart)(nil),               // 226: api.market.v1.DescribeCoinLiquidityChartReply.LiquidityChart
	(*DescribeCoinUserChartReply_UserChart)(nil),                         // 227: api.market.v1.DescribeCoinUserChartReply.UserChart
	(*DescribeCoinOrderChartReply_OrderChart)(nil),                       // 228: api.market.v1.DescribeCoinOrderChartReply.OrderChart
	(*DescribeCoinVolumeChartReply_VolumeChart)(nil),                     // 229: api.market.v1.DescribeCoinVolumeChartReply.VolumeChart
	(*DescribeCoinSwapStatsReply_SwapStatInt)(nil),                       // 230: api.market.v1.DescribeCoinSwapStatsReply.SwapStatInt
	(*DescribeCoinSwapStatsReply_SwapStatDouble)(nil),                    // 231: api.market.v1.DescribeCoinSwapStatsReply.SwapStatDouble
	(*DescribeDeFiCoinsReply_DeFiCoin)(nil),                              // 232: api.market.v1.DescribeDeFiCoinsReply.DeFiCoin
	(*DescribeTokensReply_Token)(nil),                                    // 233: api.market.v1.DescribeTokensReply.Token
	(*DescribeGuruChainsReply_Chain)(nil),                                // 234: api.market.v1.DescribeGuruChainsReply.Chain
	(*DescribeCoinsByFieldsReply_Coin)(nil),                              // 235: api.market.v1.DescribeCoinsByFieldsReply.Coin
	(*DescribeTokensByFieldsReply_Token)(nil),                            // 236: api.market.v1.DescribeTokensByFieldsReply.Token
	(*DescribePriceByCoinAddressReply_Tokens)(nil),                       // 237: api.market.v1.DescribePriceByCoinAddressReply.Tokens
	(*DescribePriceByCoinAddressReply_CoinCurrency)(nil),                 // 238: api.market.v1.DescribePriceByCoinAddressReply.CoinCurrency
	(*DescribeCoinIDByTokensReply_Coin)(nil),                             // 239: api.market.v1.DescribeCoinIDByTokensReply.Coin
	(*DescribeWhiteTokensReply_Coin)(nil),                                // 240: api.market.v1.DescribeWhiteTokensReply.Coin
	(*CheckCoinsReply_Coin)(nil),                                         // 241: api.market.v1.CheckCoinsReply.Coin
	(*DescribePairReply_Pair)(nil),                                       // 242: api.market.v1.DescribePairReply.Pair
	(*DescribePairTrendsReply_PairTrend)(nil),                            // 243: api.market.v1.DescribePairTrendsReply.PairTrend
	(*DescribeCoinsByChainReply_Coin)(nil),                               // 244: api.market.v1.DescribeCoinsByChainReply.Coin
	(*DescribeTopTokenListReply_TopToken)(nil),                           // 245: api.market.v1.DescribeTopTokenListReply.TopToken
	(*DescribeRecommandTokenSectionListReply_RecommandTokenSection)(nil), // 246: api.market.v1.DescribeRecommandTokenSectionListReply.RecommandTokenSection
	(*DescribeCollectionCombinesReply_Collection)(nil),                   // 247: api.market.v1.DescribeCollectionCombinesReply.Collection
	(*DescribeTopPairByCoinReply_Pair)(nil),                              // 248: api.market.v1.DescribeTopPairByCoinReply.Pair
}
var file_transaction_v1_market_proto_depIdxs = []int32{
	195, // 0: api.market.v1.DescribeTBirdNewsReply.news:type_name -> api.market.v1.DescribeTBirdNewsReply.TBirdNews
	198, // 1: api.market.v1.DescribePairScanSiteReply.scanSites:type_name -> api.market.v1.DescribePairScanSiteReply.ScanSite
	0,   // 2: api.market.v1.DescribePairKLineRequest.interval:type_name -> api.market.v1.IntervalEnum
	0,   // 3: api.market.v1.DescribeCoinKLineRequest.interval:type_name -> api.market.v1.IntervalEnum
	199, // 4: api.market.v1.DescribeCoinKLineReply.klines:type_name -> api.market.v1.DescribeCoinKLineReply.KLine
	1,   // 5: api.market.v1.DescribeCollectionsRequest.sortField:type_name -> api.market.v1.DescribeCollectionsRequest.SortFieldEnum
	200, // 6: api.market.v1.DescribeCollectionsReply.coins:type_name -> api.market.v1.DescribeCollectionsReply.Coin
	201, // 7: api.market.v1.DescribeCollectionsReply.pairs:type_name -> api.market.v1.DescribeCollectionsReply.Pair
	33,  // 8: api.market.v1.SearchCoinAndPairReply.coins:type_name -> api.market.v1.CoinAndPair
	202, // 9: api.market.v1.CoinAndPair.baseToken:type_name -> api.market.v1.CoinAndPair.Token
	202, // 10: api.market.v1.CoinAndPair.quoteToken:type_name -> api.market.v1.CoinAndPair.Token
	203, // 11: api.market.v1.DescribeDexReply.dexes:type_name -> api.market.v1.DescribeDexReply.Dex
	204, // 12: api.market.v1.DescribeHotCoinsReply.coins:type_name -> api.market.v1.DescribeHotCoinsReply.HotCoin
	205, // 13: api.market.v1.DescribeHotCoinsV2Reply.coins:type_name -> api.market.v1.DescribeHotCoinsV2Reply.HotCoin
	206, // 14: api.market.v1.DescribeChainsSupportReply.chains:type_name -> api.market.v1.DescribeChainsSupportReply.Chain
	207, // 15: api.market.v1.DescribeAlertsReply.coinAlerts:type_name -> api.market.v1.DescribeAlertsReply.CoinAlerts
	209, // 16: api.market.v1.DescribeCollectionGuideListReply.guideList:type_name -> api.market.v1.DescribeCollectionGuideListReply.Guide
	210, // 17: api.market.v1.ModifyColumnRequest.name:type_name -> api.market.v1.ModifyColumnRequest.NameEntry
	211, // 18: api.market.v1.CreateColumnRequest.name:type_name -> api.market.v1.CreateColumnRequest.NameEntry
	212, // 19: api.market.v1.DescribeColumnListReply.columns:type_name -> api.market.v1.DescribeColumnListReply.Column
	214, // 20: api.market.v1.DescribeAllExtraDetailReply.desc:type_name -> api.market.v1.DescribeAllExtraDetailReply.DescEntry
	215, // 21: api.market.v1.ModifyCoinDescriptionRequest.desc:type_name -> api.market.v1.ModifyCoinDescriptionRequest.DescEntry
	2,   // 22: api.market.v1.DescribeCexCoinsRequest.sortField:type_name -> api.market.v1.DescribeCexCoinsRequest.SortFieldEnum
	216, // 23: api.market.v1.DescribeCexCoinsRequest.sort:type_name -> api.market.v1.DescribeCexCoinsRequest.Sort
	217, // 24: api.market.v1.DescribeCexCoinsReply.coins:type_name -> api.market.v1.DescribeCexCoinsReply.Coin
	218, // 25: api.market.v1.DescribeMarketExtraDetailReply.chainAddress:type_name -> api.market.v1.DescribeMarketExtraDetailReply.ChainAddress
	219, // 26: api.market.v1.DescribeMarketExtraDetailReply.socialLink:type_name -> api.market.v1.DescribeMarketExtraDetailReply.SocialLink
	220, // 27: api.market.v1.DescribeCoinPriceChartReply.prices:type_name -> api.market.v1.DescribeCoinPriceChartReply.PriceChart
	221, // 28: api.market.v1.DescribeCoinPriceChartReply.market_caps:type_name -> api.market.v1.DescribeCoinPriceChartReply.CapChart
	222, // 29: api.market.v1.DescribeCoinPriceChartReply.total_volumes:type_name -> api.market.v1.DescribeCoinPriceChartReply.VolumeChart
	223, // 30: api.market.v1.DescribeCoinPriceByRangeReply.prices:type_name -> api.market.v1.DescribeCoinPriceByRangeReply.Price
	118, // 31: api.market.v1.DescribeCoinPriceByTimestampReply.price:type_name -> api.market.v1.Currency
	224, // 32: api.market.v1.DescribeCoinSwapsReply.swaps:type_name -> api.market.v1.DescribeCoinSwapsReply.CoinSwapsDetail
	225, // 33: api.market.v1.DescribeCoinLiquidityReply.liquidity:type_name -> api.market.v1.DescribeCoinLiquidityReply.CoinLiquidityDetail
	226, // 34: api.market.v1.DescribeCoinLiquidityChartReply.liquidity:type_name -> api.market.v1.DescribeCoinLiquidityChartReply.LiquidityChart
	227, // 35: api.market.v1.DescribeCoinUserChartReply.users:type_name -> api.market.v1.DescribeCoinUserChartReply.UserChart
	228, // 36: api.market.v1.DescribeCoinOrderChartReply.orders:type_name -> api.market.v1.DescribeCoinOrderChartReply.OrderChart
	229, // 37: api.market.v1.DescribeCoinVolumeChartReply.volumes:type_name -> api.market.v1.DescribeCoinVolumeChartReply.VolumeChart
	231, // 38: api.market.v1.DescribeCoinSwapStatsReply.volume24h:type_name -> api.market.v1.DescribeCoinSwapStatsReply.SwapStatDouble
	230, // 39: api.market.v1.DescribeCoinSwapStatsReply.orders24h:type_name -> api.market.v1.DescribeCoinSwapStatsReply.SwapStatInt
	230, // 40: api.market.v1.DescribeCoinSwapStatsReply.users24h:type_name -> api.market.v1.DescribeCoinSwapStatsReply.SwapStatInt
	3,   // 41: api.market.v1.DescribeDeFiCoinsRequest.sortField:type_name -> api.market.v1.DescribeDeFiCoinsRequest.SortFieldDefine
	232, // 42: api.market.v1.DescribeDeFiCoinsReply.coins:type_name -> api.market.v1.DescribeDeFiCoinsReply.DeFiCoin
	138, // 43: api.market.v1.DescribeCoinSimplesReply.coins:type_name -> api.market.v1.CoinSimple
	138, // 44: api.market.v1.SearchCoinsReply.coins:type_name -> api.market.v1.CoinSimple
	233, // 45: api.market.v1.DescribeTokensReply.tokens:type_name -> api.market.v1.DescribeTokensReply.Token
	234, // 46: api.market.v1.DescribeGuruChainsReply.chains:type_name -> api.market.v1.DescribeGuruChainsReply.Chain
	235, // 47: api.market.v1.DescribeCoinsByFieldsReply.coins:type_name -> api.market.v1.DescribeCoinsByFieldsReply.Coin
	236, // 48: api.market.v1.DescribeTokensByFieldsReply.tokens:type_name -> api.market.v1.DescribeTokensByFieldsReply.Token
	119, // 49: api.market.v1.DescribePriceByCoinAddressRequest.tokens:type_name -> api.market.v1.Tokens
	238, // 50: api.market.v1.DescribePriceByCoinAddressReply.coins:type_name -> api.market.v1.DescribePriceByCoinAddressReply.CoinCurrency
	237, // 51: api.market.v1.DescribePriceByCoinAddressReply.tokens:type_name -> api.market.v1.DescribePriceByCoinAddressReply.Tokens
	119, // 52: api.market.v1.DescribeCoinIDByTokensRequest.tokens:type_name -> api.market.v1.Tokens
	239, // 53: api.market.v1.DescribeCoinIDByTokensReply.coins:type_name -> api.market.v1.DescribeCoinIDByTokensReply.Coin
	240, // 54: api.market.v1.DescribeWhiteTokensReply.coins:type_name -> api.market.v1.DescribeWhiteTokensReply.Coin
	138, // 55: api.market.v1.DescribeCollectionGuidesReply.coins:type_name -> api.market.v1.CoinSimple
	241, // 56: api.market.v1.CheckCoinsReply.coins:type_name -> api.market.v1.CheckCoinsReply.Coin
	145, // 57: api.market.v1.DescribePairsReply.pairs:type_name -> api.market.v1.Pair
	119, // 58: api.market.v1.DescribePairBatchRequest.pairs:type_name -> api.market.v1.Tokens
	145, // 59: api.market.v1.DescribePairBatchReply.pairs:type_name -> api.market.v1.Pair
	242, // 60: api.market.v1.DescribePairReply.pair:type_name -> api.market.v1.DescribePairReply.Pair
	243, // 61: api.market.v1.DescribePairTrendsReply.pairs:type_name -> api.market.v1.DescribePairTrendsReply.PairTrend
	145, // 62: api.market.v1.DescribePairTrendsV2Reply.pairs:type_name -> api.market.v1.Pair
	139, // 63: api.market.v1.DescribePairGuidesReply.pairs:type_name -> api.market.v1.PairSimple
	244, // 64: api.market.v1.DescribeCoinsByChainReply.coins:type_name -> api.market.v1.DescribeCoinsByChainReply.Coin
	245, // 65: api.market.v1.DescribeTopTokenListReply.topTokens:type_name -> api.market.v1.DescribeTopTokenListReply.TopToken
	246, // 66: api.market.v1.DescribeRecommandTokenSectionListReply.recommandTokenSections:type_name -> api.market.v1.DescribeRecommandTokenSectionListReply.RecommandTokenSection
	176, // 67: api.market.v1.CreateRecommandTokenSectionRequest.recommandTokens:type_name -> api.market.v1.RecommandToken
	176, // 68: api.market.v1.ModifyRecommandTokenSectionRequest.recommandTokens:type_name -> api.market.v1.RecommandToken
	145, // 69: api.market.v1.DescribePairByCoinsReply.pair:type_name -> api.market.v1.Pair
	247, // 70: api.market.v1.DescribeCollectionCombinesReply.collections:type_name -> api.market.v1.DescribeCollectionCombinesReply.Collection
	248, // 71: api.market.v1.DescribeTopPairByCoinReply.pairs:type_name -> api.market.v1.DescribeTopPairByCoinReply.Pair
	196, // 72: api.market.v1.DescribeTBirdNewsReply.TBirdNews.info:type_name -> api.market.v1.DescribeTBirdNewsReply.TBirdNews.Info
	197, // 73: api.market.v1.DescribeTBirdNewsReply.TBirdNews.eiNameLans:type_name -> api.market.v1.DescribeTBirdNewsReply.TBirdNews.EiNameLansEntry
	208, // 74: api.market.v1.DescribeAlertsReply.CoinAlerts.alerts:type_name -> api.market.v1.DescribeAlertsReply.CoinAlerts.Alerts
	213, // 75: api.market.v1.DescribeColumnListReply.Column.name:type_name -> api.market.v1.DescribeColumnListReply.Column.NameEntry
	2,   // 76: api.market.v1.DescribeCexCoinsRequest.Sort.sortField:type_name -> api.market.v1.DescribeCexCoinsRequest.SortFieldEnum
	118, // 77: api.market.v1.DescribeCoinsByFieldsReply.Coin.price:type_name -> api.market.v1.Currency
	118, // 78: api.market.v1.DescribeTokensByFieldsReply.Token.price:type_name -> api.market.v1.Currency
	118, // 79: api.market.v1.DescribePriceByCoinAddressReply.Tokens.price:type_name -> api.market.v1.Currency
	118, // 80: api.market.v1.DescribePriceByCoinAddressReply.CoinCurrency.price:type_name -> api.market.v1.Currency
	176, // 81: api.market.v1.DescribeRecommandTokenSectionListReply.RecommandTokenSection.recommandTokens:type_name -> api.market.v1.RecommandToken
	36,  // 82: api.market.v1.Market.DescribeHotCoins:input_type -> api.market.v1.DescribeHotCoinsRequest
	36,  // 83: api.market.v1.Market.DescribeHotCoinsV2:input_type -> api.market.v1.DescribeHotCoinsRequest
	18,  // 84: api.market.v1.Market.CreateHotCoin:input_type -> api.market.v1.CreateHotCoinRequest
	14,  // 85: api.market.v1.Market.DeleteHotCoin:input_type -> api.market.v1.DeleteHotCoinRequest
	16,  // 86: api.market.v1.Market.ModifyHotCoin:input_type -> api.market.v1.ModifyHotCoinRequest
	12,  // 87: api.market.v1.Market.CreatePairTrend:input_type -> api.market.v1.CreatePairTrendRequest
	10,  // 88: api.market.v1.Market.ModifyPairTrend:input_type -> api.market.v1.ModifyPairTrendRequest
	8,   // 89: api.market.v1.Market.DeletePairTrend:input_type -> api.market.v1.DeletePairTrendRequest
	39,  // 90: api.market.v1.Market.DescribeChainsSupport:input_type -> api.market.v1.DescribeChainsSupportRequest
	43,  // 91: api.market.v1.Market.DescribeAlerts:input_type -> api.market.v1.DescribeAlertsRequest
	45,  // 92: api.market.v1.Market.CreateAlert:input_type -> api.market.v1.CreateAlertRequest
	41,  // 93: api.market.v1.Market.ModifyAlert:input_type -> api.market.v1.ModifyAlertRequest
	47,  // 94: api.market.v1.Market.RemoveAlert:input_type -> api.market.v1.RemoveAlertRequest
	49,  // 95: api.market.v1.Market.DescribeCollectionGuideList:input_type -> api.market.v1.DescribeCollectionGuideListRequest
	134, // 96: api.market.v1.Market.DescribeCollectionGuides:input_type -> api.market.v1.DescribeCollectionGuidesRequest
	83,  // 97: api.market.v1.Market.DescribeCoinSwaps:input_type -> api.market.v1.DescribeCoinSwapsRequest
	85,  // 98: api.market.v1.Market.DescribePairSwaps:input_type -> api.market.v1.DescribePairSwapsRequest
	86,  // 99: api.market.v1.Market.DescribeCoinLiquidity:input_type -> api.market.v1.DescribeCoinLiquidityRequest
	96,  // 100: api.market.v1.Market.DescribeCoinSwapStats:input_type -> api.market.v1.DescribeCoinSwapStatsRequest
	77,  // 101: api.market.v1.Market.DescribeCoinPriceChart:input_type -> api.market.v1.DescribeCoinPriceChartRequest
	79,  // 102: api.market.v1.Market.DescribeCoinPriceByRange:input_type -> api.market.v1.DescribeCoinPriceByRangeRequest
	81,  // 103: api.market.v1.Market.DescribeCoinPriceByTimestamp:input_type -> api.market.v1.DescribeCoinPriceByTimestampRequest
	69,  // 104: api.market.v1.Market.DescribeCexCoins:input_type -> api.market.v1.DescribeCexCoinsRequest
	59,  // 105: api.market.v1.Market.DescribeAllExtraDetail:input_type -> api.market.v1.DescribeAllExtraDetailRequest
	75,  // 106: api.market.v1.Market.DescribeMarketExtraDetail:input_type -> api.market.v1.DescribeMarketExtraDetailRequest
	73,  // 107: api.market.v1.Market.DescribeMenuCategory:input_type -> api.market.v1.DescribeMenuCategoryRequest
	63,  // 108: api.market.v1.Market.ModifyMenuCategory:input_type -> api.market.v1.ModifyMenuCategoryRequest
	61,  // 109: api.market.v1.Market.DescribeCategoryList:input_type -> api.market.v1.DescribeCategoryListRequest
	67,  // 110: api.market.v1.Market.ModifyCoinDescription:input_type -> api.market.v1.ModifyCoinDescriptionRequest
	71,  // 111: api.market.v1.Market.ModifyCoinCategory:input_type -> api.market.v1.ModifyCoinCategoryRequest
	57,  // 112: api.market.v1.Market.DescribeColumnList:input_type -> api.market.v1.DescribeColumnListRequest
	55,  // 113: api.market.v1.Market.CreateColumn:input_type -> api.market.v1.CreateColumnRequest
	53,  // 114: api.market.v1.Market.RemoveColumn:input_type -> api.market.v1.RemoveColumnRequest
	51,  // 115: api.market.v1.Market.ModifyColumn:input_type -> api.market.v1.ModifyColumnRequest
	65,  // 116: api.market.v1.Market.CreateCoinCategory:input_type -> api.market.v1.CreateCoinCategoryRequest
	90,  // 117: api.market.v1.Market.DescribeCoinUserChart:input_type -> api.market.v1.DescribeCoinUserChartRequest
	92,  // 118: api.market.v1.Market.DescribeCoinOrderChart:input_type -> api.market.v1.DescribeCoinOrderChartRequest
	94,  // 119: api.market.v1.Market.DescribeCoinVolumeChart:input_type -> api.market.v1.DescribeCoinVolumeChartRequest
	88,  // 120: api.market.v1.Market.DescribeCoinLiquidityChart:input_type -> api.market.v1.DescribeCoinLiquidityChartRequest
	98,  // 121: api.market.v1.Market.DescribeDeFiCoins:input_type -> api.market.v1.DescribeDeFiCoinsRequest
	100, // 122: api.market.v1.Market.DescribeCoinSimples:input_type -> api.market.v1.DescribeCoinSimplesRequest
	102, // 123: api.market.v1.Market.SearchCoins:input_type -> api.market.v1.SearchCoinsRequest
	104, // 124: api.market.v1.Market.DescribeTokens:input_type -> api.market.v1.DescribeTokensRequest
	106, // 125: api.market.v1.Market.DescribeGuruChains:input_type -> api.market.v1.DescribeGuruChainsRequest
	108, // 126: api.market.v1.Market.DescribeSwapConfig:input_type -> api.market.v1.DescribeSwapConfigRequest
	110, // 127: api.market.v1.Market.DescribeCoinsByFields:input_type -> api.market.v1.DescribeCoinsByFieldsRequest
	112, // 128: api.market.v1.Market.DescribeTokensByFields:input_type -> api.market.v1.DescribeTokensByFieldsRequest
	114, // 129: api.market.v1.Market.DescribePriceByCoinAddress:input_type -> api.market.v1.DescribePriceByCoinAddressRequest
	116, // 130: api.market.v1.Market.DescribeCoinIDByTokens:input_type -> api.market.v1.DescribeCoinIDByTokensRequest
	120, // 131: api.market.v1.Market.CreateCoinGuide:input_type -> api.market.v1.CreateCoinGuideRequest
	124, // 132: api.market.v1.Market.DeleteCoinGuide:input_type -> api.market.v1.DeleteCoinGuideRequest
	122, // 133: api.market.v1.Market.ModifyCoinGuide:input_type -> api.market.v1.ModifyCoinGuideRequest
	126, // 134: api.market.v1.Market.DescribeWhiteTokens:input_type -> api.market.v1.DescribeWhiteTokensRequest
	128, // 135: api.market.v1.Market.CreateChain:input_type -> api.market.v1.CreateChainRequest
	130, // 136: api.market.v1.Market.ModifyChain:input_type -> api.market.v1.ModifyChainRequest
	131, // 137: api.market.v1.Market.DeleteChain:input_type -> api.market.v1.DeleteChainRequest
	132, // 138: api.market.v1.Market.CreateChainRelation:input_type -> api.market.v1.CreateChainRelationRequest
	133, // 139: api.market.v1.Market.DeleteChainRelation:input_type -> api.market.v1.DeleteChainRelationRequest
	136, // 140: api.market.v1.Market.CheckCoins:input_type -> api.market.v1.CheckCoinsRequest
	34,  // 141: api.market.v1.Market.DescribeDex:input_type -> api.market.v1.DescribeDexRequest
	141, // 142: api.market.v1.Market.DescribePairs:input_type -> api.market.v1.DescribePairsRequest
	143, // 143: api.market.v1.Market.DescribePairBatch:input_type -> api.market.v1.DescribePairBatchRequest
	146, // 144: api.market.v1.Market.DescribePair:input_type -> api.market.v1.DescribePairRequest
	148, // 145: api.market.v1.Market.DescribePairTrends:input_type -> api.market.v1.DescribePairTrendsRequest
	150, // 146: api.market.v1.Market.DescribePairTrendsV2:input_type -> api.market.v1.DescribePairTrendsV2Request
	31,  // 147: api.market.v1.Market.SearchCoinAndPair:input_type -> api.market.v1.SearchCoinAndPairRequest
	25,  // 148: api.market.v1.Market.AddCollection:input_type -> api.market.v1.AddCollectionRequest
	27,  // 149: api.market.v1.Market.RemoveCollection:input_type -> api.market.v1.RemoveCollectionRequest
	29,  // 150: api.market.v1.Market.DescribeCollections:input_type -> api.market.v1.DescribeCollectionsRequest
	152, // 151: api.market.v1.Market.CreateDex:input_type -> api.market.v1.CreateDexRequest
	154, // 152: api.market.v1.Market.ModifyDex:input_type -> api.market.v1.ModifyDexRequest
	155, // 153: api.market.v1.Market.DeleteDex:input_type -> api.market.v1.DeleteDexRequest
	156, // 154: api.market.v1.Market.DescribeRate:input_type -> api.market.v1.DescribeRateRequest
	158, // 155: api.market.v1.Market.DescribePairGuides:input_type -> api.market.v1.DescribePairGuidesRequest
	23,  // 156: api.market.v1.Market.DescribeCoinKLine:input_type -> api.market.v1.DescribeCoinKLineRequest
	22,  // 157: api.market.v1.Market.DescribePairKLine:input_type -> api.market.v1.DescribePairKLineRequest
	20,  // 158: api.market.v1.Market.DescribePairScanSite:input_type -> api.market.v1.DescribePairScanSiteRequest
	160, // 159: api.market.v1.Market.CreatePairGuide:input_type -> api.market.v1.CreatePairGuideRequest
	163, // 160: api.market.v1.Market.DeletePairGuide:input_type -> api.market.v1.DeletePairGuideRequest
	162, // 161: api.market.v1.Market.ModifyPairGuide:input_type -> api.market.v1.ModifyPairGuideRequest
	164, // 162: api.market.v1.Market.DescribeCoinsByChain:input_type -> api.market.v1.DescribeCoinsByChainRequest
	187, // 163: api.market.v1.Market.DescribePairByCoins:input_type -> api.market.v1.DescribePairByCoinsRequest
	166, // 164: api.market.v1.Market.DescribeCoinInfoByID:input_type -> api.market.v1.DescribeCoinInfoByIDRequest
	168, // 165: api.market.v1.Market.DescribeTopTokenList:input_type -> api.market.v1.DescribeTopTokenListRequest
	170, // 166: api.market.v1.Market.CreateTopToken:input_type -> api.market.v1.CreateTopTokenRequest
	172, // 167: api.market.v1.Market.ModifyTopToken:input_type -> api.market.v1.ModifyTopTokenRequest
	174, // 168: api.market.v1.Market.DeleteTopToken:input_type -> api.market.v1.DeleteTopTokenRequest
	177, // 169: api.market.v1.Market.DescribeRecommandTokenSectionList:input_type -> api.market.v1.DescribeRecommandTokenSectionListRequest
	179, // 170: api.market.v1.Market.CreateRecommandTokenSection:input_type -> api.market.v1.CreateRecommandTokenSectionRequest
	181, // 171: api.market.v1.Market.ModifyRecommandTokenSection:input_type -> api.market.v1.ModifyRecommandTokenSectionRequest
	183, // 172: api.market.v1.Market.DeleteRecommandTokenSection:input_type -> api.market.v1.DeleteRecommandTokenSectionRequest
	185, // 173: api.market.v1.Market.DescribePriceDeltaMsg:input_type -> api.market.v1.DescribePriceDeltaMsgRequest
	6,   // 174: api.market.v1.Market.DescribeTBirdNews:input_type -> api.market.v1.DescribeTBirdNewsRequest
	4,   // 175: api.market.v1.Market.DescribeChainSummary:input_type -> api.market.v1.DescribeChainSummaryRequest
	189, // 176: api.market.v1.Market.CreateTerminalPairOHLCV:input_type -> api.market.v1.CreateTerminalPairOHLCVRequest
	190, // 177: api.market.v1.Market.DeleteTerminalPairOHLCV:input_type -> api.market.v1.DeleteTerminalPairOHLCVRequest
	191, // 178: api.market.v1.Market.DescribeCollectionCombines:input_type -> api.market.v1.DescribeCollectionCombinesRequest
	193, // 179: api.market.v1.Market.DescribeTopPairByCoin:input_type -> api.market.v1.DescribeTopPairByCoinRequest
	37,  // 180: api.market.v1.Market.DescribeHotCoins:output_type -> api.market.v1.DescribeHotCoinsReply
	38,  // 181: api.market.v1.Market.DescribeHotCoinsV2:output_type -> api.market.v1.DescribeHotCoinsV2Reply
	19,  // 182: api.market.v1.Market.CreateHotCoin:output_type -> api.market.v1.CreateHotCoinReply
	15,  // 183: api.market.v1.Market.DeleteHotCoin:output_type -> api.market.v1.DeleteHotCoinReply
	17,  // 184: api.market.v1.Market.ModifyHotCoin:output_type -> api.market.v1.ModifyHotCoinReply
	13,  // 185: api.market.v1.Market.CreatePairTrend:output_type -> api.market.v1.CreatePairTrendReply
	11,  // 186: api.market.v1.Market.ModifyPairTrend:output_type -> api.market.v1.ModifyPairTrendReply
	9,   // 187: api.market.v1.Market.DeletePairTrend:output_type -> api.market.v1.DeletePairTrendReply
	40,  // 188: api.market.v1.Market.DescribeChainsSupport:output_type -> api.market.v1.DescribeChainsSupportReply
	44,  // 189: api.market.v1.Market.DescribeAlerts:output_type -> api.market.v1.DescribeAlertsReply
	46,  // 190: api.market.v1.Market.CreateAlert:output_type -> api.market.v1.CreateAlertReply
	42,  // 191: api.market.v1.Market.ModifyAlert:output_type -> api.market.v1.ModifyAlertReply
	48,  // 192: api.market.v1.Market.RemoveAlert:output_type -> api.market.v1.RemoveAlertReply
	50,  // 193: api.market.v1.Market.DescribeCollectionGuideList:output_type -> api.market.v1.DescribeCollectionGuideListReply
	135, // 194: api.market.v1.Market.DescribeCollectionGuides:output_type -> api.market.v1.DescribeCollectionGuidesReply
	84,  // 195: api.market.v1.Market.DescribeCoinSwaps:output_type -> api.market.v1.DescribeCoinSwapsReply
	84,  // 196: api.market.v1.Market.DescribePairSwaps:output_type -> api.market.v1.DescribeCoinSwapsReply
	87,  // 197: api.market.v1.Market.DescribeCoinLiquidity:output_type -> api.market.v1.DescribeCoinLiquidityReply
	97,  // 198: api.market.v1.Market.DescribeCoinSwapStats:output_type -> api.market.v1.DescribeCoinSwapStatsReply
	78,  // 199: api.market.v1.Market.DescribeCoinPriceChart:output_type -> api.market.v1.DescribeCoinPriceChartReply
	80,  // 200: api.market.v1.Market.DescribeCoinPriceByRange:output_type -> api.market.v1.DescribeCoinPriceByRangeReply
	82,  // 201: api.market.v1.Market.DescribeCoinPriceByTimestamp:output_type -> api.market.v1.DescribeCoinPriceByTimestampReply
	70,  // 202: api.market.v1.Market.DescribeCexCoins:output_type -> api.market.v1.DescribeCexCoinsReply
	60,  // 203: api.market.v1.Market.DescribeAllExtraDetail:output_type -> api.market.v1.DescribeAllExtraDetailReply
	76,  // 204: api.market.v1.Market.DescribeMarketExtraDetail:output_type -> api.market.v1.DescribeMarketExtraDetailReply
	74,  // 205: api.market.v1.Market.DescribeMenuCategory:output_type -> api.market.v1.DescribeMenuCategoryReply
	64,  // 206: api.market.v1.Market.ModifyMenuCategory:output_type -> api.market.v1.ModifyMenuCategoryReply
	62,  // 207: api.market.v1.Market.DescribeCategoryList:output_type -> api.market.v1.DescribeCategoryListReply
	68,  // 208: api.market.v1.Market.ModifyCoinDescription:output_type -> api.market.v1.ModifyCoinDescriptionReply
	72,  // 209: api.market.v1.Market.ModifyCoinCategory:output_type -> api.market.v1.ModifyCoinCategoryReply
	58,  // 210: api.market.v1.Market.DescribeColumnList:output_type -> api.market.v1.DescribeColumnListReply
	56,  // 211: api.market.v1.Market.CreateColumn:output_type -> api.market.v1.CreateColumnReply
	54,  // 212: api.market.v1.Market.RemoveColumn:output_type -> api.market.v1.RemoveColumnReply
	52,  // 213: api.market.v1.Market.ModifyColumn:output_type -> api.market.v1.ModifyColumnReply
	66,  // 214: api.market.v1.Market.CreateCoinCategory:output_type -> api.market.v1.CreateCoinCategoryReply
	91,  // 215: api.market.v1.Market.DescribeCoinUserChart:output_type -> api.market.v1.DescribeCoinUserChartReply
	93,  // 216: api.market.v1.Market.DescribeCoinOrderChart:output_type -> api.market.v1.DescribeCoinOrderChartReply
	95,  // 217: api.market.v1.Market.DescribeCoinVolumeChart:output_type -> api.market.v1.DescribeCoinVolumeChartReply
	89,  // 218: api.market.v1.Market.DescribeCoinLiquidityChart:output_type -> api.market.v1.DescribeCoinLiquidityChartReply
	99,  // 219: api.market.v1.Market.DescribeDeFiCoins:output_type -> api.market.v1.DescribeDeFiCoinsReply
	101, // 220: api.market.v1.Market.DescribeCoinSimples:output_type -> api.market.v1.DescribeCoinSimplesReply
	103, // 221: api.market.v1.Market.SearchCoins:output_type -> api.market.v1.SearchCoinsReply
	105, // 222: api.market.v1.Market.DescribeTokens:output_type -> api.market.v1.DescribeTokensReply
	107, // 223: api.market.v1.Market.DescribeGuruChains:output_type -> api.market.v1.DescribeGuruChainsReply
	109, // 224: api.market.v1.Market.DescribeSwapConfig:output_type -> api.market.v1.DescribeSwapConfigReply
	111, // 225: api.market.v1.Market.DescribeCoinsByFields:output_type -> api.market.v1.DescribeCoinsByFieldsReply
	113, // 226: api.market.v1.Market.DescribeTokensByFields:output_type -> api.market.v1.DescribeTokensByFieldsReply
	115, // 227: api.market.v1.Market.DescribePriceByCoinAddress:output_type -> api.market.v1.DescribePriceByCoinAddressReply
	117, // 228: api.market.v1.Market.DescribeCoinIDByTokens:output_type -> api.market.v1.DescribeCoinIDByTokensReply
	121, // 229: api.market.v1.Market.CreateCoinGuide:output_type -> api.market.v1.CreateCoinGuideReply
	125, // 230: api.market.v1.Market.DeleteCoinGuide:output_type -> api.market.v1.DeleteCoinGuideReply
	123, // 231: api.market.v1.Market.ModifyCoinGuide:output_type -> api.market.v1.ModifyCoinGuideReply
	127, // 232: api.market.v1.Market.DescribeWhiteTokens:output_type -> api.market.v1.DescribeWhiteTokensReply
	129, // 233: api.market.v1.Market.CreateChain:output_type -> api.market.v1.CreateChainReply
	140, // 234: api.market.v1.Market.ModifyChain:output_type -> api.market.v1.NoneReply
	140, // 235: api.market.v1.Market.DeleteChain:output_type -> api.market.v1.NoneReply
	140, // 236: api.market.v1.Market.CreateChainRelation:output_type -> api.market.v1.NoneReply
	140, // 237: api.market.v1.Market.DeleteChainRelation:output_type -> api.market.v1.NoneReply
	137, // 238: api.market.v1.Market.CheckCoins:output_type -> api.market.v1.CheckCoinsReply
	35,  // 239: api.market.v1.Market.DescribeDex:output_type -> api.market.v1.DescribeDexReply
	142, // 240: api.market.v1.Market.DescribePairs:output_type -> api.market.v1.DescribePairsReply
	144, // 241: api.market.v1.Market.DescribePairBatch:output_type -> api.market.v1.DescribePairBatchReply
	147, // 242: api.market.v1.Market.DescribePair:output_type -> api.market.v1.DescribePairReply
	149, // 243: api.market.v1.Market.DescribePairTrends:output_type -> api.market.v1.DescribePairTrendsReply
	151, // 244: api.market.v1.Market.DescribePairTrendsV2:output_type -> api.market.v1.DescribePairTrendsV2Reply
	32,  // 245: api.market.v1.Market.SearchCoinAndPair:output_type -> api.market.v1.SearchCoinAndPairReply
	26,  // 246: api.market.v1.Market.AddCollection:output_type -> api.market.v1.AddCollectionReply
	28,  // 247: api.market.v1.Market.RemoveCollection:output_type -> api.market.v1.RemoveCollectionReply
	30,  // 248: api.market.v1.Market.DescribeCollections:output_type -> api.market.v1.DescribeCollectionsReply
	153, // 249: api.market.v1.Market.CreateDex:output_type -> api.market.v1.CreateDexReply
	140, // 250: api.market.v1.Market.ModifyDex:output_type -> api.market.v1.NoneReply
	140, // 251: api.market.v1.Market.DeleteDex:output_type -> api.market.v1.NoneReply
	157, // 252: api.market.v1.Market.DescribeRate:output_type -> api.market.v1.DescribeRateReply
	159, // 253: api.market.v1.Market.DescribePairGuides:output_type -> api.market.v1.DescribePairGuidesReply
	24,  // 254: api.market.v1.Market.DescribeCoinKLine:output_type -> api.market.v1.DescribeCoinKLineReply
	24,  // 255: api.market.v1.Market.DescribePairKLine:output_type -> api.market.v1.DescribeCoinKLineReply
	21,  // 256: api.market.v1.Market.DescribePairScanSite:output_type -> api.market.v1.DescribePairScanSiteReply
	161, // 257: api.market.v1.Market.CreatePairGuide:output_type -> api.market.v1.CreatePairGuideReply
	140, // 258: api.market.v1.Market.DeletePairGuide:output_type -> api.market.v1.NoneReply
	140, // 259: api.market.v1.Market.ModifyPairGuide:output_type -> api.market.v1.NoneReply
	165, // 260: api.market.v1.Market.DescribeCoinsByChain:output_type -> api.market.v1.DescribeCoinsByChainReply
	188, // 261: api.market.v1.Market.DescribePairByCoins:output_type -> api.market.v1.DescribePairByCoinsReply
	167, // 262: api.market.v1.Market.DescribeCoinInfoByID:output_type -> api.market.v1.DescribeCoinInfoByIDReply
	169, // 263: api.market.v1.Market.DescribeTopTokenList:output_type -> api.market.v1.DescribeTopTokenListReply
	171, // 264: api.market.v1.Market.CreateTopToken:output_type -> api.market.v1.CreateTopTokenReply
	173, // 265: api.market.v1.Market.ModifyTopToken:output_type -> api.market.v1.ModifyTopTokenReply
	175, // 266: api.market.v1.Market.DeleteTopToken:output_type -> api.market.v1.DeleteTopTokenReply
	178, // 267: api.market.v1.Market.DescribeRecommandTokenSectionList:output_type -> api.market.v1.DescribeRecommandTokenSectionListReply
	180, // 268: api.market.v1.Market.CreateRecommandTokenSection:output_type -> api.market.v1.CreateRecommandTokenSectionReply
	182, // 269: api.market.v1.Market.ModifyRecommandTokenSection:output_type -> api.market.v1.ModifyRecommandTokenSectionReply
	184, // 270: api.market.v1.Market.DeleteRecommandTokenSection:output_type -> api.market.v1.DeleteRecommandTokenSectionReply
	186, // 271: api.market.v1.Market.DescribePriceDeltaMsg:output_type -> api.market.v1.DescribePriceDeltaMsgReply
	7,   // 272: api.market.v1.Market.DescribeTBirdNews:output_type -> api.market.v1.DescribeTBirdNewsReply
	5,   // 273: api.market.v1.Market.DescribeChainSummary:output_type -> api.market.v1.DescribeChainSummaryReply
	140, // 274: api.market.v1.Market.CreateTerminalPairOHLCV:output_type -> api.market.v1.NoneReply
	140, // 275: api.market.v1.Market.DeleteTerminalPairOHLCV:output_type -> api.market.v1.NoneReply
	192, // 276: api.market.v1.Market.DescribeCollectionCombines:output_type -> api.market.v1.DescribeCollectionCombinesReply
	194, // 277: api.market.v1.Market.DescribeTopPairByCoin:output_type -> api.market.v1.DescribeTopPairByCoinReply
	180, // [180:278] is the sub-list for method output_type
	82,  // [82:180] is the sub-list for method input_type
	82,  // [82:82] is the sub-list for extension type_name
	82,  // [82:82] is the sub-list for extension extendee
	0,   // [0:82] is the sub-list for field type_name
}

func init() { file_transaction_v1_market_proto_init() }
func file_transaction_v1_market_proto_init() {
	if File_transaction_v1_market_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transaction_v1_market_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeChainSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeChainSummaryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTBirdNewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTBirdNewsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePairTrendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePairTrendReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPairTrendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPairTrendReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePairTrendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePairTrendReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHotCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHotCoinReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyHotCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyHotCoinReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHotCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHotCoinReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairScanSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairScanSiteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairKLineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinKLineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinKLineReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCollectionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCollectionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCollectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCollectionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCoinAndPairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCoinAndPairReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinAndPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDexReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeHotCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeHotCoinsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeHotCoinsV2Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeChainsSupportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeChainsSupportReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyAlertReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAlertsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAlertsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAlertReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAlertReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCollectionGuideListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCollectionGuideListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyColumnReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveColumnReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateColumnReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeColumnListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeColumnListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAllExtraDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAllExtraDetailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCategoryListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCategoryListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyMenuCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyMenuCategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinCategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCoinDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCoinDescriptionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCexCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCexCoinsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCoinCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCoinCategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMenuCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMenuCategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMarketExtraDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMarketExtraDetailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinPriceChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinPriceChartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinPriceByRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinPriceByRangeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinPriceByTimestampRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinPriceByTimestampReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSwapsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSwapsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairSwapsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinLiquidityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinLiquidityReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinLiquidityChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinLiquidityChartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinUserChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinUserChartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinOrderChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinOrderChartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinVolumeChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinVolumeChartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSwapStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSwapStatsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDeFiCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDeFiCoinsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSimplesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSimplesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCoinsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTokensReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeGuruChainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeGuruChainsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeSwapConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeSwapConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinsByFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinsByFieldsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTokensByFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTokensByFieldsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePriceByCoinAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePriceByCoinAddressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinIDByTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinIDByTokensReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinGuideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinGuideReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCoinGuideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCoinGuideReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoinGuideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoinGuideReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeWhiteTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeWhiteTokensReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChainReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChainRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChainRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCollectionGuidesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCollectionGuidesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCoinsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinSimple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PairSimple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoneReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairBatchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairTrendsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairTrendsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairTrendsV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairTrendsV2Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDexReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyDexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeRateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairGuidesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairGuidesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePairGuideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePairGuideReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPairGuideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePairGuideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinsByChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinsByChainReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinInfoByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinInfoByIDReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopTokenListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopTokenListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyTopTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyTopTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommandToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeRecommandTokenSectionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeRecommandTokenSectionListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRecommandTokenSectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRecommandTokenSectionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyRecommandTokenSectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyRecommandTokenSectionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecommandTokenSectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecommandTokenSectionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePriceDeltaMsgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePriceDeltaMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairByCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairByCoinsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTerminalPairOHLCVRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTerminalPairOHLCVRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCollectionCombinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCollectionCombinesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopPairByCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopPairByCoinReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTBirdNewsReply_TBirdNews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTBirdNewsReply_TBirdNews_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairScanSiteReply_ScanSite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinKLineReply_KLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCollectionsReply_Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCollectionsReply_Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinAndPair_Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDexReply_Dex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeHotCoinsReply_HotCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeHotCoinsV2Reply_HotCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeChainsSupportReply_Chain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAlertsReply_CoinAlerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAlertsReply_CoinAlerts_Alerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCollectionGuideListReply_Guide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeColumnListReply_Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCexCoinsRequest_Sort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCexCoinsReply_Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMarketExtraDetailReply_ChainAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMarketExtraDetailReply_SocialLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinPriceChartReply_PriceChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinPriceChartReply_CapChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinPriceChartReply_VolumeChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinPriceByRangeReply_Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSwapsReply_CoinSwapsDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinLiquidityReply_CoinLiquidityDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinLiquidityChartReply_LiquidityChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinUserChartReply_UserChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinOrderChartReply_OrderChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinVolumeChartReply_VolumeChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSwapStatsReply_SwapStatInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSwapStatsReply_SwapStatDouble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDeFiCoinsReply_DeFiCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTokensReply_Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeGuruChainsReply_Chain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinsByFieldsReply_Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTokensByFieldsReply_Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePriceByCoinAddressReply_Tokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePriceByCoinAddressReply_CoinCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinIDByTokensReply_Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeWhiteTokensReply_Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCoinsReply_Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairReply_Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePairTrendsReply_PairTrend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinsByChainReply_Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopTokenListReply_TopToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeRecommandTokenSectionListReply_RecommandTokenSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCollectionCombinesReply_Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v1_market_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopPairByCoinReply_Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_transaction_v1_market_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_transaction_v1_market_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_transaction_v1_market_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_transaction_v1_market_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_transaction_v1_market_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_transaction_v1_market_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_transaction_v1_market_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_transaction_v1_market_proto_msgTypes[65].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_v1_market_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   245,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transaction_v1_market_proto_goTypes,
		DependencyIndexes: file_transaction_v1_market_proto_depIdxs,
		EnumInfos:         file_transaction_v1_market_proto_enumTypes,
		MessageInfos:      file_transaction_v1_market_proto_msgTypes,
	}.Build()
	File_transaction_v1_market_proto = out.File
	file_transaction_v1_market_proto_rawDesc = nil
	file_transaction_v1_market_proto_goTypes = nil
	file_transaction_v1_market_proto_depIdxs = nil
}
