syntax = "proto3";
package kratos.api;

option go_package = "block-crawling/internal/conf;conf";

import "google/protobuf/duration.proto";

message Bootstrap {
  Server server = 1;
  Data data = 2;
  App app = 3;
  AddressServer addressServer = 4;
  Lark lark = 5;
  Logger logger = 6;
  Transaction transaction = 7;
  map<string, PlatInfo>  innerNodeList = 8;
  map<string, PlatInfo>  innerPublicNodeList = 9;
  map<string, PlatInfo>  platform = 10;
  map<string, PlatInfo>  platformTest = 11;
  map<string, string> eventLogWhiteList = 12;
}

message Server {
  message HTTP {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  message GRPC {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  HTTP http = 1;
  GRPC grpc = 2;
}

message Data {
  message Pool {
    int32 connMaxLifetime = 1;
    int32 maxOpenConns = 2;
    int32 maxIdleConns = 3;
  }
  message Database {
    string driver = 1;
    string source = 2;
    Pool pool = 3;
  }
  message Redis {
    string address = 1;
    int32 db = 2;
    string password = 3;
    google.protobuf.Duration read_timeout = 4;
    google.protobuf.Duration write_timeout = 5;
  }
  Database database = 1;
  Redis redis = 2;
  Database user = 3;
}

message App {
  string mode = 1;
  bool scanAll = 2;
  string addr = 3;
  bool starScan = 4;
  // Deprecated @ 2022-09-29
  repeated string dogeKey = 5;
  string target = 6;
  string source = 7;
  repeated string httpProxies = 8;
  string marketRpc = 9;
	map<string, string>    featuredCustomChain = 10;
	CMQ cmq = 11;
  string bfstationRpc = 12;
	// 展示 DeFi 平台资产交互次数阈值，当 DeFi 平台交互次数大于此值才展示其资产。
	int64 defiPlatformInteractionThr = 13;
}

message CMQ {
	string endpoint = 1;
	CMQueues queues = 2;
}

message CMQueues {
	CMQueue swapPairs = 1;
}

message CMQueue {
	string name = 1;
	string id = 2;
}

message AddressServer {
  string serverUrl = 1;
  int64 liveInterval = 2;
}

message Lark {
  string larkAlarmTitle = 1;
  string larkHost = 2;
  string larkSecret = 3;
  uint64 lockNum = 4;
  string larkAtList = 5;
  map<string, string> larkUids = 6;
  map<string, LarkSubscription> larkSubscriptions = 7;
  map<string, LarkBot> larkBots = 8;
}

message LarkBot {
  string host = 1;
  string secret = 2;
	repeated string atUids = 3;
}

message Logger {
  bool   DEBUG = 1;
  string fileName = 2;
  string level = 3;
  string archiveDir = 4;
  int32  maxSize = 5;
  int32  maxAge = 6;
  int32  maxBackups = 7;
}

message Transaction {
  string serverUrl = 1;
  string accessKey = 2;
}

message PlatInfo {
  string chain = 1;
  int32 decimal = 2;
  string fullName = 3;
  string getPriceKey = 4;
  string handler = 5;
  string nativeCurrency = 6;
  string symbol = 7;
  string type = 8;
  string netType = 9;
  repeated string rpcURL = 10;
  repeated string httpURL = 11;
  string tokenPrice = 12;
  string icon = 25;
  string nativeCurrencyIcon = 26;

  // chainId 区分链唯一标识
  string chainId = 13;
  //本地配置文件不需要配置，用户自定义 remote
  string source = 14;

  // 可以安全的进行并发爬块的高度差（即不用考虑分叉的高度），即：
  // 「链上高度 - 当前高度」大于此值才开始并发爬块。
  optional int32 safelyConcurrentBlockDelta = 15;

  // 爬块最大并发
  optional int32 maxConcurrency = 16;

  // 块高差报警阈值，爬块高度和链上高度的差大于此值进行报警。
  optional int32 monitorHeightAlarmThr = 17;

  // 多个节点轮询并发，否则每次只使用一个节点进行并发。
  optional bool roundRobinConcurrent = 18;

  // 备用节点，用于特定错误重试。
  repeated string standbyRPCURL = 19;

  // 是否启动代理，启用后将依次使用代理池中的代理进行访问节点。
  optional bool enableProxy = 20;

  // 处理交易的并发，实际会开启的 Goroutine 最大可能达到 maxConcurrency * handlingTxConcurrency。
  optional int32 handlingTxConcurrency = 21;

  // 从数据库读取块高时允许和链上块高的最大间隔值，超过当前阈值则直接使用链上块高。
  optional int32 maxAllowedHeightGap = 22;
}

message LarkSubscription {
  repeated string uids = 1;
}
