// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"block-crawling/internal/biz"
	"block-crawling/internal/conf"
	"block-crawling/internal/data"
	logger "block-crawling/internal/log"
	"block-crawling/internal/platform"
	"block-crawling/internal/server"
	"block-crawling/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, confApp *conf.App, confAddressServer *conf.AddressServer,
	confLark *conf.Lark, confLogger *conf.Logger, confTransaction *conf.Transaction, confInnerNodeList map[string]*conf.PlatInfo,
	confInnerPublicNodeList map[string]*conf.PlatInfo, confPlatform map[string]*conf.PlatInfo,
	confPlatformTest map[string]*conf.PlatInfo, logLogger log.Logger) (*kratos.App, func(), error) {
	logger.NewLogger(confLogger)
	gormDB, cleanup, err := data.NewGormDB(confData)
	if err != nil {
		return nil, nil, err
	}
	data.NewRedisClient(confData)
	biz.NewConfig(confApp)
	platform.NewPlatform(confInnerPublicNodeList, confPlatform, confPlatformTest)
	platform.NewInnerNodeList(confInnerNodeList)
	greeterRepo := data.NewGreeterRepo(gormDB)
	/*btcTransactionRecordRepo := */ data.NewBtcTransactionRecordRepo(gormDB)
	/*evmTransactionRecordRepo := */ data.NewEvmTransactionRecordRepo(gormDB)
	/*stcTransactionRecordRepo := */ data.NewStcTransactionRecordRepo(gormDB)
	/*trxTransactionRecordRepo := */ data.NewTrxTransactionRecordRepo(gormDB)
	/*aptTransactionRecordRepo := */ data.NewAptTransactionRecordRepo(gormDB)
	/*suiTransactionRecordRepo := */ data.NewSuiTransactionRecordRepo(gormDB)
	/*solTransactionRecordRepo := */ data.NewSolTransactionRecordRepo(gormDB)
	/*ckbTransactionRecordRepo := */ data.NewCkbTransactionRecordRepo(gormDB)
	data.NewDappApproveRecordRepo(gormDB)
	data.NewUserAssetRepo(gormDB)
	data.NewUtxoUnspentRecordRepo(gormDB)
	data.NewTransactionStatisticRepo(gormDB)
	data.NewNervosCellRecordRepo(gormDB)
	bizLark := biz.NewLark(confLark)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, bizLark, logLogger)
	greeterService := service.NewGreeterService(greeterUsecase)
	transactionUsecase := biz.NewTransactionUsecase(gormDB, bizLark)
	transactionService := service.NewTransactionService(transactionUsecase)

	grpcServer := server.NewGRPCServer(confServer, greeterService, transactionService, logLogger)
	httpServer := server.NewHTTPServer(confServer, greeterService, logLogger)
	kratosApp := newApp(logLogger, grpcServer, httpServer)
	return kratosApp, func() {
		cleanup()
	}, nil
}
